require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"BlueButton":[function(require,module,exports){
var dpr,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

dpr = require('DevicePixelRatio').dpr;

exports.BlueButton = (function(superClass) {
  extend(BlueButton, superClass);

  function BlueButton(options) {
    var base, base1, base2, buttonClass, css;
    this.options = options != null ? options : {};
    if ((base = this.options).outlineStyle == null) {
      base.outlineStyle = false;
    }
    if ((base1 = this.options).buttonText == null) {
      base1.buttonText = "This is a button";
    }
    if ((base2 = this.options).pageMargin == null) {
      base2.pageMargin = dpr(24);
    }
    BlueButton.__super__.constructor.call(this, this.options);
    this.backgroundColor = "transparent";
    if (!this.outlineStyle) {
      buttonClass = "<div class='blue'>" + this.options.buttonText + "</div>";
    } else {
      buttonClass = "<div class='outline'>" + this.options.buttonText + "</div>";
    }
    css = ".buttonContainer {\n	font-family: FrutigerLTStd-Roman, 'Open Sans', sans-serif, 'Open Sans', sans-serif;\n	font-size:" + (dpr(16)) + "px;\n	line-height:" + (dpr(16)) + "px;\n	font-weight:400;\n	text-transform: uppercase;\n}\n\n.blue {\n	width: " + this.width + "px;\n	background-color: #3399cc;\n	padding-top:" + (dpr(24)) + "px;\n	padding-bottom: " + (dpr(24)) + "px;\n	height:" + (dpr(59)) + "px;\n	text-align:center;\n}\n.outline {\n	width: " + (this.width - (this.options.pageMargin * 2)) + "px;\n	margin-left:" + this.options.pageMargin + "px;\n	border: " + (dpr(1)) + "px solid #3399cc;\n	background-color: #FFFFFF;\n	color:#3399cc;\n	height:" + (dpr(48)) + "px;\n	padding-top:" + (dpr(18)) + "px;\n	padding-bottom: " + (dpr(18)) + "px;\n	text-align:center;\n}";
    Utils.insertCSS(css);
    this.html = "<div class='buttonContainer'> " + buttonClass + " </div>";
    this.size = Utils.textSize(this.html);
  }

  BlueButton.define('outlineStyle', {
    get: function() {
      return this.options.outlineStyle;
    },
    set: function(value) {
      return this.options.outlineStyle = value;
    }
  });

  BlueButton.define('buttonText', {
    get: function() {
      return this.options.buttonText;
    },
    set: function(value) {
      return this.options.buttonText = value;
    }
  });

  BlueButton.define('pageMargin', {
    get: function() {
      return this.options.pageMargin;
    },
    set: function(value) {
      return this.options.pageMargin = value;
    }
  });

  return BlueButton;

})(Layer);


},{"DevicePixelRatio":"DevicePixelRatio"}],"BurgerMenu":[function(require,module,exports){
var dpr,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

dpr = require('DevicePixelRatio').dpr;

exports.BurgerMenu = (function(superClass) {
  extend(BurgerMenu, superClass);

  function BurgerMenu(options) {
    var base, base1, burgerLinkItem, burgerPinkBox, burgerScroller, closeIcon, createChevrons, css, defaultblue, i, len, lightblue, listOfMenuItems, menuCloseButton, menuItemHTML, menuItemY, myBurgerItem;
    this.options = options != null ? options : {};
    if ((base = this.options).basicData == null) {
      base.basicData = "please define the data as coffee file";
    }
    if ((base1 = this.options).name == null) {
      base1.name = "burgerMenuContainer";
    }
    BurgerMenu.__super__.constructor.call(this, this.options);
    this.backgroundColor = "pink";
    this.name = this.options.name;
    defaultblue = "#3399CC";
    lightblue = "#8DCEE5";
    css = ".burgerLinkItem {\n	font-family:FrutigerLTStd-Light;\n	font-weight: 200;\n	width: " + (this.width - (2 * dpr(24))) + "px;\n	padding: " + (dpr(26)) + "px " + (dpr(24)) + "px " + (dpr(20)) + "px;\n	border-bottom: solid 1px #CDCDCD;\n	# border-top: solid 1px #CDCDCD;\n	font-size: " + (dpr(18)) + "px;\n	color: defaultblue;\n	background-color: white;\n	text-transform: uppercase;\n}\n\n.chevronIcon {\n	background-image: url('modules/moduleImages/interface/icn_carat.svg');\n	background-repeat:no-repeat;\n	background-position:center;\n	background-size: 100%;\n	# background-color:purple;\n	width: " + (dpr(6)) + "px;\n	height: " + (dpr(11)) + "px;\n}\n\n.closeButton {\n	background-image: url('modules/moduleImages/interface/icn_close.svg');\n	background-repeat:no-repeat;\n	background-position:center;\n	background-size:100%;\n	//background-color:purple;\n	width: " + (dpr(30)) + "px;\n	height: " + (dpr(30)) + "px;\n}\n";
    Utils.insertCSS(css);
    burgerScroller = new ScrollComponent({
      size: Screen.size,
      name: "burgerScroller",
      backgroundColor: "#white",
      parent: this,
      scrollHorizontal: false
    });
    burgerScroller.content.draggable.overdrag = false;
    burgerPinkBox = new Layer({
      width: Screen.width,
      height: dpr(160),
      backgroundColor: "pink",
      parent: burgerScroller.content,
      name: "burgerPinkBox"
    });
    createChevrons = function() {
      var chevronContainer, chevronIcon;
      chevronContainer = new Layer({
        name: "chevronContainer",
        backgroundColor: "transparent",
        parent: burgerLinkItem,
        height: burgerLinkItem.height,
        width: dpr(6),
        maxX: burgerLinkItem.maxX - (dpr(24))
      });
      chevronIcon = new Layer({
        name: "chevronIcon",
        backgroundColor: "transparent",
        parent: chevronContainer,
        html: "<div class='chevronIcon'></div>"
      });
      chevronIcon.size = Utils.textSize(chevronIcon.html);
      chevronIcon.y = Align.center();
      return chevronIcon.x = Align.center();
    };
    menuCloseButton = new Layer({
      width: dpr(60),
      height: dpr(60),
      backgroundColor: "rgba(0,0,0,0.02)",
      x: dpr(5),
      y: dpr(20),
      name: "menuCloseButton",
      parent: this,
      borderRadius: this.width / 2
    });
    closeIcon = new Layer({
      name: "close_icon",
      backgroundColor: "transparent",
      parent: menuCloseButton,
      html: "<div class='closeButton'></div>"
    });
    closeIcon.size = Utils.textSize(closeIcon.html);
    closeIcon.y = Align.center();
    closeIcon.x = Align.center();
    menuCloseButton.onClick(function() {
      return print("Menu Close button pressed!");
    });
    ({
      checkIfScrollingIsNecessary: function() {
        var ref;
        if ((Framer.Device.screen.height <= (ref = burgerScroller.content.maxY) && ref < device.frame.maxY)) {
          return burgerScroller.scrollVertical = false;
        }
      }
    });
    listOfMenuItems = ["Mein Profil / Einstellungen", "Essen, Trinken, Nightlife", "Veranstaltungen", "AusflÃ¼ge", "Shopping", "Meine Termine", "Chat"];
    menuItemY = burgerPinkBox.height;
    for (i = 0, len = listOfMenuItems.length; i < len; i++) {
      myBurgerItem = listOfMenuItems[i];
      menuItemHTML = "<div class='burgerLinkItem'>" + myBurgerItem + "</div>";
      burgerLinkItem = new Layer({
        name: myBurgerItem,
        html: menuItemHTML,
        parent: burgerScroller.content,
        width: Screen.width,
        y: menuItemY,
        color: defaultblue,
        backgroundColor: "transparent"
      });
      print("burgerLinkItem.height is:" + Utils.textSize(burgerLinkItem.html).height);
      burgerLinkItem.height = Utils.textSize(burgerLinkItem.html).height;
      createChevrons();
      menuItemY = menuItemY + burgerLinkItem.height;
    }
    print("Framer.Device.screen.height is " + Framer.Device.screen.height);
    print("burgerScroller.content.maxY is " + burgerScroller.content.maxY);
  }

  BurgerMenu.define('burgerData', {
    get: function() {
      return this.options.burgerData;
    },
    set: function(value) {
      return this.options.burgerData = value;
    }
  });

  BurgerMenu.define('name', {
    get: function() {
      return this.options.name;
    },
    set: function(value) {
      return this.options.name = value;
    }
  });

  return BurgerMenu;

})(Layer);


},{"DevicePixelRatio":"DevicePixelRatio"}],"DevicePixelRatio":[function(require,module,exports){
exports.DevicePixelRatio = (function() {
  var VALUE, dpr, log;

  function DevicePixelRatio() {}

  log = function(v) {
    console.log("DevicePixelRatio set as:", v);
    return v;
  };

  dpr = function() {
    var devicePixelRatio, device_2x, device_3p5x, device_3x, i, initialValue, j, k, len, len1, len2, ref, ref1, ref2, value;
    initialValue = 1;
    value = initialValue;
    if (Utils.isFramerStudio() || Utils.isDesktop()) {
      ref = ['apple-', 'google-nexus-', 'iphone-6-', 'iphone-5', 'ipad-air', 'nexus-9', 'applewatch'];
      for (i = 0, len = ref.length; i < len; i++) {
        device_2x = ref[i];
        if (_.startsWith(Framer.Device.deviceType, device_2x)) {
          value = 2;
        }
      }
      ref1 = ['apple-iphone-6s-plus', 'google-nexus-5', 'htc-one-', 'microsoft-lumia-', 'samsung-galaxy-note-', 'iphone-6plus', 'nexus-5'];
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        device_3x = ref1[j];
        if (_.startsWith(Framer.Device.deviceType, device_3x)) {
          value = 3;
        }
      }
      ref2 = ['google-nexus-6'];
      for (k = 0, len2 = ref2.length; k < len2; k++) {
        device_3p5x = ref2[k];
        if (_.startsWith(Framer.Device.deviceType, device_3p5x)) {
          value = 3.5;
        }
      }
    }
    if (value !== initialValue) {
      return log(value);
    }
    if (!Utils.isDesktop()) {
      devicePixelRatio = Utils.devicePixelRatio();
      if (devicePixelRatio > initialValue) {
        value = devicePixelRatio;
      }
    }
    return log(value);
  };

  VALUE = dpr();

  DevicePixelRatio.calc = function(v) {
    return v * VALUE;
  };

  DevicePixelRatio.value = VALUE;

  return DevicePixelRatio;

})();

exports.dpr = exports.DevicePixelRatio.calc;


},{}],"EventCoverTile":[function(require,module,exports){
var dpr,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

dpr = require('DevicePixelRatio').dpr;

exports.EventCoverTile = (function(superClass) {
  extend(EventCoverTile, superClass);

  function EventCoverTile(options) {
    var css;
    this.options = options != null ? options : {};
    EventCoverTile.__super__.constructor.call(this, this.options);
    this.backgroundColor = "#FB8E7E";
    this.style = {
      "background-image": "url('modules/moduleImages/interface/img_underConstruction.png')",
      "background-repeat": "no-repeat",
      "background-position": "center",
      "background-size": (dpr(90)) + "px " + (dpr(90)) + "px"
    };
    css = "\n";
    Utils.insertCSS(css);
  }

  return EventCoverTile;

})(Layer);


},{"DevicePixelRatio":"DevicePixelRatio"}],"ExcursionCoverTile":[function(require,module,exports){
var dpr,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

dpr = require('DevicePixelRatio').dpr;

exports.ExcursionCoverTile = (function(superClass) {
  extend(ExcursionCoverTile, superClass);

  function ExcursionCoverTile(options) {
    var css;
    this.options = options != null ? options : {};
    ExcursionCoverTile.__super__.constructor.call(this, this.options);
    this.backgroundColor = "#FB8E7E";
    this.style = {
      "background-image": "url('modules/moduleImages/interface/img_underConstruction.png')",
      "background-repeat": "no-repeat",
      "background-position": "center",
      "background-size": (dpr(90)) + "px " + (dpr(90)) + "px"
    };
    css = "\n";
    Utils.insertCSS(css);
  }

  return ExcursionCoverTile;

})(Layer);


},{"DevicePixelRatio":"DevicePixelRatio"}],"IconButton":[function(require,module,exports){
var dpr,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

dpr = require('DevicePixelRatio').dpr;

exports.IconButton = (function(superClass) {
  extend(IconButton, superClass);

  function IconButton(options) {
    var base, css, icon;
    this.options = options != null ? options : {};
    if ((base = this.options).icon == null) {
      base.icon = false;
    }
    IconButton.__super__.constructor.call(this, this.options);
    this.backgroundColor = "transparent";
    css = "	.placeholder {\n			margin: " + (dpr(16)) + "px;\n			width:" + (dpr(40)) + "px;\n			height:" + (dpr(40)) + "px;\n			background-image:url('modules/moduleImages/interface/img_underConstruction.png');\n			background-repeat:no-repeat;\n			background-position:center;\n			background-size:60%;\n	}\n	.close {\n			margin: " + (dpr(16)) + "px;\n			width:" + (dpr(40)) + "px;\n			height:" + (dpr(40)) + "px;\n			background-image:url('modules/moduleImages/interface/icn_close.png');\n			background-repeat:no-repeat;\n			background-position:center;\n			background-size:60%;\n	}\n\n	.back {\n			margin: " + (dpr(16)) + "px;\n			width:" + (dpr(20)) + "px;\n			height:" + (dpr(40)) + "px;\n			background-image:url('modules/moduleImages/interface/icn_backarrow.png');\n			background-repeat:no-repeat;\n			background-position:center;\n			background-size:70%;\n	}\n	.burger {\n			margin-top: " + (dpr(35)) + "px;\n			width:" + (dpr(30)) + "px;\n			height:" + (dpr(20)) + "px;\n			background-image:url('modules/moduleImages/interface/icn_hamburger_menu.svg');\n			background-repeat:no-repeat;\n			background-position:center;\n			background-size:100%;\n	}\n	.weather {\n			margin-top: " + (dpr(35)) + "px;\n			width:" + (dpr(75)) + "px;\n			height:" + (dpr(58)) + "px;\n			background-image:url('modules/moduleImages/interface/placeholder_weather.png');\n			background-repeat:no-repeat;\n			background-position:center;\n			background-size:100%;\n	}\n\n}";
    Utils.insertCSS(css);
    icon = (function() {
      switch (false) {
        case this.options.icon !== "close":
          return "<div class= 'close'></div>";
        case this.options.icon !== "back":
          return "<div class='back'></div>";
        case this.options.icon !== "burger":
          return "<div class='burger'></div>";
        case this.options.icon !== "weather":
          return "<div class='weather'></div>";
        default:
          return "<div class='placeholder'></div>";
      }
    }).call(this);
    this.html = "" + icon;
    this.size = Utils.textSize(this.html);
  }

  IconButton.define('icon', {
    get: function() {
      return this.options.icon;
    },
    set: function(value) {
      return this.options.icon = value;
    }
  });

  return IconButton;

})(Layer);


},{"DevicePixelRatio":"DevicePixelRatio"}],"ItineraryCarousel":[function(require,module,exports){
var ItineraryView, dpr, locations, moment, npm,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

dpr = require('DevicePixelRatio').dpr;

locations = require('data_locations').locations;

ItineraryView = require('ItineraryView').ItineraryView;

npm = require('npm');

moment = npm.moment;

exports.ItineraryCarousel = (function(superClass) {
  extend(ItineraryCarousel, superClass);

  function ItineraryCarousel(options) {
    var base, base1, base2, base3, base4, base5, base6, base7, base8, countdownTimer, css, currentSegment, currentSegmentIndex, endDate, i, itineraryPages, j, newNow, now, postCruiseLayer, ref, ref1, segments, startDate, startingIndex;
    this.options = options != null ? options : {};
    if ((base = this.options).sailing == null) {
      base.sailing = "no sailing defined";
    }
    if ((base1 = this.options).imageScaleFactor == null) {
      base1.imageScaleFactor = 1.25;
    }
    if ((base2 = this.options).viewPadding == null) {
      base2.viewPadding = dpr(20);
    }
    if ((base3 = this.options).backgroundColor == null) {
      base3.backgroundColor = "white";
    }
    if ((base4 = this.options).testDate == null) {
      base4.testDate = moment("04/29/2017 00:00:00");
    }
    if ((base5 = this.options).arriving == null) {
      base5.arriving = false;
    }
    if ((base6 = this.options).pageCount == null) {
      base6.pageCount = 0;
    }
    if ((base7 = this.options).dirLock == null) {
      base7.dirLock = false;
    }
    if ((base8 = this.options).itinPageComponent == null) {
      base8.itinPageComponent = "";
    }
    ItineraryCarousel.__super__.constructor.call(this, this.options);
    this.directionLock = this.options.dirLock;
    css = ".itineraryInfoBlock {\n	font-family:font-family: FrutigerLTStd-Roman, 'Open Sans', sans-serif;\n	width:" + this.width + "px;\n	padding:" + this.options.viewPadding + "px;\n	//background:#33CC22;\n	}\n\n.itineraryMoustache {\n	font-size:" + (dpr(14)) + "px;\n	font-weight:100;\n	line-height:1;\n	margin-bottom:" + (dpr(5)) + "px;\n	//background:#663300;\n	width:" + (this.width - this.options.viewPadding * 2) + "px;\n\n}\n.itineraryTitle {\n	font-size:" + (dpr(38)) + "px;\n	font-weight:600;\n	line-height:1.1;\n	//background:#663300;\n	letter-spacing:-" + (dpr(2)) + "px;\n	width:" + (this.width - this.options.viewPadding * 2) + "px;\n	text-transform:uppercase;\n\n}\n.timeBlock {\n	width:" + (this.width - this.options.viewPadding * 2) + "px;\n	margin-top:" + (dpr(10)) + "px;\n	//border:1px solid #993333;\n}\n.itineraryTime {\n	font-size:" + (dpr(16)) + "px;\n	font-weight:200;\n	line-height:1.3;\n	//border:1px solid #993333;\n	padding-left:" + (dpr(40)) + "px;\n\n}\n.itineraryArrow {\n	float:left;\n	background-image:url(\"./images/interface/gr-arrow-callout@3x.png\");\n	background-size:100%;\n	padding-top:" + (dpr(4)) + "px;\n	background-repeat:no-repeat;\n	background-position:left center;\n	margin-top:" + (dpr(2)) + "px;\n	width:" + (dpr(27)) + "px;\n	height:" + (dpr(9)) + "px;\n}";
    Utils.insertCSS(css);
    moment.locale('de');
    newNow = moment(this.options.testDate);
    moment.now = function() {
      return newNow;
    };
    segments = this.options.sailing.segments;
    now = moment();
    startDate = moment(this.options.sailing.startAt);
    endDate = moment(segments[segments.length - 1].allFromBoard);
    itineraryPages = new PageComponent({
      size: this.size,
      name: "itineraryPagesPageComponent",
      scrollVertical: false,
      backgroundColor: "transparent",
      parent: this,
      directionLock: this.options.dirLock
    });
    this.options.itinPageComponent = itineraryPages;
    currentSegmentIndex = 0;
    currentSegment = this.determineSegment(segments);
    if (!currentSegment) {
      if (moment().isBefore(startDate)) {
        countdownTimer = new Layer({
          size: this.size,
          backgroundColor: "darkred",
          html: "<div style= 'margin-top:" + ((this.height / 2) + dpr(80)) + "px; margin-bottom:auto; width:" + this.width + "px; text-align:center; line-height:1.2; '>Countdown Timer</div>",
          parent: this
        });
        countdownTimer.style = {
          "background-image": "url('modules/moduleImages/interface/img_underConstruction.png')",
          "background-repeat": "no-repeat",
          "background-position": "center",
          "background-size": (dpr(90)) + "px " + (dpr(90)) + "px"
        };
        itineraryPages.visible = false;
      } else if (moment().isAfter(endDate)) {
        postCruiseLayer = new Layer({
          size: this.size,
          backgroundColor: "darkgreen",
          html: "<div style= 'margin-top:" + ((this.height / 2) + dpr(80)) + "px; margin-bottom:auto; margin-left:auto; margin-right:auto; width:" + (this.width / 2) + "px; line-height:1.2; text-align:center; '>Vielen Dank, daÃ Sie mit uns gereist sind.  Wir freuen uns, Sie noch mal an Bord begrÃ¼Ãen zu dÃ¼rfen!</div>",
          parent: this
        });
        postCruiseLayer.style = {
          "background-image": "url('modules/moduleImages/interface/img_underConstruction.png')",
          "background-repeat": "no-repeat",
          "background-position": "center",
          "background-size": (dpr(90)) + "px " + (dpr(90)) + "px"
        };
        itineraryPages.visible = false;
      }
    } else {
      currentSegmentIndex = segments.indexOf(currentSegment);
      itineraryPages.addPage(this.addMyDayPage(currentSegment), "right");
      if (!this.options.arriving) {
        startingIndex = currentSegmentIndex + 1;
      } else if (currentSegment.type === "seaday") {
        startingIndex = currentSegmentIndex + 1;
      } else {
        startingIndex = currentSegmentIndex;
      }
      for (i = j = ref = startingIndex, ref1 = segments.length; ref <= ref1 ? j < ref1 : j > ref1; i = ref <= ref1 ? ++j : --j) {
        itineraryPages.addPage(this.addItinPage(segments[i]), "right");
      }
    }
  }

  ItineraryCarousel.prototype.determineSegment = function(segmentList) {
    var currentSegment, endDate, startDate;
    startDate = moment(this.options.sailing.startAt);
    endDate = moment(segmentList[segmentList.length - 1].segmentEnd);
    currentSegment = segmentList.find((function(_this) {
      return function(segment) {
        return moment().isBetween(moment(segment.segmentStart), moment(segment.segmentEnd));
      };
    })(this));
    if (currentSegment) {
      return currentSegment;
    } else {
      return null;
    }
  };

  ItineraryCarousel.prototype.addMyDayPage = function(currentSegment) {
    var arrival, departure, page, pageType, selectedImage;
    if (currentSegment.type !== "seaday") {
      arrival = moment(currentSegment.arrivalTime);
      departure = moment(currentSegment.departureTime);
      selectedImage = "";
      pageType = "location";
      if (moment().isBetween(arrival, departure)) {
        this.options.arriving = false;
        selectedImage = this.selectImage(moment().hour(), currentSegment.location);
        pageType = currentSegment.type;
      } else if (moment().isSameOrBefore(arrival)) {
        this.options.arriving = true;
        selectedImage = this.selectImage(moment().hour(), locations.XXSEA);
        pageType = "arriving";
      } else if (moment().isSameOrAfter(departure)) {
        this.options.arriving = false;
        selectedImage = this.selectImage(moment().hour(), locations.XXSEA);
        pageType = "departing";
      } else {
        print("error - can't determine phase");
      }
    } else {
      this.options.arriving = false;
      selectedImage = this.selectImage(moment().hour(), currentSegment.location);
      pageType = "seaday";
    }
    page = new ItineraryView({
      size: this.size,
      name: "ItineraryNow",
      pageType: pageType,
      segment: currentSegment,
      testDate: this.options.testDate,
      segmentImage: selectedImage
    });
    this.options.pageCount = this.options.pageCount + 1;
    return page;
  };

  ItineraryCarousel.prototype.addItinPage = function(currentSegment) {
    var page;
    page = new ItineraryView({
      size: this.size,
      name: currentSegment.location.name + "_page",
      pageName: "" + currentSegment.location.name,
      pageType: currentSegment.type,
      segment: currentSegment,
      testDate: this.options.testDate,
      segmentImage: currentSegment.location.images.day[0]
    });
    this.options.pageCount = this.options.pageCount + 1;
    return page;
  };

  ItineraryCarousel.prototype.daytime = function(h) {
    if (indexOf.call([21, 22, 23, 24], h) >= 0 || indexOf.call([0, 1, 2, 3, 4], h) >= 0) {
      return "night";
    }
    if (indexOf.call([19, 20, 21], h) >= 0) {
      return "dusk";
    }
    if (indexOf.call([7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], h) >= 0) {
      return "day";
    }
    if (indexOf.call([5, 6], h) >= 0) {
      return "dawn";
    }
  };

  ItineraryCarousel.prototype.selectImage = function(forTime, forLocation) {
    var index, list;
    list = "";
    switch (this.daytime(forTime)) {
      case "night":
        list = forLocation.images.night;
        break;
      case "dusk":
        list = forLocation.images.dusk;
        break;
      case "day":
        list = forLocation.images.day;
        break;
      case "dawn":
        list = forLocation.images.dawn;
    }
    index = Math.round(Utils.randomNumber(0, list.length - 1));
    return list[index];
  };

  ItineraryCarousel.define('sailing', {
    get: function() {
      return this.options.sailing;
    },
    set: function(value) {
      return this.options.sailing = value;
    }
  });

  ItineraryCarousel.define('itinPageComponent', {
    get: function() {
      if (this.options.itinPageComponent === "") {
        return console.log("BackgroundFrame definition is missing");
      } else {
        return this.options.itinPageComponent;
      }
    },
    set: function(value) {
      return this.options.itinPageComponent = value;
    }
  });

  ItineraryCarousel.define('arriving', {
    get: function() {
      return this.options.arriving;
    },
    set: function(value) {
      return this.options.arriving = value;
    }
  });

  ItineraryCarousel.define('testDate', {
    get: function() {
      return this.options.testDate;
    },
    set: function(value) {
      return this.options.testDate = value;
    }
  });

  ItineraryCarousel.define('scaleFactor', {
    get: function() {
      return this.options.scaleFactor;
    },
    set: function(value) {
      return this.options.scaleFactor = value;
    }
  });

  ItineraryCarousel.define('pageCount', {
    get: function() {
      return this.options.pageCount;
    },
    set: function(value) {
      return this.options.pageCount = value;
    }
  });

  ItineraryCarousel.define('dirLock', {
    get: function() {
      return this.options.dirLock;
    },
    set: function(value) {
      return this.options.dirLock = value;
    }
  });

  return ItineraryCarousel;

})(Layer);


},{"DevicePixelRatio":"DevicePixelRatio","ItineraryView":"ItineraryView","data_locations":"data_locations","npm":"npm"}],"ItineraryDataCard":[function(require,module,exports){
var dpr, locations, moment, npm,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

dpr = require('DevicePixelRatio').dpr;

locations = require('data_locations').locations;

npm = require('npm');

moment = npm.moment;

exports.ItinCard = (function(superClass) {
  extend(ItinCard, superClass);

  function ItinCard(options) {
    var base, base1, base2, base3, base4, base5, base6, css;
    this.options = options != null ? options : {};
    if ((base = this.options).segment == null) {
      base.segment = "";
    }
    if ((base1 = this.options).sailing == null) {
      base1.sailing = "";
    }
    if ((base2 = this.options).pageType == null) {
      base2.pageType = "segment";
    }
    if ((base3 = this.options).imageScaleFactor == null) {
      base3.imageScaleFactor = "";
    }
    if ((base4 = this.options).imageScaleFactor == null) {
      base4.imageScaleFactor = 1.25;
    }
    if ((base5 = this.options).viewPadding == null) {
      base5.viewPadding = dpr(20);
    }
    if ((base6 = this.options).pageName == null) {
      base6.pageName = "Page";
    }
    ItinCard.__super__.constructor.call(this, this.options);
    moment.locale('de', {
      calendar: {
        lastDay: '[gestern] [um] LT',
        sameDay: '[heute] [um] LT',
        nextDay: '[morgen] [um] LT',
        lastWeek: '[Letzter] dddd [um] LT',
        nextWeek: 'dddd [um] LT',
        sameElse: 'dddd, LL [um] LT'
      }
    });
    moment.updateLocale('de', {
      longDateFormat: {
        LT: 'H:mm [Uhr]',
        LTS: 'H:mm:ss [Uhr]'
      }
    });
    css = ".itineraryInfoBlock {\n	font-family:font-family: FrutigerLTStd-Roman, 'Open Sans', sans-serif;\n	width:" + this.width + "px;\n	padding:" + this.options.viewPadding + "px;\n	//background:#33CC22;\n	}\n\n.itineraryMoustache {\n	font-size:" + (dpr(16)) + "px;\n	font-weight:100;\n	line-height:1;\n	margin-bottom:" + (dpr(5)) + "px;\n	text-transform: capitalize;\n	//background:#663300;\n	width:" + (this.width - this.options.viewPadding * 2) + "px;\n\n}\n.itineraryTitle {\n	font-size:" + (dpr(38)) + "px;\n	font-weight:600;\n	line-height:1.1;\n	//background:#663300;\n	letter-spacing:-" + (dpr(2)) + "px;\n	width:" + (this.width - this.options.viewPadding * 2) + "px;\n	text-transform:uppercase;\n\n}\n.timeBlock {\n	width:" + (this.width - this.options.viewPadding * 2 - dpr(40)) + "px;\n	margin-top:" + (dpr(10)) + "px;\n	//border:1px solid #993333;\n}\n.itineraryTime {\n	font-size:" + (dpr(16)) + "px;\n	font-weight:200;\n	line-height:1.3;\n	//border:1px solid #993333;\n	padding-left:" + (dpr(40)) + "px;\n\n}\n.itineraryArrow {\n	float:left;\n	background-image:url(\"modules/moduleImages/interface/gr-arrow-callout@3x.png\");\n	background-size:100%;\n	padding-top:" + (dpr(4)) + "px;\n	background-repeat:no-repeat;\n	background-position:left center;\n	margin-top:" + (dpr(2)) + "px;\n	width:" + (dpr(27)) + "px;\n	height:" + (dpr(9)) + "px;\n}\n\n.navigationIndicatorContainer {\n\n	width:" + (this.width - this.options.viewPadding * 2) + "px;\n}\n\n.navigationIndications {\n	background-image:url(\"modules/moduleImages/interface/icn_shipPositionPlaceholder.png\");\n	background-size:100%;\n	padding-top:" + this.options.viewPadding + "px;\n	background-repeat:no-repeat;\n	background-position:bottom center;\n	width:" + (dpr(280)) + "px;\n\n	margin-left:auto;\n	margin-right:auto;\n	height:" + (dpr(24)) + "px;\n	//border:4px solid #993333;\n\n}";
    Utils.insertCSS(css);
    this.html = this.getInfoByType(this.options.pageType, this.options.segment);
    this.size = Utils.textSize(this.html);
  }

  ItinCard.prototype.getInfoByType = function(type, segment) {
    var afterAllOnboard, afterArrival, afterBoardingEnd, afterMuster, allOnBoardBlock, allOnBoardString, arrivalBlock, beforeBoardStart, boarding, boardingBlock, departureString, moustacheTime, navSec, securityBlock, segEnd, segStart, segmentTitle;
    if (moment().isBetween(moment(segment.arrivalTime), moment(segment.segmentEnd))) {
      moustacheTime = "Jetzt";
    } else {
      moustacheTime = moment(segment.segmentStart).calendar().split(" um")[0];
    }
    switch (type) {
      case "onboarding":
        beforeBoardStart = moment().isBefore(moment(segment.boardingStart));
        boarding = moment().isBetween(moment(segment.boardingStart), moment(segment.allOnBoard));
        afterBoardingEnd = moment().isAfter(moment(segment.allOnBoard));
        afterMuster = moment().isAfter(moment(segment.securityStart));
        if (beforeBoardStart) {
          boardingBlock = "<div class='timeBlock'> <div class='itineraryArrow'></div> <div class='itineraryTime'>Boarding ab " + (moment(segment.boardingStart).format('LT')) + "</div> </div>";
        } else if (boarding) {
          boardingBlock = "<div class='timeBlock'> <div class='itineraryArrow'></div> <div class='itineraryTime'>Jetzt: Boarding - alle an Board bis " + (moment(segment.allOnBoard).format('LT')) + "</div> </div>";
        } else {
          boardingBlock = "";
        }
        if (afterMuster) {
          securityBlock = "";
        } else {
          securityBlock = "<div class='timeBlock'> <div class='itineraryArrow'></div> <div class='itineraryTime'>SicherheitsÃ¼bung um " + (moment(segment.securityStart).format('LT')) + "</div> </div>";
        }
        return "<div class='itineraryInfoBlock'> <div class='itineraryMoustache'>" + moustacheTime + "</div> <div class='itineraryTitle'>" + segment.location.marketingName + "</div> " + boardingBlock + " " + securityBlock + " <div class='timeBlock'> <div class='itineraryArrow'></div> <div class='itineraryTime'>Los geht's nach " + segment.nextLand.name + " um " + (moment(segment.departureTime).format('LT')) + "</div> </div> </div>";
      case "location":
        segStart = moment(segment.segmentStart);
        segEnd = moment(segment.segmentEnd);
        if (segEnd.diff(segStart, 'hours') >= 24) {
          allOnBoardString = "<div class='itineraryTime'>Alle an Bord " + (moment(segment.backOnBoard).calendar()) + "</div>";
          departureString = "<div class='itineraryTime'>Weiterfahrt nach " + segment.nextLand.name + " " + (moment(segment.departureTime).calendar()) + "</div>";
        } else {
          allOnBoardString = "<div class='itineraryTime'>Alle an Bord " + (moment(segment.backOnBoard).format('LT')) + "</div>";
          departureString = "<div class='itineraryTime'>Weiterfahrt nach " + segment.nextLand.name + " um " + (moment(segment.departureTime).format('LT')) + "</div>";
        }
        afterArrival = moment().isAfter(moment(segment.arrivalTime));
        afterAllOnboard = moment().isAfter(moment(segment.backOnBoard));
        if (afterArrival) {
          arrivalBlock = "";
        } else {
          arrivalBlock = "<div class='timeBlock'> <div class='itineraryArrow'></div> <div class='itineraryTime'>Ankunft um " + (moment(segment.arrivalTime).format('LT')) + "</div> </div>";
        }
        if (afterAllOnboard) {
          allOnBoardBlock = "";
        } else {
          allOnBoardBlock = "<div class = 'timeBlock'> <div class='itineraryArrow'></div> " + allOnBoardString + " </div>";
        }
        return "<div class='itineraryInfoBlock'> <div class='itineraryMoustache'>" + moustacheTime + "</div> <div class='itineraryTitle'>" + segment.location.marketingName + "</div> " + arrivalBlock + " " + allOnBoardBlock + " <div class = 'timeBlock'> <div class='itineraryArrow'></div> " + departureString + " </div> </div>";
      case "seaday":
        if (moment().isBetween(moment(segment.segmentStart), moment(segment.segmentEnd))) {
          segmentTitle = segment.location.marketingName;
          navSec = "<div class='navigationIndicatorContainer'> <div class='navigationIndications'></div> </div>";
        } else {
          segmentTitle = "Seetag";
          navSec = "";
        }
        return "<div class='itineraryInfoBlock'> <div class='itineraryMoustache'>" + moustacheTime + "</div> <div class='itineraryTitle'>" + segmentTitle + "</div> <div class='timeBlock'> <div class='itineraryArrow'></div> <div class='itineraryTime'>Ankunft in " + segment.nextLand.name + " " + (moment(segment.nextArrivalTime).calendar()) + "</div> </div> " + navSec + " </div>";
      case "arriving":
        return "<div class='itineraryInfoBlock'> <div class='itineraryMoustache'>Jetzt</div> <div class='itineraryTitle'>Auf See</div> <div class='timeBlock'> <div class='itineraryArrow'></div> <div class='itineraryTime'>Ankunft in " + segment.location.marketingName + " um " + (moment(segment.arrivalTime).format('LT')) + "</div> </div> <div class='navigationIndicatorContainer'> <div class='navigationIndications'></div> </div> </div>";
      case "departing":
        return "<div class='itineraryInfoBlock'> <div class='itineraryMoustache'>Jetzt</div> <div class='itineraryTitle'>Auf See</div> <div class='timeBlock'> <div class='itineraryArrow'></div> <div class='itineraryTime'>Ankunft in " + segment.nextLand.marketingName + " " + (moment(segment.nextArrivalTime).calendar()) + "</div> </div> <div class='navigationIndicatorContainer'> <div class='navigationIndications'></div> </div> </div>";
      case "offboarding":
        if (moment().isAfter(moment(segment.arrivalTime))) {
          arrivalBlock = "";
        } else {
          arrivalBlock = "<div class = 'timeBlock'> <div class='itineraryArrow'></div> <div class='app itineraryTime'>Ankunft um " + (moment(segment.arrivalTime).format('LT')) + "</div> </div>";
        }
        return "<div class='itineraryInfoBlock'> <div class='itineraryMoustache'>" + (moustacheTime.split(" um")[0]) + "</div> <div class='itineraryTitle'>" + segment.location.marketingName + "</div> " + arrivalBlock + " <div class = 'timeBlock'> <div class='itineraryArrow'></div> <div class='app itineraryTime'>Alle vom Bord um " + (moment(segment.allFromBoard).format('LT')) + "</div> </div> </div>";
    }
  };

  ItinCard.define('sailing', {
    get: function() {
      if (this.options.sailing === "") {
        return console.error("must define a sailing");
      } else {
        return this.options.sailing;
      }
    },
    set: function(value) {
      return this.options.sailing = value;
    }
  });

  ItinCard.define('segment', {
    get: function() {
      if (this.options.segment === "") {
        return console.error("must define a segment");
      } else {
        return this.options.segment;
      }
    },
    set: function(value) {
      return this.options.segment = value;
    }
  });

  ItinCard.define('viewPadding', {
    get: function() {
      return this.options.viewPadding;
    },
    set: function(value) {
      return this.options.viewPadding = value;
    }
  });

  ItinCard.define('pageType', {
    get: function() {
      return this.options.pageType;
    },
    set: function(value) {
      return this.options.pageType = value;
    }
  });

  return ItinCard;

})(Layer);


},{"DevicePixelRatio":"DevicePixelRatio","data_locations":"data_locations","npm":"npm"}],"ItineraryView":[function(require,module,exports){
var dpr, locations, moment, npm,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

dpr = require('DevicePixelRatio').dpr;

locations = require('data_locations').locations;

npm = require('npm');

moment = npm.moment;

exports.ItineraryView = (function(superClass) {
  extend(ItineraryView, superClass);

  function ItineraryView(options) {
    var base, base1, base2, base3, base4, base5, base6, base7, base8, card, css, gradientMask, page;
    this.options = options != null ? options : {};
    if ((base = this.options).segment == null) {
      base.segment = "no segment defined";
    }
    if ((base1 = this.options).sailing == null) {
      base1.sailing = "no segment defined";
    }
    if ((base2 = this.options).testDate == null) {
      base2.testDate = "04/29/2017 00:00:00";
    }
    if ((base3 = this.options).pageType == null) {
      base3.pageType = "segment";
    }
    if ((base4 = this.options).imageScaleFactor == null) {
      base4.imageScaleFactor = "";
    }
    if ((base5 = this.options).segmentImage == null) {
      base5.segmentImage = "default";
    }
    if ((base6 = this.options).imageScaleFactor == null) {
      base6.imageScaleFactor = 1.25;
    }
    if ((base7 = this.options).viewPadding == null) {
      base7.viewPadding = dpr(20);
    }
    if ((base8 = this.options).pageName == null) {
      base8.pageName = "Page";
    }
    ItineraryView.__super__.constructor.call(this, this.options);
    css = ".itineraryInfoBlock {\n	font-family:font-family: FrutigerLTStd-Roman, 'Open Sans', sans-serif;\n	width:" + this.width + "px;\n	padding:" + this.options.viewPadding + "px;\n	//background:#33CC22;\n	}\n\n.itineraryMoustache {\n	font-size:" + (dpr(16)) + "px;\n	font-weight:100;\n	line-height:1;\n	margin-bottom:" + (dpr(5)) + "px;\n	text-transform: capitalize;\n	//background:#663300;\n	width:" + (this.width - this.options.viewPadding * 2) + "px;\n\n}\n.itineraryTitle {\n	font-size:" + (dpr(38)) + "px;\n	font-weight:600;\n	line-height:1.1;\n	//background:#663300;\n	letter-spacing:-" + (dpr(2)) + "px;\n	width:" + (this.width - this.options.viewPadding * 2) + "px;\n	text-transform:uppercase;\n\n}\n.timeBlock {\n	width:" + (this.width - this.options.viewPadding * 2 - dpr(40)) + "px;\n	margin-top:" + (dpr(10)) + "px;\n	//border:1px solid #993333;\n}\n.itineraryTime {\n	font-size:" + (dpr(16)) + "px;\n	font-weight:200;\n	line-height:1.3;\n	//border:1px solid #993333;\n	padding-left:" + (dpr(40)) + "px;\n\n}\n.itineraryArrow {\n	float:left;\n	background-image:url(\"modules/moduleImages/interface/gr-arrow-callout@3x.png\");\n	background-size:100%;\n	padding-top:" + (dpr(4)) + "px;\n	background-repeat:no-repeat;\n	background-position:left center;\n	margin-top:" + (dpr(2)) + "px;\n	width:" + (dpr(27)) + "px;\n	height:" + (dpr(9)) + "px;\n}\n\n.navigationIndicatorContainer {\n\n	width:" + (this.width - this.options.viewPadding * 2) + "px;\n}\n\n.navigationIndications {\n	background-image:url(\"modules/moduleImages/interface/icn_shipPositionPlaceholder.png\");\n	background-size:100%;\n	padding-top:" + this.options.viewPadding + "px;\n	background-repeat:no-repeat;\n	background-position:bottom center;\n	width:" + (dpr(280)) + "px;\n\n	margin-left:auto;\n	margin-right:auto;\n	height:" + (dpr(24)) + "px;\n	//border:4px solid #993333;\n\n}";
    Utils.insertCSS(css);
    this.name = this.options.pageName + "_container";
    moment.locale('de', {
      calendar: {
        lastDay: '[gestern] [um] LT',
        sameDay: '[heute] [um] LT',
        nextDay: '[morgen] [um] LT',
        lastWeek: '[Letzter] dddd [um] LT',
        nextWeek: 'dddd [um] LT',
        sameElse: 'dddd, LL [um] LT'
      }
    });
    moment.updateLocale('de', {
      longDateFormat: {
        LT: 'H:mm [Uhr]',
        LTS: 'H:mm:ss [Uhr]'
      }
    });
    page = new Layer({
      size: this.size,
      backgroundColor: "#FB8E7E",
      name: this.options.pageName + "_image",
      image: this.options.segmentImage,
      parent: this
    });
    if (this.options.segmentImage === "default") {
      page.style = {
        "background-image": "url('modules/moduleImages/interface/img_underConstruction.png')",
        "background-repeat": "no-repeat",
        "background-position": "center",
        "background-size": (dpr(90)) + "px " + (dpr(90)) + "px"
      };
    }
    gradientMask = new Layer({
      name: this.options.pageName + "_tint",
      parent: page,
      width: this.width,
      height: this.height / 2,
      maxY: this.height
    });
    gradientMask.style.background = "linear-gradient(to bottom, rgba(0,0,0,0) 0%, rgba(0,0,0,0.60) 50%, rgba(0,0,0,0.8) 100%)";
    card = new Layer({
      backgroundColor: "transparent",
      name: this.options.pageName + "_info",
      parent: page,
      html: this.getInfoByType(this.options.pageType, this.options.segment)
    });
    card.size = Utils.textSize(card.html);
    card.y = Align.bottom(-dpr(40));
  }

  ItineraryView.prototype.getInfoByType = function(type, segment) {
    var afterAllOnboard, afterArrival, afterBoardingEnd, afterMuster, allOnBoardBlock, allOnBoardString, arrivalBlock, beforeBoardStart, boarding, boardingBlock, departureString, moustacheTime, navSec, securityBlock, segEnd, segStart, segmentTitle;
    if (moment().isBetween(moment(segment.arrivalTime), moment(segment.segmentEnd))) {
      moustacheTime = "Jetzt";
    } else {
      moustacheTime = moment(segment.segmentStart).calendar().split(" um")[0];
    }
    switch (type) {
      case "onboarding":
        beforeBoardStart = moment().isBefore(moment(segment.boardingStart));
        boarding = moment().isBetween(moment(segment.boardingStart), moment(segment.allOnBoard));
        afterBoardingEnd = moment().isAfter(moment(segment.allOnBoard));
        afterMuster = moment().isAfter(moment(segment.securityStart));
        if (beforeBoardStart) {
          boardingBlock = "<div class='timeBlock'> <div class='itineraryArrow'></div> <div class='itineraryTime'>Boarding ab " + (moment(segment.boardingStart).format('LT')) + "</div> </div>";
        } else if (boarding) {
          boardingBlock = "<div class='timeBlock'> <div class='itineraryArrow'></div> <div class='itineraryTime'>Jetzt: Boarding - alle an Board bis " + (moment(segment.allOnBoard).format('LT')) + "</div> </div>";
        } else {
          boardingBlock = "";
        }
        if (afterMuster) {
          securityBlock = "";
        } else {
          securityBlock = "<div class='timeBlock'> <div class='itineraryArrow'></div> <div class='itineraryTime'>SicherheitsÃ¼bung um " + (moment(segment.securityStart).format('LT')) + "</div> </div>";
        }
        return "<div class='itineraryInfoBlock'> <div class='itineraryMoustache'>" + moustacheTime + "</div> <div class='itineraryTitle'>" + segment.location.marketingName + "</div> " + boardingBlock + " " + securityBlock + " <div class='timeBlock'> <div class='itineraryArrow'></div> <div class='itineraryTime'>Los geht's nach " + segment.nextLand.name + " um " + (moment(segment.departureTime).format('LT')) + "</div> </div> </div>";
      case "location":
        segStart = moment(segment.segmentStart);
        segEnd = moment(segment.segmentEnd);
        if (segEnd.diff(segStart, 'hours') >= 24) {
          allOnBoardString = "<div class='itineraryTime'>Alle an Bord " + (moment(segment.backOnBoard).calendar()) + "</div>";
          departureString = "<div class='itineraryTime'>Weiterfahrt nach " + segment.nextLand.name + " " + (moment(segment.departureTime).calendar()) + "</div>";
        } else {
          allOnBoardString = "<div class='itineraryTime'>Alle an Bord " + (moment(segment.backOnBoard).format('LT')) + "</div>";
          departureString = "<div class='itineraryTime'>Weiterfahrt nach " + segment.nextLand.name + " um " + (moment(segment.departureTime).format('LT')) + "</div>";
        }
        afterArrival = moment().isAfter(moment(segment.arrivalTime));
        afterAllOnboard = moment().isAfter(moment(segment.backOnBoard));
        if (afterArrival) {
          arrivalBlock = "";
        } else {
          arrivalBlock = "<div class='timeBlock'> <div class='itineraryArrow'></div> <div class='itineraryTime'>Ankunft um " + (moment(segment.arrivalTime).format('LT')) + "</div> </div>";
        }
        if (afterAllOnboard) {
          allOnBoardBlock = "";
        } else {
          allOnBoardBlock = "<div class = 'timeBlock'> <div class='itineraryArrow'></div> " + allOnBoardString + " </div>";
        }
        return "<div class='itineraryInfoBlock'> <div class='itineraryMoustache'>" + moustacheTime + "</div> <div class='itineraryTitle'>" + segment.location.marketingName + "</div> " + arrivalBlock + " " + allOnBoardBlock + " <div class = 'timeBlock'> <div class='itineraryArrow'></div> " + departureString + " </div> </div>";
      case "seaday":
        if (moment().isBetween(moment(segment.segmentStart), moment(segment.segmentEnd))) {
          segmentTitle = segment.location.marketingName;
          navSec = "<div class='navigationIndicatorContainer'> <div class='navigationIndications'></div> </div>";
        } else {
          segmentTitle = "Seetag";
          navSec = "";
        }
        return "<div class='itineraryInfoBlock'> <div class='itineraryMoustache'>" + moustacheTime + "</div> <div class='itineraryTitle'>" + segmentTitle + "</div> <div class='timeBlock'> <div class='itineraryArrow'></div> <div class='itineraryTime'>Ankunft in " + segment.nextLand.name + " " + (moment(segment.nextArrivalTime).calendar()) + "</div> </div> " + navSec + " </div>";
      case "arriving":
        return "<div class='itineraryInfoBlock'> <div class='itineraryMoustache'>Jetzt</div> <div class='itineraryTitle'>Auf See</div> <div class='timeBlock'> <div class='itineraryArrow'></div> <div class='itineraryTime'>Ankunft in " + segment.location.marketingName + " um " + (moment(segment.arrivalTime).format('LT')) + "</div> </div> <div class='navigationIndicatorContainer'> <div class='navigationIndications'></div> </div> </div>";
      case "departing":
        return "<div class='itineraryInfoBlock'> <div class='itineraryMoustache'>Jetzt</div> <div class='itineraryTitle'>Auf See</div> <div class='timeBlock'> <div class='itineraryArrow'></div> <div class='itineraryTime'>Ankunft in " + segment.nextLand.marketingName + " " + (moment(segment.nextArrivalTime).calendar()) + "</div> </div> <div class='navigationIndicatorContainer'> <div class='navigationIndications'></div> </div> </div>";
      case "offboarding":
        if (moment().isAfter(moment(segment.arrivalTime))) {
          arrivalBlock = "";
        } else {
          arrivalBlock = "<div class = 'timeBlock'> <div class='itineraryArrow'></div> <div class='app itineraryTime'>Ankunft um " + (moment(segment.arrivalTime).format('LT')) + "</div> </div>";
        }
        return "<div class='itineraryInfoBlock'> <div class='itineraryMoustache'>" + (moustacheTime.split(" um")[0]) + "</div> <div class='itineraryTitle'>" + segment.location.marketingName + "</div> " + arrivalBlock + " <div class = 'timeBlock'> <div class='itineraryArrow'></div> <div class='app itineraryTime'>Alle vom Bord um " + (moment(segment.allFromBoard).format('LT')) + "</div> </div> </div>";
    }
  };

  ItineraryView.define('sailing', {
    get: function() {
      return this.options.sailing;
    },
    set: function(value) {
      return this.options.sailing = value;
    }
  });

  ItineraryView.define('segment', {
    get: function() {
      return this.options.segment;
    },
    set: function(value) {
      return this.options.segment = value;
    }
  });

  ItineraryView.define('viewPadding', {
    get: function() {
      return this.options.viewPadding;
    },
    set: function(value) {
      return this.options.viewPadding = value;
    }
  });

  ItineraryView.define('imageScaleFactor', {
    get: function() {
      return this.options.imageScaleFactor;
    },
    set: function(value) {
      return this.options.imageScaleFactor = value;
    }
  });

  ItineraryView.define('pageName', {
    get: function() {
      return this.options.pageName;
    },
    set: function(value) {
      return this.options.pageName = value;
    }
  });

  ItineraryView.define('segmentImage', {
    get: function() {
      return this.options.segmentImage;
    },
    set: function(value) {
      return this.options.segmentImage = value;
    }
  });

  ItineraryView.define('testDate', {
    get: function() {
      return this.options.testDate;
    },
    set: function(value) {
      return this.options.testDate = value;
    }
  });

  ItineraryView.define('pageType', {
    get: function() {
      return this.options.pageType;
    },
    set: function(value) {
      return this.options.pageType = value;
    }
  });

  return ItineraryView;

})(Layer);


},{"DevicePixelRatio":"DevicePixelRatio","data_locations":"data_locations","npm":"npm"}],"MyDayDetailView":[function(require,module,exports){
var dpr,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

dpr = require('DevicePixelRatio').dpr;

exports.MyDayView = (function(superClass) {
  extend(MyDayView, superClass);

  Events.closeClicked = "MyDayView.closeClicked";

  function MyDayView(options) {
    var base, base1, base2, css;
    this.options = options != null ? options : {};
    if ((base = this.options).segment == null) {
      base.segment = "";
    }
    if ((base1 = this.options).pageMargin == null) {
      base1.pageMargin = dpr(24);
    }
    if ((base2 = this.options).testDate == null) {
      base2.testDate = moment("05/03/2017 8:30");
    }
    MyDayView.__super__.constructor.call(this, this.options);
    this.backgroundColor = "#FB8E7E";
    this.style = {
      "background-image": "url('modules/moduleImages/interface/img_underConstruction.png')",
      "background-repeat": "no-repeat",
      "background-position": "center",
      "background-size": (dpr(90)) + "px " + (dpr(90)) + "px"
    };
    css = "\n\n\n\n\n";
    Utils.insertCSS(css);
  }

  MyDayView.define('segment', {
    get: function() {
      if (this.options.location === "") {
        return console.error("No segment defined");
      } else {
        return this.options.list;
      }
    },
    set: function(value) {
      return this.options.list = value;
    }
  });

  MyDayView.define('pageMargin', {
    get: function() {
      return this.options.pageMargin;
    },
    set: function(value) {
      return this.options.pageMargin = value;
    }
  });

  MyDayView.define('testDate', {
    get: function() {
      return this.options.testDate;
    },
    set: function(value) {
      return this.options.testDate = value;
    }
  });

  return MyDayView;

})(Layer);


},{"DevicePixelRatio":"DevicePixelRatio"}],"OLD_data_topics":[function(require,module,exports){
var excursions, venues;

excursions = require('data_excursions').excursions;

venues = require('data_venues').venues;

exports.data_topics = {
  wellness: {
    title: "Wellness,<br />Sport & Spa",
    subtitle: "Sich wohlfÃ¼hlen war nie einfacher",
    image: "modules/moduleImages/topics/topicWellness.jpg",
    categorySubline: "groÃartige Orte zum Geniessen und feiern",
    subtopics: [
      {
        name: "Sport und Wellness Angebote",
        members: []
      }, {
        name: "Aktive AusflÃ¼ge",
        members: [excursions.A1001, excursions.A1002, excursions.A1003]
      }, {
        name: "Sport und Spiel Veranstaltungen",
        members: []
      }
    ]
  }
};


},{"data_excursions":"data_excursions","data_venues":"data_venues"}],"OLD_data_venues":[function(require,module,exports){
var categories;

categories = require('data_categories').categories;

exports.venues = {
  kidsClub: {
    name: "Kids Club",
    tags: [categories.family],
    type: "kids",
    subtype: "TODO"
  },
  rossini: {
    name: "Gourmet restaurant Rossini",
    tags: [categories.eat],
    type: "restaurant",
    subtype: "alacarte"
  },
  buffalo: {
    name: "Buffalo Steak House",
    tags: [categories.eat],
    type: "restaurant",
    subtype: "alacarte"
  },
  sushibar: {
    name: "Sushi Bar",
    tags: [categories.eat],
    type: "restaurant",
    subtype: "alacarte"
  },
  brauhaus: {
    name: "Brauhaus",
    tags: [categories.eat],
    type: "restaurant",
    subtype: "service"
  },
  frenchkiss: {
    name: "French Kiss â die Brasserie",
    tags: [categories.eat],
    type: "restaurant",
    subtype: "service"
  },
  casanova: {
    name: "Casa Nova",
    tags: [categories.eat],
    type: "restaurant",
    subtype: "service"
  },
  belladonna: {
    name: "Bella Donna",
    tags: [categories.eat],
    type: "restaurant",
    subtype: "buffet"
  },
  fuego: {
    name: "Fuego",
    tags: [categories.eat],
    type: "restaurant",
    subtype: "buffet"
  },
  weitewelt: {
    name: "Weite Welt Restaurant",
    tags: [categories.eat],
    type: "restaurant",
    subtype: "buffet"
  },
  belladonna: {
    name: "Markt restaurant",
    tags: [categories.eat],
    type: "restaurant",
    subtype: "buffet"
  },
  east: {
    name: "East",
    tags: [categories.eat],
    type: "restaurant",
    subtype: "buffet"
  },
  kochstudio: {
    name: "Kochstudio",
    tags: [categories.eat],
    type: "TODO",
    subtype: "TODO"
  },
  nightfly: {
    name: "Nightfly Nightclub",
    tags: [categories.eat],
    type: "bar",
    subtype: "TODO"
  }
};


},{"data_categories":"data_categories"}],"Ratings":[function(require,module,exports){
var SVGLayer, dpr,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SVGLayer = require('SVGLayer').SVGLayer;

dpr = require('DevicePixelRatio').dpr;

exports.Ratings = (function(superClass) {
  extend(Ratings, superClass);

  function Ratings(options) {
    var base, base1, base2, base3, base4, css;
    this.options = options != null ? options : {};
    if ((base = this.options).numStars == null) {
      base.numStars = 10;
    }
    if ((base1 = this.options).starRating == null) {
      base1.starRating = 3;
    }
    if ((base2 = this.options).starHeight == null) {
      base2.starHeight = dpr(30);
    }
    if ((base3 = this.options).starWidth == null) {
      base3.starWidth = dpr(30);
    }
    if ((base4 = this.options).starGap == null) {
      base4.starGap = dpr(10);
    }
    Ratings.__super__.constructor.call(this, this.options);
    this.setRatings();
    this.backgroundColor = "transparent";
    this.height = this.options.starHeight;
    css = ".filled {\n		width:" + this.options.starWidth + "px;\n		height:" + this.options.starHeight + "px;\n		background-image:url('modules/moduleImages/interface/rating_star_filled.png');\n		background-repeat:no-repeat;\n		background-position:center;\n		background-size:100%;\n}\n.open {\n		width:" + this.options.starWidth + "px;\n		height:" + this.options.starHeight + "px;\n		background-image:url('modules/moduleImages/interface/rating_star_open.png');\n		background-repeat:no-repeat;\n		background-position:center;\n		background-size:100%;\n}";
    Utils.insertCSS(css);
  }

  Ratings.prototype.setRatings = function() {
    var i, j, ref, results, star;
    results = [];
    for (i = j = 0, ref = this.options.numStars; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      star = new Layer({
        name: "star_" + i,
        width: this.options.starWidth,
        backgroundColor: "transparent",
        height: this.options.starHeight,
        parent: this
      });
      if (i < this.options.starRating) {
        star.html = "<div class='filled'></div>";
      } else {
        star.html = "<div class='open'></div>";
      }
      star.x = i * (star.width + this.options.starGap);
      results.push(this.width = star.maxX);
    }
    return results;
  };

  Ratings.define('numStars', {
    get: function() {
      return this.options.numStars;
    },
    set: function(value) {
      return this.options.numStars = value;
    }
  });

  Ratings.define('starRating', {
    get: function() {
      return this.options.starRating;
    },
    set: function(value) {
      return this.options.starRating = value;
    }
  });

  Ratings.define('starHeight', {
    get: function() {
      return this.options.starHeight;
    },
    set: function(value) {
      return this.options.starHeight = value;
    }
  });

  Ratings.define('starWidth', {
    get: function() {
      return this.options.starWidth;
    },
    set: function(value) {
      return this.options.starWidth = value;
    }
  });

  Ratings.define('starGap', {
    get: function() {
      return this.options.starGap;
    },
    set: function(value) {
      return this.options.starGap = value;
    }
  });

  return Ratings;

})(Layer);


},{"DevicePixelRatio":"DevicePixelRatio","SVGLayer":"SVGLayer"}],"SVGLayer":[function(require,module,exports){
"SVGLayer class\n\nproperties\n- linecap <string> (\"round\" || \"square\" || \"butt\")\n- fill <string> (css color)\n- stroke <string> (css color)\n- strokeWidth <number>\n- dashOffset <number> (from -1 to 1, defaults to 0)";
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

exports.SVGLayer = (function(superClass) {
  extend(SVGLayer, superClass);

  function SVGLayer(options) {
    var cName, d, footer, header, path, t;
    if (options == null) {
      options = {};
    }
    options = _.defaults(options, {
      dashOffset: 1,
      strokeWidth: 2,
      stroke: "#28affa",
      backgroundColor: null,
      clip: false,
      fill: "transparent",
      linecap: "round"
    });
    SVGLayer.__super__.constructor.call(this, options);
    if (options.fill === null) {
      this.fill = null;
    }
    this.width += options.strokeWidth / 2;
    this.height += options.strokeWidth / 2;
    d = new Date();
    t = d.getTime();
    cName = "c" + t;
    header = "<svg class='" + cName + "' x='0px' y='0px' width='" + this.width + "' height='" + this.height + "' viewBox='-" + (this.strokeWidth / 2) + " -" + (this.strokeWidth / 2) + " " + (this.width + this.strokeWidth / 2) + " " + (this.height + this.strokeWidth / 2) + "'>";
    path = options.path;
    footer = "</svg>";
    this.html = header + path + footer;
    Utils.domComplete((function(_this) {
      return function() {
        var domPath;
        domPath = document.querySelector('.' + cName + ' path');
        _this._pathLength = domPath.getTotalLength();
        _this.style = {
          "stroke-dasharray": _this.pathLength
        };
        return _this.dashOffset = options.dashOffset;
      };
    })(this));
  }

  SVGLayer.define("pathLength", {
    get: function() {
      return this._pathLength;
    },
    set: function(value) {
      return print("SVGLayer.pathLength is readonly");
    }
  });

  SVGLayer.define("linecap", {
    get: function() {
      return this.style.strokeLinecap;
    },
    set: function(value) {
      return this.style.strokeLinecap = value;
    }
  });

  SVGLayer.define("strokeLinecap", {
    get: function() {
      return this.style.strokeLinecap;
    },
    set: function(value) {
      return this.style.strokeLinecap = value;
    }
  });

  SVGLayer.define("fill", {
    get: function() {
      return this.style.fill;
    },
    set: function(value) {
      if (value === null) {
        value = "transparent";
      }
      return this.style.fill = value;
    }
  });

  SVGLayer.define("stroke", {
    get: function() {
      return this.style.stroke;
    },
    set: function(value) {
      return this.style.stroke = value;
    }
  });

  SVGLayer.define("strokeColor", {
    get: function() {
      return this.style.stroke;
    },
    set: function(value) {
      return this.style.stroke = value;
    }
  });

  SVGLayer.define("strokeWidth", {
    get: function() {
      return Number(this.style.strokeWidth.replace(/[^\d.-]/g, ''));
    },
    set: function(value) {
      return this.style.strokeWidth = value;
    }
  });

  SVGLayer.define("dashOffset", {
    get: function() {
      return this._dashOffset;
    },
    set: function(value) {
      var dashOffset;
      this._dashOffset = value;
      if (this.pathLength != null) {
        dashOffset = Utils.modulate(value, [0, 1], [this.pathLength, 0]);
        return this.style.strokeDashoffset = dashOffset;
      }
    }
  });

  return SVGLayer;

})(Layer);


},{}],"SectionLocation":[function(require,module,exports){
var dpr,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

dpr = require('DevicePixelRatio').dpr;

exports.SectionLocation = (function(superClass) {
  extend(SectionLocation, superClass);

  function SectionLocation(options) {
    var base, css;
    this.options = options != null ? options : {};
    if ((base = this.options).pageMargin == null) {
      base.pageMargin = dpr(24);
    }
    SectionLocation.__super__.constructor.call(this, this.options);
    this.backgroundColor = "#FB8E7E";
    this.style = {
      "background-image": "url('modules/moduleImages/interface/img_underConstruction.png')",
      "background-repeat": "no-repeat",
      "background-position": "center",
      "background-size": (dpr(40)) + "px " + (dpr(40)) + "px"
    };
    this.width = this.width - (this.options.pageMargin * 2);
    this.x = this.options.pageMargin;
    css = "\n";
    Utils.insertCSS(css);
  }

  SectionLocation.define('pageMargin', {
    get: function() {
      return this.options.pageMargin;
    },
    set: function(value) {
      return this.options.pageMargin = value;
    }
  });

  return SectionLocation;

})(Layer);


},{"DevicePixelRatio":"DevicePixelRatio"}],"SectionMainArticle":[function(require,module,exports){
var dpr, headingSizes,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

dpr = require('DevicePixelRatio').dpr;

headingSizes = require('data_headings').headingSizes;

exports.SectionMainArticle = (function(superClass) {
  extend(SectionMainArticle, superClass);

  function SectionMainArticle(options) {
    var base, base1, base2, css, defaultblue, grey2;
    this.options = options != null ? options : {};
    if ((base = this.options).articleTitle == null) {
      base.articleTitle = "articleTitle";
    }
    if ((base1 = this.options).articleContent == null) {
      base1.articleContent = "detailPage";
    }
    if ((base2 = this.options).pageMargin == null) {
      base2.pageMargin = dpr(24);
    }
    SectionMainArticle.__super__.constructor.call(this, this.options);
    this.x = this.options.pageMargin;
    this.backgroundColor = "transparent";
    defaultblue = "#3399CC";
    grey2 = "#555555";
    css = "\n.articleContainer {\n	font-family: FrutigerLTStd-Light, 'Open Sans', sans-serif, 'Open Sans', sans-serif;\n	width: " + (this.width - (this.options.pageMargin * 2)) + "px;\n}\n.articleTitle {\n	font-weight:100;\n	font-size: " + headingSizes.xl + "px;\n	line-height: 1.2;\n	padding-bottom: " + (dpr(16)) + "px;\n	padding-top:" + (dpr(24)) + "px;\n	color: " + grey2 + ";\n	}\n\n.articleSecHeader {\n	font-size: " + (dpr(32)) + "px;\n	line-height: 1.2;\n	padding-bottom: " + (dpr(16)) + "px;\n	}\n\n.articleBody {\n	font-size: " + (dpr(18)) + "px;\n	line-height: 1.4;\n	color: " + grey2 + ";\n	}\n";
    Utils.insertCSS(css);
    this.html = "<div class='articleContainer'> <div class='articleTitle'> " + this.options.articleTitle + " </div> <div class='articleBody'> " + this.options.articleContent + " </div> </div>";
    this.size = Utils.textSize(this.html);
  }

  SectionMainArticle.define('articleTitle', {
    get: function() {
      return this.options.articleTitle;
    },
    set: function(value) {
      return this.options.articleTitle = value;
    }
  });

  SectionMainArticle.define('articleContent', {
    get: function() {
      return this.options.articleContent;
    },
    set: function(value) {
      return this.options.articleContent = value;
    }
  });

  SectionMainArticle.define('pageMargin', {
    get: function() {
      return this.options.pageMargin;
    },
    set: function(value) {
      return this.options.pageMargin = value;
    }
  });

  return SectionMainArticle;

})(Layer);


},{"DevicePixelRatio":"DevicePixelRatio","data_headings":"data_headings"}],"SectionOpeningHours":[function(require,module,exports){
var dpr, moment, npm, venues,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

npm = require('npm');

moment = npm.moment;

dpr = require('DevicePixelRatio').dpr;

venues = require('data_venues').venues;

exports.SectionOpeningHours = (function(superClass) {
  extend(SectionOpeningHours, superClass);

  function SectionOpeningHours(options) {
    var base, base1, base2, base3, base4, base5, css, day, grey2, i, j, k, len, len1, len2, newNow, openingTime, ref, ref1, ref2, seperator, today, todaysTimes, tomorrow, tomorrowsTimes;
    this.options = options != null ? options : {};
    if ((base = this.options).testDate == null) {
      base.testDate = moment("04/29/2017");
    }
    if ((base1 = this.options).venue == null) {
      base1.venue = "";
    }
    if ((base2 = this.options).sectionLabel == null) {
      base2.sectionLabel = "this is sectionLabel";
    }
    if ((base3 = this.options).pageMargin == null) {
      base3.pageMargin = dpr(24);
    }
    if ((base4 = this.options).width == null) {
      base4.width = 400;
    }
    if ((base5 = this.options).hasStroke == null) {
      base5.hasStroke = false;
    }
    SectionOpeningHours.__super__.constructor.call(this, this.options);
    this.backgroundColor = "white";
    this.name = "openingHoursSection";
    moment.locale('de');
    newNow = moment(this.options.testDate);
    moment.now = function() {
      return newNow;
    };
    grey2 = "#555555";
    css = ".spacer {\n	margin-top:" + this.options.pageMargin + "px;\n\n}\n.line {\n	border-top:" + (dpr(1)) + "px solid #e3e3e3;\n	margin-bottom:" + this.options.pageMargin + "px;\n\n}\n.secOH {\n	font-family: FrutigerLTStd-Light, 'Open Sans', sans-serif;\n	font-size: " + (dpr(16)) + "px;\n	font-weight: 200;\n	color: " + grey2 + ";\n	width: " + (this.width - (this.options.pageMargin * 2)) + "px;\n	}\n\n.secOHSectionHeader {\n	text-transform: uppercase;\n	margin-bottom:" + (dpr(10)) + "px;\n	font-size: " + (dpr(16)) + "px;\n	line-height:1.1;\n	margin-top:" + this.options.pageMargin + "px;\n\n}\n\n.secOHLabel {\n	display:block;\n	float:left;\n	font-weight:600;\n}\n.secOHValue {\n	display:block;\n	margin-bottom:" + (dpr(8)) + "px;\n	float:right;\n	font-weight:300;\n}\n";
    Utils.insertCSS(css);
    today = moment();
    tomorrow = moment().add(1, 'day');
    todaysTimes = "";
    tomorrowsTimes = "";
    seperator = "<div class='spacer'></div>";
    ref = this.options.venue.openingHours.content;
    for (i = 0, len = ref.length; i < len; i++) {
      day = ref[i];
      if (moment(day.date).isSame(today, 'day')) {
        todaysTimes = "<div class='secOHLabel'>Heute:</div>";
        ref1 = day.times;
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          openingTime = ref1[j];
          if (today.isSameOrBefore(moment(openingTime.open, 'HH:mm'))) {
            todaysTimes = todaysTimes + ("<div class='secOHValue'>" + (moment(openingTime.open, 'HH:mm').format('HH:mm')) + " - " + (moment(openingTime.close, 'HH:mm').format('HH:mm')) + "</div><div style='clear:both;'></div>");
          }
        }
      }
      if (moment(day.date).isSame(tomorrow, 'day')) {
        tomorrowsTimes = "<div class='secOHLabel'>Morgen:</div>";
        ref2 = day.times;
        for (k = 0, len2 = ref2.length; k < len2; k++) {
          openingTime = ref2[k];
          tomorrowsTimes = tomorrowsTimes + ("<div class='secOHValue'>" + (moment(openingTime.open, 'HH:mm').format('HH:mm')) + " - " + (moment(openingTime.close, 'HH:mm').format('HH:mm')) + "</div><div style='clear:both;'></div>");
        }
      }
      if (this.options.hasStroke) {
        seperator = "<div class='spacer line'></div>";
      }
    }
    this.html = "<div class='secOH'> " + seperator + " <div class='secOHSectionHeader'>" + this.options.sectionLabel + "</div> " + todaysTimes + " <div style='height:" + (dpr(16)) + "px;'></div> " + tomorrowsTimes + " </div>";
    this.size = Utils.textSize(this.html);
  }

  SectionOpeningHours.define('hasStroke', {
    get: function() {
      return this.options.hasStroke;
    },
    set: function(value) {
      return this.options.hasStroke = value;
    }
  });

  SectionOpeningHours.define('venue', {
    get: function() {
      if (this.options.venue === "") {
        return print("Define a venue");
      } else {
        return this.options.venue;
      }
    },
    set: function(value) {
      return this.options.venue = value;
    }
  });

  SectionOpeningHours.define('pageMargin', {
    get: function() {
      return this.options.pageMargin;
    },
    set: function(value) {
      return this.options.pageMargin = value;
    }
  });

  SectionOpeningHours.define('sectionLabel', {
    get: function() {
      return this.options.sectionLabel;
    },
    set: function(value) {
      return this.options.sectionLabel = value;
    }
  });

  SectionOpeningHours.define('testDate', {
    get: function() {
      return this.options.testDate;
    },
    set: function(value) {
      return this.options.testDate = value;
    }
  });

  return SectionOpeningHours;

})(Layer);


},{"DevicePixelRatio":"DevicePixelRatio","data_venues":"data_venues","npm":"npm"}],"SectionOverallRatings":[function(require,module,exports){
var Ratings, dpr,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

dpr = require('DevicePixelRatio').dpr;

Ratings = require('Ratings').Ratings;

exports.SectionOverallRatings = (function(superClass) {
  extend(SectionOverallRatings, superClass);

  function SectionOverallRatings(options) {
    var base, base1, base2, base3, base4, css, grey2, numRatings, ratingStars, sectionHeader, seperator;
    this.options = options != null ? options : {};
    if ((base = this.options).pageMargin == null) {
      base.pageMargin = dpr(24);
    }
    if ((base1 = this.options).hasStroke == null) {
      base1.hasStroke = false;
    }
    if ((base2 = this.options).sectionLabel == null) {
      base2.sectionLabel = "No label defined";
    }
    if ((base3 = this.options).rating == null) {
      base3.rating = 0;
    }
    if ((base4 = this.options).ratingCount == null) {
      base4.ratingCount = 0;
    }
    SectionOverallRatings.__super__.constructor.call(this, this.options);
    this.backgroundColor = "white";
    this.name = "overallRating";
    grey2 = "#555555";
    css = ".contentContainerOverallRatings {\n\n	font-family: FrutigerLTStd-Light, 'Open Sans', sans-serif;\n	width: " + (this.width - (this.options.pageMargin * 2)) + "px;\n	margin-top:" + this.options.pageMargin + "px;\n	color: " + grey2 + ";\n	text-transform: uppercase;\n\n}\n\n.placeholderOverallRatings {\n	background-color:#FB8E7E;\n	background-image:url('modules/moduleImages/interface/img_underConstruction.png');\n	background-repeat:no-repeat;\n	background-position:center;\n	background-size:" + (dpr(40)) + "px " + (dpr(40)) + "px;\n}\n\n.totalRatings {\n	font-family: FrutigerLTStd-Light, 'Open Sans', sans-serif;\n	color: " + grey2 + ";\n	font-size:" + (dpr(14)) + "px;\n	line-height:" + (dpr(14)) + "px;\n}\n\n.spacer {\n	margin-top:" + this.options.pageMargin + "px;\n}\n\n.line {\n	border-top:" + (dpr(1)) + "px solid #e3e3e3;\n	margin-bottom:" + this.options.pageMargin + "px;\n}\n\n.secSSSectionHeader {\n	text-transform: uppercase;\n	margin-bottom:" + this.options.pageMargin + "px;\n	font-size: " + (dpr(16)) + "px;\n	line-height:1.1;\n	margin-top:" + this.options.pageMargin + "px;\n}";
    Utils.insertCSS(css);
    seperator = "<div class='spacer'></div>";
    if (this.options.hasStroke) {
      seperator = "<div class='spacer line'></div>";
    }
    sectionHeader = new Layer({
      name: "" + this.options.sectionLabel,
      parent: this,
      x: this.options.pageMargin,
      backgroundColor: "transparent",
      html: seperator + " <div class='contentContainerOverallRatings'> <div class='secSTSectionHeader'>" + this.options.sectionLabel + "</div> </div>"
    });
    sectionHeader.size = Utils.textSize(sectionHeader.html);
    ratingStars = new Ratings({
      numStars: 5,
      starWidth: dpr(10),
      starHeight: dpr(10),
      backgroundColor: "transparent",
      starRating: this.options.rating,
      parent: this,
      X: 0,
      x: this.options.pageMargin,
      y: sectionHeader.maxY + this.options.pageMargin
    });
    numRatings = new Layer({
      y: ratingStars.y,
      parent: this,
      backgroundColor: "transparent",
      html: "<div class='totalRatings'>(" + this.options.ratingCount + " Bewertungen)</div>"
    });
    numRatings.size = Utils.textSize(numRatings.html);
    numRatings.maxX = this.width - this.options.pageMargin;
    numRatings.midY = ratingStars.midY;
    this.height = ratingStars.maxY + this.options.pageMargin;
  }

  SectionOverallRatings.define('rating', {
    get: function() {
      return this.options.rating;
    },
    set: function(value) {
      return this.options.rating = value;
    }
  });

  SectionOverallRatings.define('ratingCount', {
    get: function() {
      return this.options.ratingCount;
    },
    set: function(value) {
      return this.options.ratingCount = value;
    }
  });

  SectionOverallRatings.define('pageMargin', {
    get: function() {
      return this.options.pageMargin;
    },
    set: function(value) {
      return this.options.pageMargin = value;
    }
  });

  SectionOverallRatings.define('sectionLabel', {
    get: function() {
      return this.options.sectionLabel;
    },
    set: function(value) {
      return this.options.sectionLabel = value;
    }
  });

  SectionOverallRatings.define('hasStroke', {
    get: function() {
      return this.options.hasStroke;
    },
    set: function(value) {
      return this.options.hasStroke = value;
    }
  });

  return SectionOverallRatings;

})(Layer);


},{"DevicePixelRatio":"DevicePixelRatio","Ratings":"Ratings"}],"SectionPopularTimes":[function(require,module,exports){
var dpr,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

dpr = require('DevicePixelRatio').dpr;

exports.SectionPopularTimes = (function(superClass) {
  extend(SectionPopularTimes, superClass);

  function SectionPopularTimes(options) {
    var base, base1, base2, css, grey2, seperator;
    this.options = options != null ? options : {};
    if ((base = this.options).pageMargin == null) {
      base.pageMargin = dpr(24);
    }
    if ((base1 = this.options).hasStroke == null) {
      base1.hasStroke = false;
    }
    if ((base2 = this.options).sectionLabel == null) {
      base2.sectionLabel = "No label defined";
    }
    SectionPopularTimes.__super__.constructor.call(this, this.options);
    this.backgroundColor = "transparent";
    this.name = "popular times";
    this.x = this.options.pageMargin;
    grey2 = "#555555";
    css = ".contentContainerPopTimes {\n\n	font-family: FrutigerLTStd-Light, 'Open Sans', sans-serif;\n	width: " + (this.width - (this.options.pageMargin * 2)) + "px;\n	height:" + (this.options.pageMargin * 5) + "px;\n	margin-top:" + this.options.pageMargin + "px;\n	color: " + grey2 + ";\n\n\n}\n\n.placeholderPopTimes {\n	background-color:#FB8E7E;\n	background-image:url('modules/moduleImages/interface/img_underConstruction.png');\n	background-repeat:no-repeat;\n	background-position:center;\n	background-size:" + (dpr(40)) + "px " + (dpr(40)) + "px;\n}\n\n.spacer {\n	margin-top:" + this.options.pageMargin + "px;\n}\n\n.line {\n	border-top:" + (dpr(1)) + "px solid #e3e3e3;\n	margin-bottom:" + this.options.pageMargin + "px;\n}\n\n.secSSSectionHeader {\n	text-transform: uppercase;\n	margin-bottom:" + this.options.pageMargin + "px;\n	font-size: " + (dpr(16)) + "px;\n	line-height:1.1;\n	margin-top:" + this.options.pageMargin + "px;\n}";
    Utils.insertCSS(css);
    seperator = "<div class='spacer'></div>";
    if (this.options.hasStroke) {
      seperator = "<div class='spacer line'></div>";
    }
    this.html = seperator + " <div class='contentContainerPopTimes placeholderPopTimes'> <div class='secSTSectionHeader'>" + this.options.sectionLabel + "</div> </div>";
    this.size = Utils.textSize(this.html);
  }

  SectionPopularTimes.define('pageMargin', {
    get: function() {
      return this.options.pageMargin;
    },
    set: function(value) {
      return this.options.pageMargin = value;
    }
  });

  SectionPopularTimes.define('sectionLabel', {
    get: function() {
      return this.options.sectionLabel;
    },
    set: function(value) {
      return this.options.sectionLabel = value;
    }
  });

  SectionPopularTimes.define('hasStroke', {
    get: function() {
      return this.options.hasStroke;
    },
    set: function(value) {
      return this.options.hasStroke = value;
    }
  });

  return SectionPopularTimes;

})(Layer);


},{"DevicePixelRatio":"DevicePixelRatio"}],"SectionRatings":[function(require,module,exports){
var dpr,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

dpr = require('DevicePixelRatio').dpr;

exports.SectionRatings = (function(superClass) {
  extend(SectionRatings, superClass);

  function SectionRatings(options) {
    var base, base1, base2, css, grey2, seperator;
    this.options = options != null ? options : {};
    if ((base = this.options).pageMargin == null) {
      base.pageMargin = dpr(24);
    }
    if ((base1 = this.options).hasStroke == null) {
      base1.hasStroke = false;
    }
    if ((base2 = this.options).sectionLabel == null) {
      base2.sectionLabel = "No label defined";
    }
    SectionRatings.__super__.constructor.call(this, this.options);
    this.backgroundColor = "transparent";
    this.name = "popular times";
    this.x = this.options.pageMargin;
    grey2 = "#555555";
    css = ".contentContainer {\n\n	font-family: FrutigerLTStd-Light, 'Open Sans', sans-serif;\n	width: " + (this.width - (this.options.pageMargin * 2)) + "px;\n	height:" + (this.options.pageMargin * 5) + "px;\n	margin-top:" + this.options.pageMargin + "px;\n	color: " + grey2 + ";\n\n\n}\n\n.placeholder {\n	background-color:#FB8E7E;\n	background-image:url('modules/moduleImages/interface/img_underConstruction.png');\n	background-repeat:no-repeat;\n	background-position:center;\n	background-size:" + (dpr(40)) + "px " + (dpr(40)) + "px;\n}\n\n.spacer {\n	margin-top:" + this.options.pageMargin + "px;\n}\n\n.line {\n	border-top:" + (dpr(1)) + "px solid #e3e3e3;\n	margin-bottom:" + this.options.pageMargin + "px;\n}\n\n.secSSSectionHeader {\n	text-transform: uppercase;\n	margin-bottom:" + this.options.pageMargin + "px;\n	font-size: " + (dpr(16)) + "px;\n	line-height:1.1;\n	margin-top:" + this.options.pageMargin + "px;\n}";
    Utils.insertCSS(css);
    seperator = "<div class='spacer'></div>";
    if (this.options.hasStroke) {
      seperator = "<div class='spacer line'></div>";
    }
    this.html = seperator + " <div class='contentContainer placeholder'> <div class='secSTSectionHeader'>" + this.options.sectionLabel + "</div> </div>";
    this.size = Utils.textSize(this.html);
  }

  SectionRatings.define('pageMargin', {
    get: function() {
      return this.options.pageMargin;
    },
    set: function(value) {
      return this.options.pageMargin = value;
    }
  });

  SectionRatings.define('sectionLabel', {
    get: function() {
      return this.options.sectionLabel;
    },
    set: function(value) {
      return this.options.sectionLabel = value;
    }
  });

  SectionRatings.define('hasStroke', {
    get: function() {
      return this.options.hasStroke;
    },
    set: function(value) {
      return this.options.hasStroke = value;
    }
  });

  return SectionRatings;

})(Layer);


},{"DevicePixelRatio":"DevicePixelRatio"}],"SectionSimpleText":[function(require,module,exports){
var dpr,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

dpr = require('DevicePixelRatio').dpr;

exports.SectionSimpleText = (function(superClass) {
  extend(SectionSimpleText, superClass);

  function SectionSimpleText(options) {
    var base, base1, base2, base3, css, grey2, seperator;
    this.options = options != null ? options : {};
    if ((base = this.options).sectionLabel == null) {
      base.sectionLabel = "Heading Here";
    }
    if ((base1 = this.options).sectionContent == null) {
      base1.sectionContent = "Content Herzhafte";
    }
    if ((base2 = this.options).pageMargin == null) {
      base2.pageMargin = dpr(24);
    }
    if ((base3 = this.options).hasStroke == null) {
      base3.hasStroke = false;
    }
    SectionSimpleText.__super__.constructor.call(this, this.options);
    this.backgroundColor = "white";
    this.name = "simpleTextSection";
    grey2 = "#555555";
    css = ".spacer {\n	margin-top:" + this.options.pageMargin + "px;\n\n}\n.line {\n	border-top:" + (dpr(1)) + "px solid #e3e3e3;\n	margin-bottom:" + this.options.pageMargin + "px;\n\n}\n.secST {\n	font-family: FrutigerLTStd-Light, 'Open Sans', sans-serif;\n	font-weight: 200;\n	color: " + grey2 + ";\n	width: " + (this.width - (this.options.pageMargin * 2)) + "px;\n	margin-bottom:" + this.options.pageMargin + "px;\n	}\n\n.secSTSectionHeader {\n	text-transform: uppercase;\n	margin-bottom:" + (dpr(10)) + "px;\n	font-size: " + (dpr(16)) + "px;\n	line-height:1.1;\n	margin-top:" + this.options.pageMargin + "px;\n\n}\n\n.secSTText {\n	margin-bottom:" + (dpr(4)) + "px;\n	font-size: " + (dpr(16)) + "px;\n}\n";
    Utils.insertCSS(css);
    seperator = "<div class='spacer'></div>";
    if (this.options.hasStroke) {
      seperator = "<div class='spacer line'></div>";
    }
    this.html = "<div class='secST'> " + seperator + " <div class='secSTSectionHeader'>" + this.options.sectionLabel + "</div> <div class='secSTText'>" + this.options.sectionContent + "</div> </div>";
    this.size = Utils.textSize(this.html);
  }

  SectionSimpleText.define('hasStroke', {
    get: function() {
      return this.options.hasStroke;
    },
    set: function(value) {
      return this.options.hasStroke = value;
    }
  });

  SectionSimpleText.define('pageMargin', {
    get: function() {
      return this.options.pageMargin;
    },
    set: function(value) {
      return this.options.pageMargin = value;
    }
  });

  SectionSimpleText.define('sectionLabel', {
    get: function() {
      return this.options.sectionLabel;
    },
    set: function(value) {
      return this.options.sectionLabel = value;
    }
  });

  SectionSimpleText.define('sectionContent', {
    get: function() {
      return this.options.sectionContent;
    },
    set: function(value) {
      return this.options.sectionContent = value;
    }
  });

  return SectionSimpleText;

})(Layer);


},{"DevicePixelRatio":"DevicePixelRatio"}],"SectionStaff":[function(require,module,exports){
var dpr,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

dpr = require('DevicePixelRatio').dpr;

exports.SectionStaff = (function(superClass) {
  extend(SectionStaff, superClass);

  function SectionStaff(options) {
    var base, base1, base2, base3, css, grey2, header, i, j, len, ref, seperator, staffInfo, staffMember, staffMemberRow, staffPic, startY;
    this.options = options != null ? options : {};
    if ((base = this.options).staffList == null) {
      base.staffList = "";
    }
    if ((base1 = this.options).hasStroke == null) {
      base1.hasStroke = false;
    }
    if ((base2 = this.options).sectionLabel == null) {
      base2.sectionLabel = "sectionLabel";
    }
    if ((base3 = this.options).pageMargin == null) {
      base3.pageMargin = dpr(24);
    }
    SectionStaff.__super__.constructor.call(this, this.options);
    this.backgroundColor = "white";
    grey2 = "#555555";
    css = "\n.container {\n	font-family: FrutigerLTStd-Light, 'Open Sans', sans-serif;\n	# width: " + (this.width - (this.options.pageMargin * 2)) + "px;\n}\n.secSSSectionHeader {\n	text-transform: uppercase;\n	margin-bottom:" + this.options.pageMargin + "px;\n	color:" + grey2 + ";\n	font-size: " + (dpr(16)) + "px;\n	line-height:1.1;\n	margin-top:" + this.options.pageMargin + "px;\n\n}\n.spacer {\n	margin-top:" + this.options.pageMargin + "px;\n\n}\n.line {\n	border-top:" + (dpr(1)) + "px solid #e3e3e3;\n	margin-bottom:" + this.options.pageMargin + "px;\n\n}\n\n.staffName {\n	font-weight:600;\n	font-size: " + (dpr(16)) + "px;\n	line-height:1.5;\n}\n\n.staffTitle {\n	font-weight:200;\n	font-size: " + (dpr(14)) + "px;\n}\n\n.staffInfoContainer {\n	color:" + grey2 + ";\n\n	margin-top:" + (dpr(4)) + "px;\n\n}";
    Utils.insertCSS(css);
    seperator = "<div class='spacer'></div>";
    if (this.options.hasStroke) {
      seperator = "<div class='spacer line'></div>";
    }
    header = new Layer({
      name: "headerLayer",
      backgroundColor: "white",
      parent: this,
      x: this.options.pageMargin,
      width: this.width - (this.options.pageMargin * 2),
      html: "<div class='container'> " + seperator + " <div class='secSSSectionHeader'>" + this.options.sectionLabel + "</div> </div>"
    });
    header.height = Utils.textSize(header.html).height;
    startY = header.maxY;
    ref = this.options.staffList;
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      staffMember = ref[i];
      staffMemberRow = new Layer({
        name: "Staff Member Row " + i,
        width: this.width,
        parent: this,
        backgroundColor: "transparent"
      });
      staffPic = new Layer({
        name: "staffPic",
        width: dpr(48),
        height: dpr(48),
        backgroundColor: "yellow",
        parent: staffMemberRow,
        x: this.options.pageMargin,
        borderRadius: dpr(48),
        borderWidth: dpr(2),
        borderColor: "##3399cc",
        image: staffMember.staffImage
      });
      staffInfo = new Layer({
        name: "Staff Info",
        width: this.width - (staffPic.width + this.options.pageMargin / 2),
        backgroundColor: "transparent",
        html: "<div class='staffInfoContainer'> <div class='staffName'>" + staffMember.name + "</div> <div class='staffTitle'>" + staffMember.title + "</div> </div>",
        y: staffPic.y,
        x: staffPic.maxX + this.options.pageMargin / 2,
        parent: staffMemberRow
      });
      staffInfo.size = Utils.textSize(staffInfo.html);
      staffMemberRow.height = staffPic.height + this.options.pageMargin / 2;
      staffMemberRow.y = startY + ((staffPic.height + this.options.pageMargin / 2) * i);
      this.height = staffMemberRow.maxY + this.options.pageMargin;
    }
  }

  SectionStaff.define('hasStroke', {
    get: function() {
      return this.options.hasStroke;
    },
    set: function(value) {
      return this.options.hasStroke = value;
    }
  });

  SectionStaff.define('staffList', {
    get: function() {
      if (this.options.staffList === "") {
        return print("Define a staff list");
      } else {
        return this.options.staffList;
      }
    },
    set: function(value) {
      return this.options.staffList = value;
    }
  });

  SectionStaff.define('pageMargin', {
    get: function() {
      return this.options.pageMargin;
    },
    set: function(value) {
      return this.options.pageMargin = value;
    }
  });

  SectionStaff.define('sectionLabel', {
    get: function() {
      return this.options.sectionLabel;
    },
    set: function(value) {
      return this.options.sectionLabel = value;
    }
  });

  return SectionStaff;

})(Layer);


},{"DevicePixelRatio":"DevicePixelRatio"}],"Section_DestinationArticle":[function(require,module,exports){
var dpr,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

dpr = require('DevicePixelRatio').dpr;

exports.SlotDestinationArticle = (function(superClass) {
  extend(SlotDestinationArticle, superClass);

  Events.closeClicked = "Menu.closeClicked";

  function SlotDestinationArticle(options) {
    var base, base1, base2, css;
    this.options = options != null ? options : {};
    if ((base = this.options).list == null) {
      base.list = "";
    }
    if ((base1 = this.options).pageMargin == null) {
      base1.pageMargin = dpr(24);
    }
    if ((base2 = this.options).testDate == null) {
      base2.testDate = moment("05/03/2017 8:30");
    }
    SlotDestinationArticle.__super__.constructor.call(this, this.options);
    this.backgroundColor = "#FB8E7E";
    this.style = {
      "background-image": "url('modules/moduleImages/interface/img_underConstruction.png')",
      "background-repeat": "no-repeat",
      "background-position": "center",
      "background-size": (dpr(90)) + "px " + (dpr(90)) + "px"
    };
    css = "\n\n\n\n\n";
    Utils.insertCSS(css);
  }

  SlotDestinationArticle.define('location', {
    get: function() {
      if (this.options.location === "") {
        return console.error("No location for destination article defined");
      } else {
        return this.options.list;
      }
    },
    set: function(value) {
      return this.options.list = value;
    }
  });

  SlotDestinationArticle.define('pageMargin', {
    get: function() {
      return this.options.pageMargin;
    },
    set: function(value) {
      return this.options.pageMargin = value;
    }
  });

  SlotDestinationArticle.define('testDate', {
    get: function() {
      return this.options.testDate;
    },
    set: function(value) {
      return this.options.testDate = value;
    }
  });

  return SlotDestinationArticle;

})(Layer);


},{"DevicePixelRatio":"DevicePixelRatio"}],"Template_BurgerMenu":[function(require,module,exports){
var BlueButton, IconButton, dpr, moment, npm,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

dpr = require('DevicePixelRatio').dpr;

npm = require('npm');

moment = npm.moment;

BlueButton = require('BlueButton').BlueButton;

IconButton = require('IconButton').IconButton;

exports.Menu = (function(superClass) {
  extend(Menu, superClass);

  Events.closeClicked = "Menu.closeClicked";

  function Menu(options) {
    var base, base1, base2, closeButton, css;
    this.options = options != null ? options : {};
    if ((base = this.options).list == null) {
      base.list = "";
    }
    if ((base1 = this.options).pageMargin == null) {
      base1.pageMargin = dpr(24);
    }
    if ((base2 = this.options).testDate == null) {
      base2.testDate = moment("05/03/2017 8:30");
    }
    Menu.__super__.constructor.call(this, this.options);
    this.backgroundColor = "#FB8E7E";
    this.html = "<div style= 'margin-top:" + ((this.height / 2) + dpr(80)) + "px; margin-bottom:auto; width:" + this.width + "px; text-align:center; line-height:1.2; font-size:" + (dpr(16)) + "px; '>Burger Menu Not Yet Available in Prototype</div>";
    this.style = {
      "background-image": "url('modules/moduleImages/interface/img_underConstruction.png')",
      "background-repeat": "no-repeat",
      "background-position": "center",
      "background-size": (dpr(90)) + "px " + (dpr(90)) + "px"
    };
    closeButton = new IconButton({
      icon: "close",
      name: "close",
      x: 0,
      y: 0,
      parent: this
    });
    closeButton.onClick((function(_this) {
      return function() {
        return _this.emit(Events.closeClicked, _this);
      };
    })(this));
    css = "\n\n\n\n\n";
    Utils.insertCSS(css);
  }

  Menu.define('location', {
    get: function() {
      if (this.options.location === "") {
        return console.error("No location for destination article defined");
      } else {
        return this.options.list;
      }
    },
    set: function(value) {
      return this.options.list = value;
    }
  });

  Menu.define('pageMargin', {
    get: function() {
      return this.options.pageMargin;
    },
    set: function(value) {
      return this.options.pageMargin = value;
    }
  });

  Menu.define('testDate', {
    get: function() {
      return this.options.testDate;
    },
    set: function(value) {
      return this.options.testDate = value;
    }
  });

  return Menu;

})(Layer);


},{"BlueButton":"BlueButton","DevicePixelRatio":"DevicePixelRatio","IconButton":"IconButton","npm":"npm"}],"Template_EventDetail":[function(require,module,exports){
var BlueButton, EventCoverTile, IconButton, SectionMainArticle, dpr, moment, npm,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

dpr = require('DevicePixelRatio').dpr;

npm = require('npm');

moment = npm.moment;

EventCoverTile = require('EventCoverTile').EventCoverTile;

SectionMainArticle = require('SectionMainArticle').SectionMainArticle;

BlueButton = require('BlueButton').BlueButton;

IconButton = require('IconButton').IconButton;

exports.Event = (function(superClass) {
  extend(Event, superClass);

  Events.closeClicked = "Event.closeClicked";

  function Event(options) {
    var base, base1, base2, base3, closeButton, css;
    this.options = options != null ? options : {};
    if ((base = this.options).event == null) {
      base.event = "";
    }
    if ((base1 = this.options).pageMargin == null) {
      base1.pageMargin = dpr(24);
    }
    if ((base2 = this.options).bookable == null) {
      base2.bookable = true;
    }
    if ((base3 = this.options).testDate == null) {
      base3.testDate = moment("05/03/2017 8:30");
    }
    Event.__super__.constructor.call(this, this.options);
    this.backgroundColor = "#FB8E7E";
    this.html = "<div style= 'margin-top:" + ((this.height / 2) + dpr(80)) + "px; margin-bottom:auto; width:" + this.width + "px; text-align:center; line-height:1.2; '>Event Detail Not Yet Available in Prototype</div>";
    this.style = {
      "background-image": "url('modules/moduleImages/interface/img_underConstruction.png')",
      "background-repeat": "no-repeat",
      "background-position": "center",
      "background-size": (dpr(90)) + "px " + (dpr(90)) + "px"
    };
    closeButton = new IconButton({
      icon: "back",
      name: "backButton",
      x: 0,
      y: 0,
      parent: this
    });
    closeButton.onClick((function(_this) {
      return function() {
        return _this.emit(Events.closeClicked, _this);
      };
    })(this));
    css = "\n\n\n\n\n";
    Utils.insertCSS(css);
  }

  Event.define('event', {
    get: function() {
      if (this.options.event === "") {
        return console.error("No Event Defined");
      } else {
        return this.options.event;
      }
    },
    set: function(value) {
      return this.options.event = value;
    }
  });

  Event.define('pageMargin', {
    get: function() {
      return this.options.pageMargin;
    },
    set: function(value) {
      return this.options.pageMargin = value;
    }
  });

  Event.define('bookable', {
    get: function() {
      return this.options.bookable;
    },
    set: function(value) {
      return this.options.bookable = value;
    }
  });

  Event.define('testDate', {
    get: function() {
      return this.options.testDate;
    },
    set: function(value) {
      return this.options.testDate = value;
    }
  });

  return Event;

})(Layer);


},{"BlueButton":"BlueButton","DevicePixelRatio":"DevicePixelRatio","EventCoverTile":"EventCoverTile","IconButton":"IconButton","SectionMainArticle":"SectionMainArticle","npm":"npm"}],"Template_ExcursionDetail":[function(require,module,exports){
var BlueButton, ExcursionCoverTile, IconButton, SectionMainArticle, dpr, moment, npm,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

dpr = require('DevicePixelRatio').dpr;

npm = require('npm');

moment = npm.moment;

ExcursionCoverTile = require('ExcursionCoverTile').ExcursionCoverTile;

SectionMainArticle = require('SectionMainArticle').SectionMainArticle;

BlueButton = require('BlueButton').BlueButton;

IconButton = require('IconButton').IconButton;

exports.Excursion = (function(superClass) {
  extend(Excursion, superClass);

  Events.closeClicked = "Excursion.closeClicked";

  function Excursion(options) {
    var base, base1, base2, base3, closeButton, css;
    this.options = options != null ? options : {};
    if ((base = this.options).excursion == null) {
      base.excursion = "";
    }
    if ((base1 = this.options).pageMargin == null) {
      base1.pageMargin = dpr(24);
    }
    if ((base2 = this.options).bookable == null) {
      base2.bookable = true;
    }
    if ((base3 = this.options).testDate == null) {
      base3.testDate = moment("05/03/2017 8:30");
    }
    Excursion.__super__.constructor.call(this, this.options);
    this.backgroundColor = "#FB8E7E";
    this.html = "<div style= 'margin-top:" + ((this.height / 2) + dpr(80)) + "px; margin-bottom:auto; width:" + this.width + "px; text-align:center; line-height:1.2; '>Excursion Detail Not Yet Available in Prototype</div>";
    this.style = {
      "background-image": "url('modules/moduleImages/interface/img_underConstruction.png')",
      "background-repeat": "no-repeat",
      "background-position": "center",
      "background-size": (dpr(90)) + "px " + (dpr(90)) + "px"
    };
    closeButton = new IconButton({
      icon: "back",
      name: "backButton",
      x: 0,
      y: 0,
      parent: this
    });
    closeButton.onClick((function(_this) {
      return function() {
        return _this.emit(Events.closeClicked, _this);
      };
    })(this));
    css = "\n\n\n\n\n";
    Utils.insertCSS(css);
  }

  Excursion.define('excursion', {
    get: function() {
      if (this.options.excursion === "") {
        return console.error("No Excursion Defined");
      } else {
        return this.options.excursion;
      }
    },
    set: function(value) {
      return this.options.excursion = value;
    }
  });

  Excursion.define('pageMargin', {
    get: function() {
      return this.options.pageMargin;
    },
    set: function(value) {
      return this.options.pageMargin = value;
    }
  });

  Excursion.define('bookable', {
    get: function() {
      return this.options.bookable;
    },
    set: function(value) {
      return this.options.bookable = value;
    }
  });

  Excursion.define('testDate', {
    get: function() {
      return this.options.testDate;
    },
    set: function(value) {
      return this.options.testDate = value;
    }
  });

  return Excursion;

})(Layer);


},{"BlueButton":"BlueButton","DevicePixelRatio":"DevicePixelRatio","ExcursionCoverTile":"ExcursionCoverTile","IconButton":"IconButton","SectionMainArticle":"SectionMainArticle","npm":"npm"}],"Template_MyDay":[function(require,module,exports){
var IconButton, ItinCard, dpr, moment, myDaySegements, npm,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

dpr = require('DevicePixelRatio').dpr;

npm = require('npm');

moment = npm.moment;

myDaySegements = require('data_myDaySegments').myDaySegements;

ItinCard = require('ItineraryDataCard').ItinCard;

IconButton = require('IconButton').IconButton;

exports.myDay = (function(superClass) {
  extend(myDay, superClass);

  Events.menuClicked = "myDay.menuClicked";

  Events.weatherClicked = "myDay.weatherClicked";

  function myDay(options) {
    var backgroundFrame, base, base1, base2, base3, burgerButton, cardPage, cardPages, cardScroller, cardText, cardTextPanels, css, frameXOffset, frameYOffset, gradientMask, i, image, imageLayers, imageMask, imageMasks, indicatorTime, infoPanel, infoPanels, item, j, k, len, len1, model, page, ref, ref1, ref2, ref3, weatherForecast;
    this.options = options != null ? options : {};
    if ((base = this.options).testDate == null) {
      base.testDate = moment("04/29/2017 00:00:00");
    }
    if ((base1 = this.options).sailing == null) {
      base1.sailing = "";
    }
    if ((base2 = this.options).scaleFactor == null) {
      base2.scaleFactor = 1.25;
    }
    if ((base3 = this.options).viewPadding == null) {
      base3.viewPadding = dpr(24);
    }
    myDay.__super__.constructor.call(this, this.options);
    moment.locale('de');
    moment.locale('de', {
      calendar: {
        lastDay: '[gestern] [um] LT',
        sameDay: '[heute] [um] LT',
        nextDay: '[morgen] [um] LT',
        lastWeek: '[Letzter] dddd [um] LT',
        nextWeek: 'dddd [um] LT',
        sameElse: 'dddd, LL [um] LT'
      }
    });
    moment.updateLocale('de', {
      longDateFormat: {
        LT: 'H:mm [Uhr]',
        LTS: 'H:mm:ss [Uhr]'
      }
    });
    model = new myDaySegements({
      sailing: this.options.sailing,
      testDate: this.options.testDate
    });
    css = ".infoPanelBlock {\n	font-family:font-family: FrutigerLTStd-Bold, 'Open Sans', sans-serif;\n	width:" + (this.width - this.options.viewPadding * 2) + "px;\n	padding:" + (this.options.viewPadding / 2) + "px;\n	margin-top:" + (dpr(8)) + "px;\n	margin-left:" + (this.options.viewPadding / 2) + "px;\n\n	}\n\n.infoPanelText {\n	font-size:" + (dpr(14)) + "px;\n	color:#3399cc;\n	font-weight:600;\n	line-height:1;\n	margin-bottom:" + (dpr(5)) + "px;\n	text-transform: uppercase;\n	background-image:url('modules/moduleImages/interface/icn_chev_down.svg');\n	background-repeat:no-repeat;\n	background-position:center right;\n	background-size:5%;\n\n}\n.arrownDown {\n	margin-top: " + (dpr(35)) + "px;\n	width:" + (dpr(12)) + "px;\n	height:" + (dpr(7)) + "px;\n	background-image:url('modules/moduleImages/interface/icn_chev_down.svg');\n	background-repeat:no-repeat;\n	background-position:center;\n	background-size:100%;\n}\n\n\n}";
    Utils.insertCSS(css);
    backgroundFrame = new Layer({
      name: "imageBackgroundFrame",
      width: Screen.width * this.options.scaleFactor,
      height: Screen.height * this.options.scaleFactor,
      clip: false,
      parent: this
    });
    frameXOffset = (backgroundFrame.width - Screen.width) / 2;
    frameYOffset = (backgroundFrame.height - Screen.height) / 2;
    backgroundFrame.x = -frameXOffset;
    backgroundFrame.y = -frameYOffset;
    imageLayers = [];
    imageMasks = [];
    cardPages = [];
    infoPanels = [];
    cardTextPanels = [];
    gradientMask = new Layer({
      name: "imageGradientMask",
      width: Screen.width,
      height: Screen.height,
      maxY: Screen.height,
      parent: this
    });
    gradientMask.style.background = "linear-gradient(to bottom, rgba(0,0,0,0) 0%, rgba(0,0,0,0.45) 70%, rgba(0,0,0,.7) 100%)";
    cardScroller = new PageComponent({
      name: "itineraryCardScroller",
      backgroundColor: "transparent",
      width: Screen.width,
      height: Screen.height,
      scrollVertical: false,
      directionLock: true,
      parent: this
    });
    cardScroller.animationOptions = {
      curve: "spring(200,22,0)"
    };
    ref = model.itineraryList;
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      item = ref[i];
      image = new Layer({
        name: "image_" + item.segment.location.name,
        width: backgroundFrame.width,
        height: backgroundFrame.height,
        x: backgroundFrame.width * i,
        image: item.segmentImage,
        parent: backgroundFrame
      });
      image.ID = i;
      imageMask = new Layer({
        name: item.segment.location.name + "_mask",
        width: image.width,
        height: image.height,
        backgroundColor: Utils.randomColor(),
        parent: image,
        opacity: 0
      });
      image.style.backgroundPosition = "center center";
      cardText = new ItinCard({
        sailing: this.options.sailing,
        size: Screen.size,
        x: Screen.width * i,
        pageType: item.pageType,
        segment: item.segment,
        parent: cardScroller.content,
        backgroundColor: "transparent"
      });
      cardText.y = Align.bottom(-dpr(48));
      cardText.ID = i;
      cardPage = new ScrollComponent({
        name: "card" + i,
        width: Screen.width,
        height: Screen.height,
        x: Screen.width * i,
        scrollHorizontal: false,
        parent: cardScroller.content,
        directionLock: true
      });
      cardPage.ID = i;
      infoPanel = new Layer({
        backgroundColor: "white",
        borderRadius: dpr(8),
        width: Screen.width,
        height: Screen.height * 2,
        name: "infoPanel_" + i,
        parent: cardPage.content,
        shadowY: dpr(-2),
        shadowBlur: dpr(3),
        shadowColor: "rgba(0,0,0,0.3)",
        shadowSpread: dpr(1)
      });
      indicatorTime = "";
      if (moment().isBetween(moment(item.segment.segmentStart), moment(item.segment.segmentEnd))) {
        if (ref1 = moment().hour(), indexOf.call([7, 8, 9, 10, 11], ref1) >= 0) {
          indicatorTime = "Heute Morgen";
        }
        if (ref2 = moment().hour(), indexOf.call([18, 19, 20, 21, 22, 23], ref2) >= 0) {
          indicatorTime = "Heute Abend";
        }
        if (ref3 = moment().hour(), indexOf.call([12, 13, 14, 15, 16, 17], ref3) >= 0) {
          indicatorTime = "Heute Abend";
        }
      } else {
        indicatorTime = moment(item.segment.segmentStart).calendar().split(" um")[0];
      }
      infoPanel.html = "<div class='infoPanelBlock'> <div class='infoPanelText'>" + indicatorTime + " im Ãberblick</div><div class='arrowdown'></div> </div>";
      infoPanel.y = Screen.height - dpr(50);
      infoPanel.ID = i;
      imageLayers.push(image);
      imageMasks.push(imageMask);
      cardTextPanels.push(cardText);
      cardPages.push(cardPage);
    }
    console.log(imageLayers);
    console.log(imageMasks);
    console.log(cardTextPanels);
    console.log(cardPages);
    burgerButton = new IconButton({
      icon: "burger",
      name: "burgerButton",
      x: this.options.viewPadding,
      y: 0,
      parent: this
    });
    burgerButton.onClick((function(_this) {
      return function() {
        return _this.emit(Events.menuClicked, _this);
      };
    })(this));
    weatherForecast = new IconButton({
      icon: "weather",
      name: "weatherButton",
      y: 0,
      parent: this
    });
    weatherForecast.x = Align.right(-this.options.viewPadding);
    weatherForecast.onClick((function(_this) {
      return function() {
        return _this.emit(Events.weatherClicked, _this);
      };
    })(this));
    cardScroller.on("change:currentPage", (function(_this) {
      return function() {
        var k, len1, page, results;
        results = [];
        for (k = 0, len1 = cardPages.length; k < len1; k++) {
          page = cardPages[k];
          results.push(page.scrollToPoint({
            x: 0,
            y: 0
          }, true, {
            curve: Bezier.ease,
            time: 0.2
          }));
        }
        return results;
      };
    })(this));
    for (i = k = 0, len1 = cardPages.length; k < len1; i = ++k) {
      page = cardPages[i];
      page.on(Events.Move, (function(_this) {
        return function(event, layer) {
          var fadeOut, l, len2, len3, m, origY, panel, results;
          if (layer.y <= 0) {
            fadeOut = Utils.modulate(layer.y, [dpr(-350), dpr(-450)], [1, 0]);
            burgerButton.opacity = fadeOut;
            weatherForecast.opacity = fadeOut;
            for (i = l = 0, len2 = cardTextPanels.length; l < len2; i = ++l) {
              panel = cardTextPanels[i];
              if (panel.ID === layer.parent.ID) {
                panel.opacity = Utils.modulate(layer.y, [dpr(10), dpr(-50)], [1, 0]);
              }
            }
            results = [];
            for (i = m = 0, len3 = imageLayers.length; m < len3; i = ++m) {
              image = imageLayers[i];
              if (image.ID === layer.parent.ID) {
                origY = dpr(image.y);
                results.push(image.y = Utils.modulate(layer.y, [0, dpr(-500)], [0, dpr(-50)]));
              } else {
                results.push(void 0);
              }
            }
            return results;
          }
        };
      })(this));
    }
    cardScroller.on(Events.Move, (function(_this) {
      return function() {
        var lastImage, maxScrollFrameX, maxScrollX;
        backgroundFrame.x = -((cardScroller.scrollX * _this.options.scaleFactor) + frameXOffset);
        lastImage = imageLayers[imageLayers.length - 1];
        maxScrollX = (cardPages.length - 1) * Screen.width;
        maxScrollFrameX = -(backgroundFrame.width * (cardPages.length - 1) + frameXOffset);
        if (cardScroller.scrollX <= 0) {
          backgroundFrame.x = -frameXOffset;
          imageLayers[0].originX = 0;
          imageLayers[0].scale = Utils.modulate(cardScroller.scrollX, [0, dpr(-50)], [1, 1.1]);
        }
        if (cardScroller.scrollX >= maxScrollX) {
          lastImage.originX = 1;
          backgroundFrame.x = maxScrollFrameX;
          return lastImage.scale = Utils.modulate(cardScroller.scrollX, [maxScrollX, maxScrollX + dpr(350)], [1, 1.3]);
        }
      };
    })(this));
  }

  myDay.define('viewPadding', {
    get: function() {
      return this.options.viewPadding;
    },
    set: function(value) {
      return this.options.viewPadding = value;
    }
  });

  myDay.define('testDate', {
    get: function() {
      return this.options.testDate;
    },
    set: function(value) {
      return this.options.testDate = value;
    }
  });

  myDay.define('scaleFactor', {
    get: function() {
      return this.options.scaleFactor;
    },
    set: function(value) {
      return this.options.scaleFactor = value;
    }
  });

  myDay.define('sailing', {
    get: function() {
      if (this.options.sailing === "") {
        return console.log("a sailing was not defined for myDay");
      } else {
        return this.options.sailing;
      }
    },
    set: function(value) {
      return this.options.sailing = value;
    }
  });

  return myDay;

})(Layer);


},{"DevicePixelRatio":"DevicePixelRatio","IconButton":"IconButton","ItineraryDataCard":"ItineraryDataCard","data_myDaySegments":"data_myDaySegments","npm":"npm"}],"Template_VenueDetail":[function(require,module,exports){
var BlueButton, IconButton, SectionLocation, SectionMainArticle, SectionOpeningHours, SectionOverallRatings, SectionPopularTimes, SectionSimpleText, SectionStaff, VenueCoverTile, dpr, moment, npm,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

dpr = require('DevicePixelRatio').dpr;

npm = require('npm');

moment = npm.moment;

VenueCoverTile = require('VenueCoverTile').VenueCoverTile;

SectionMainArticle = require('SectionMainArticle').SectionMainArticle;

SectionOpeningHours = require('SectionOpeningHours').SectionOpeningHours;

SectionSimpleText = require('SectionSimpleText').SectionSimpleText;

SectionStaff = require('SectionStaff').SectionStaff;

SectionLocation = require('SectionLocation').SectionLocation;

SectionPopularTimes = require('SectionPopularTimes').SectionPopularTimes;

SectionOverallRatings = require('SectionOverallRatings').SectionOverallRatings;

BlueButton = require('BlueButton').BlueButton;

IconButton = require('IconButton').IconButton;

exports.Venue = (function(superClass) {
  extend(Venue, superClass);

  Events.purchaseClicked = "Venue.purchaseClicked";

  Events.menuClicked = "Venue.menuClicked";

  Events.closeClicked = "Venue.closeClicked";

  function Venue(options) {
    var base, base1, base2, base3, bookableMargin, closeButton, contentContainer, coverImage, css, detailScroll, exclusive, inclusive, itemDescription, location, menuButton, openingHours, overallRatings, popTimes, purchaseButton, staff;
    this.options = options != null ? options : {};
    if ((base = this.options).venue == null) {
      base.venue = "";
    }
    if ((base1 = this.options).pageMargin == null) {
      base1.pageMargin = dpr(24);
    }
    if ((base2 = this.options).bookable == null) {
      base2.bookable = true;
    }
    if ((base3 = this.options).testDate == null) {
      base3.testDate = moment("05/03/2017 8:30");
    }
    Venue.__super__.constructor.call(this, this.options);
    this.backgroundColor = "white";
    coverImage = new VenueCoverTile({
      name: "CoverTile",
      size: this.size,
      parent: this
    });
    detailScroll = new ScrollComponent({
      name: "venueScrollView",
      size: this.size,
      scrollHorizontal: false,
      parent: this
    });
    bookableMargin = this.options.pageMargin;
    contentContainer = new Layer({
      name: "detailContentContainer",
      width: this.width,
      height: this.height,
      backgroundColor: "white",
      y: this.height,
      parent: detailScroll.content
    });
    if (this.options.bookable) {
      purchaseButton = new BlueButton({
        buttonText: "Jetzt Buchen",
        parent: this,
        name: "purchaseButton",
        pageMargin: 0,
        width: this.width,
        outlineStyle: false,
        shadowY: dpr(-1),
        shadowSpread: dpr(1),
        shadowBlur: dpr(2)
      });
      purchaseButton.y = Align.bottom();
      bookableMargin = bookableMargin + purchaseButton.height;
      purchaseButton.on(Events.Click, (function(_this) {
        return function() {
          return _this.emit(Events.purchaseClicked, _this);
        };
      })(this));
    } else {
      contentContainer.shadowY = dpr(-1);
      contentContainer.shadowSpread = dpr(1);
      contentContainer.shadowBlur = dpr(2);
    }
    itemDescription = new SectionMainArticle({
      name: "itemDescription",
      parent: contentContainer,
      width: Screen.width,
      articleTitle: this.options.venue.tagline,
      articleContent: this.options.venue.description
    });
    menuButton = new BlueButton({
      buttonText: "Speisekarte",
      width: Screen.width,
      name: "menuButton",
      y: itemDescription.maxY + this.options.pageMargin,
      pageMargin: this.pageMargin,
      outlineStyle: true,
      parent: contentContainer
    });
    menuButton.on(Events.Click, (function(_this) {
      return function() {
        return _this.emit(Events.menuClicked, _this);
      };
    })(this));
    openingHours = new SectionOpeningHours({
      parent: contentContainer,
      name: "OpeningHours",
      testDate: this.options.testDate,
      width: this.width,
      x: this.pageMargin,
      sectionLabel: "Ãffnungszeiten",
      venue: this.options.venue,
      hasStroke: true,
      y: menuButton.maxY
    });
    inclusive = new SectionSimpleText({
      sectionLabel: this.options.venue.includedInPrice.title,
      sectionContent: this.options.venue.includedInPrice.content,
      name: "WhatsIncluded",
      hasStroke: true,
      parent: contentContainer,
      width: this.width,
      x: this.pageMargin,
      y: openingHours.maxY
    });
    exclusive = new SectionSimpleText({
      sectionLabel: this.options.venue.excludedInPrice.title,
      sectionContent: this.options.venue.excludedInPrice.content,
      name: "WhatsNotIncuded",
      hasStroke: true,
      parent: contentContainer,
      width: this.width,
      x: this.pageMargin,
      y: inclusive.maxY
    });
    if (this.options.venue.staff) {
      staff = new SectionStaff({
        staffList: this.options.venue.staff.content,
        width: this.width,
        name: "StaffList",
        sectionLabel: "Ihre Crew im " + this.options.venue.name,
        hasStroke: true,
        parent: contentContainer,
        y: exclusive.maxY
      });
    }
    location = new SectionLocation({
      width: Screen.width,
      parent: contentContainer,
      y: staff.maxY
    });
    popTimes = new SectionPopularTimes({
      width: Screen.width,
      parent: contentContainer,
      y: location.maxY,
      hasStroke: true,
      sectionLabel: "Beliebte Besuchszeiten"
    });
    overallRatings = new SectionOverallRatings({
      width: Screen.width,
      parent: contentContainer,
      y: popTimes.maxY,
      hasStroke: true,
      sectionLabel: "Kundenbewertung",
      rating: this.options.venue.rating,
      ratingCount: this.options.venue.numRatings
    });
    contentContainer.height = contentContainer.subLayers[contentContainer.subLayers.length - 1].maxY + bookableMargin;
    detailScroll.updateContent();
    closeButton = new IconButton({
      icon: "back",
      name: "backButton",
      x: 0,
      y: 0,
      parent: this
    });
    closeButton.onClick((function(_this) {
      return function() {
        return _this.emit(Events.closeClicked, _this);
      };
    })(this));
    detailScroll.onMove(function() {
      coverImage.y = Utils.modulate(detailScroll.scrollY, [0, 600], [0, -100]);
      coverImage.scale = Utils.modulate(detailScroll.scrollY, [-1, -1200], [1, 1.3], true);
      closeButton.opacity = Utils.modulate(detailScroll.scrollY, [800, 1200], [1, 0]);
      closeButton.y = Utils.modulate(detailScroll.scrollY, [1200, 1800], [0, -40], true);
      if (detailScroll.scrollY < 0) {
        return coverImage.y = 0;
      }
    });
    css = "\n\n\n\n\n";
    Utils.insertCSS(css);
  }

  Venue.define('venue', {
    get: function() {
      if (this.options.venue === "") {
        return console.log("No venue defined for venue template");
      } else {
        return this.options.venue;
      }
    },
    set: function(value) {
      return this.options.venue = value;
    }
  });

  Venue.define('pageMargin', {
    get: function() {
      return this.options.pageMargin;
    },
    set: function(value) {
      return this.options.pageMargin = value;
    }
  });

  Venue.define('bookable', {
    get: function() {
      return this.options.bookable;
    },
    set: function(value) {
      return this.options.bookable = value;
    }
  });

  Venue.define('testDate', {
    get: function() {
      return this.options.testDate;
    },
    set: function(value) {
      return this.options.testDate = value;
    }
  });

  return Venue;

})(Layer);


},{"BlueButton":"BlueButton","DevicePixelRatio":"DevicePixelRatio","IconButton":"IconButton","SectionLocation":"SectionLocation","SectionMainArticle":"SectionMainArticle","SectionOpeningHours":"SectionOpeningHours","SectionOverallRatings":"SectionOverallRatings","SectionPopularTimes":"SectionPopularTimes","SectionSimpleText":"SectionSimpleText","SectionStaff":"SectionStaff","VenueCoverTile":"VenueCoverTile","npm":"npm"}],"Template_destinationArticle":[function(require,module,exports){
var BlueButton, IconButton, dpr, moment, npm,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

dpr = require('DevicePixelRatio').dpr;

npm = require('npm');

moment = npm.moment;

BlueButton = require('BlueButton').BlueButton;

IconButton = require('IconButton').IconButton;

exports.DestArticle = (function(superClass) {
  extend(DestArticle, superClass);

  Events.closeClicked = "DestArticle.closeClicked";

  function DestArticle(options) {
    var base, base1, base2, closeButton, css;
    this.options = options != null ? options : {};
    if ((base = this.options).list == null) {
      base.list = "";
    }
    if ((base1 = this.options).pageMargin == null) {
      base1.pageMargin = dpr(24);
    }
    if ((base2 = this.options).testDate == null) {
      base2.testDate = moment("05/03/2017 8:30");
    }
    DestArticle.__super__.constructor.call(this, this.options);
    this.backgroundColor = "#FB8E7E";
    this.html = "<div style= 'margin-top:" + ((this.height / 2) + dpr(80)) + "px; margin-bottom:auto; width:" + this.width + "px; text-align:center; line-height:1.2; '>Image List Not Yet Available in Prototype</div>";
    this.style = {
      "background-image": "url('modules/moduleImages/interface/img_underConstruction.png')",
      "background-repeat": "no-repeat",
      "background-position": "center",
      "background-size": (dpr(90)) + "px " + (dpr(90)) + "px"
    };
    closeButton = new IconButton({
      icon: "close",
      name: "close",
      x: 0,
      y: 0,
      parent: this
    });
    closeButton.onClick((function(_this) {
      return function() {
        return _this.emit(Events.closeClicked, _this);
      };
    })(this));
    css = "\n\n\n\n\n";
    Utils.insertCSS(css);
  }

  DestArticle.define('location', {
    get: function() {
      if (this.options.location === "") {
        return console.error("No location for destination article defined");
      } else {
        return this.options.list;
      }
    },
    set: function(value) {
      return this.options.list = value;
    }
  });

  DestArticle.define('pageMargin', {
    get: function() {
      return this.options.pageMargin;
    },
    set: function(value) {
      return this.options.pageMargin = value;
    }
  });

  DestArticle.define('testDate', {
    get: function() {
      return this.options.testDate;
    },
    set: function(value) {
      return this.options.testDate = value;
    }
  });

  return DestArticle;

})(Layer);


},{"BlueButton":"BlueButton","DevicePixelRatio":"DevicePixelRatio","IconButton":"IconButton","npm":"npm"}],"Template_imageList":[function(require,module,exports){
var IconButton, dpr, moment, npm,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

dpr = require('DevicePixelRatio').dpr;

npm = require('npm');

moment = npm.moment;

IconButton = require('IconButton').IconButton;

exports.ImageList = (function(superClass) {
  extend(ImageList, superClass);

  Events.closeClicked = "ImageList.closeClicked";

  function ImageList(options) {
    var base, base1, base2, base3, base4, base5, card, cardMaster, cards, closeButton, compactHeight, featureHeight, firstHeight, i, item, j, lastHeight, lastY, len, newY, numItems, page, pages, ref, scrollDist;
    this.options = options != null ? options : {};
    if ((base = this.options).list == null) {
      base.list = "";
    }
    if ((base1 = this.options).pageMargin == null) {
      base1.pageMargin = dpr(24);
    }
    if ((base2 = this.options).testDate == null) {
      base2.testDate = moment("05/03/2017 8:30");
    }
    if ((base3 = this.options).compactHeight == null) {
      base3.compactHeight = dpr(100);
    }
    if ((base4 = this.options).featureHeight == null) {
      base4.featureHeight = dpr(300);
    }
    if ((base5 = this.options).scrollDist == null) {
      base5.scrollDist = dpr(180);
    }
    ImageList.__super__.constructor.call(this, this.options);
    console.log(this.options.list);
    this.backgroundColor = "#FB8E7E";
    this.html = "<div style= 'margin-top:" + ((this.height / 2) + dpr(80)) + "px; margin-bottom:auto; width:" + this.width + "px; text-align:center; line-height:1.2; '>Image List Not Yet Available in Prototype</div>";
    this.style = {
      "background-image": "url('modules/moduleImages/interface/img_underConstruction.png')",
      "background-repeat": "no-repeat",
      "background-position": "center",
      "background-size": (dpr(90)) + "px " + (dpr(90)) + "px"
    };
    closeButton = new IconButton({
      icon: "close",
      name: "close",
      x: 0,
      y: 0,
      parent: this
    });
    closeButton.onClick((function(_this) {
      return function() {
        return _this.emit(Events.closeClicked, _this);
      };
    })(this));
    closeButton.bringToFront();
    numItems = this.options.list.length;
    featureHeight = this.options.featureHeight;
    compactHeight = this.options.compactHeight;
    scrollDist = this.options.scrollDist;
    cards = [];
    cardMaster = new Layer({
      width: Screen.width,
      height: compactHeight,
      name: "cardContainer",
      backgroundColor: "pink",
      parent: this
    });
    pages = new PageComponent({
      scrollHorizontal: false,
      name: "pagesContainer",
      width: Screen.width,
      backgroundColor: "transparent",
      height: scrollDist,
      clip: false,
      parent: this
    });
    newY = 0;
    ref = this.options.list;
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      item = ref[i];
      if (i === 0) {
        firstHeight = featureHeight;
      } else {
        firstHeight = compactHeight;
      }
      card = new Layer({
        width: Screen.width,
        height: firstHeight,
        image: item.image,
        name: item.name,
        html: "" + item.name,
        parent: cardMaster,
        originY: 0,
        y: newY
      });
      card.startingY = newY;
      cards.push(card);
      card.sendToBack();
      newY = newY + firstHeight;
      page = new Layer({
        height: scrollDist,
        width: Screen.width,
        backgroundColor: "transparent"
      });
      pages.addPage(page, "bottom");
      lastY = 0;
      lastHeight = compactHeight;
      pages.onMove((function(_this) {
        return function() {
          var amountToGrow, compactToFeature, currentCellIndex, indexBased, indexPercent, k, len1, newHeight, offestFromTop, originalY, results, topFeatureIndex;
          currentCellIndex = pages.scrollY / scrollDist;
          topFeatureIndex = Math.max(Math.floor(currentCellIndex), 0);
          indexPercent = (currentCellIndex % 1).toFixed(2);
          compactToFeature = Utils.modulate(indexPercent, [0, 1], [compactHeight, featureHeight], true);
          amountToGrow = Math.max((featureHeight - compactHeight) * indexPercent, 0);
          newHeight = compactHeight + amountToGrow;
          results = [];
          for (i = k = 0, len1 = cards.length; k < len1; i = ++k) {
            card = cards[i];
            if (i === topFeatureIndex) {
              card.height = Utils.modulate(indexPercent, [0, 1], [featureHeight, compactHeight], true);
              card.y = Utils.modulate(indexPercent, [0, 1], [0, -compactHeight]);
              lastY = -compactHeight;
              lastHeight = compactHeight;
            }
            if (i === (topFeatureIndex + 1) && i < numItems) {
              card.height = Utils.modulate(indexPercent, [0, 1], [compactHeight, featureHeight], true);
              results.push(card.y = Utils.modulate(indexPercent, [0, 1], [featureHeight, 0], true));
            } else {
              originalY = card.startingY;
              offestFromTop = card.startingY - pages.scrollY;
              indexBased = (topFeatureIndex * compactHeight) + featureHeight;
              print("originalY: " + card.startingY);
              print("pages scrollY:  " + pages.scrollY);
              print("offsetFromTop: " + offestFromTop);
              results.push(print("indexBased: " + indexBased));
            }
          }
          return results;
        };
      })(this));
    }
  }

  ImageList.define('list', {
    get: function() {
      if (this.options.list === "") {
        return console.error("No list defined for image templat");
      } else {
        return this.options.list;
      }
    },
    set: function(value) {
      return this.options.list = value;
    }
  });

  ImageList.define('pageMargin', {
    get: function() {
      return this.options.pageMargin;
    },
    set: function(value) {
      return this.options.pageMargin = value;
    }
  });

  ImageList.define('testDate', {
    get: function() {
      return this.options.testDate;
    },
    set: function(value) {
      return this.options.testDate = value;
    }
  });

  ImageList.define('compactHeight', {
    get: function() {
      return this.options.compactHeight;
    },
    set: function(value) {
      return this.options.compactHeight = value;
    }
  });

  ImageList.define('featureHeight', {
    get: function() {
      return this.options.featureHeight;
    },
    set: function(value) {
      return this.options.featureHeight = value;
    }
  });

  ImageList.define('scrollDist', {
    get: function() {
      return this.options.scrollDist;
    },
    set: function(value) {
      return this.options.scrollDist = value;
    }
  });

  return ImageList;

})(Layer);


},{"DevicePixelRatio":"DevicePixelRatio","IconButton":"IconButton","npm":"npm"}],"Template_topicPage":[function(require,module,exports){
var IconButton, dpr,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

dpr = require('DevicePixelRatio').dpr;

IconButton = require('IconButton').IconButton;

exports.TopicPage = (function(superClass) {
  extend(TopicPage, superClass);

  Events.closeClicked = "TopicPage.closeClicked";

  function TopicPage(options) {
    var base, closeButton;
    this.options = options != null ? options : {};
    if ((base = this.options).topic == null) {
      base.topic = "";
    }
    TopicPage.__super__.constructor.call(this, this.options);
    this.backgroundColor = "#FB8E7E";
    this.html = "<div style= 'margin-top:" + ((this.height / 2) + dpr(80)) + "px; margin-bottom:auto; width:" + this.width + "px; text-align:center; line-height:1.2; '>Topic Page Not Yet Available in Prototype</div>";
    this.style = {
      "background-image": "url('modules/moduleImages/interface/img_underConstruction.png')",
      "background-repeat": "no-repeat",
      "background-position": "center",
      "background-size": (dpr(90)) + "px " + (dpr(90)) + "px"
    };
    closeButton = new IconButton({
      icon: "back",
      name: "backButton",
      x: 0,
      y: 0,
      parent: this
    });
    closeButton.onClick((function(_this) {
      return function() {
        return _this.emit(Events.closeClicked, _this);
      };
    })(this));
  }

  TopicPage.define('pageMargin', {
    get: function() {
      return this.options.pageMargin;
    },
    set: function(value) {
      return this.options.pageMargin = value;
    }
  });

  TopicPage.define('topic', {
    get: function() {
      if (this.options.topic === "") {
        return console.error("Topic not defined");
      } else {
        return this.options.topic;
      }
    },
    set: function(value) {
      return this.options.topic = value;
    }
  });

  return TopicPage;

})(Layer);


},{"DevicePixelRatio":"DevicePixelRatio","IconButton":"IconButton"}],"VenueCoverTile":[function(require,module,exports){
var dpr,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

dpr = require('DevicePixelRatio').dpr;

exports.VenueCoverTile = (function(superClass) {
  extend(VenueCoverTile, superClass);

  function VenueCoverTile(options) {
    var css;
    this.options = options != null ? options : {};
    VenueCoverTile.__super__.constructor.call(this, this.options);
    this.backgroundColor = "#FB8E7E";
    this.style = {
      "background-image": "url('modules/moduleImages/interface/img_underConstruction.png')",
      "background-repeat": "no-repeat",
      "background-position": "center",
      "background-size": (dpr(90)) + "px " + (dpr(90)) + "px"
    };
    css = "\n";
    Utils.insertCSS(css);
  }

  return VenueCoverTile;

})(Layer);


},{"DevicePixelRatio":"DevicePixelRatio"}],"data_burger":[function(require,module,exports){
exports.burgerData = {
  profil: {
    title: "Mein Profil / Einstellungen"
  },
  eatdrinknightlife: {
    title: "Essen, Trinken, Nightlife"
  },
  events: {
    title: "Veranstaltungen",
    bubles: "2"
  },
  excursions: "AusflÃ¼ge",
  shopping: {
    title: "Shopping"
  },
  schedule: {
    title: "Meine Termine"
  },
  chat: {
    title: "Chat",
    bubbles: "3"
  },
  avatar: {
    initials: "AR",
    image: "modules/moduleImages/avatar/person.jpg"
  }
};


},{}],"data_catalog":[function(require,module,exports){
var categories, subcategories;

subcategories = {
  restaurants: "Restaurants",
  nightlife: "Nightlife",
  entertainment: "Entertainment Venues",
  facilitiesKids: "Facilities for Kids",
  familyEvents: "Events for Families",
  familyExcursions: "Family Excursions",
  familyProducts: "Family Products",
  familyShops: "Family Shopping",
  wssFacilities: "Wellness, Sport & Spa Facilities",
  wssEvents: "Wellness, Sport & Spa Events",
  wssExcursions: "Active Excursions",
  wssProducts: "Wellness, Sport & Spa Products",
  wssShops: "Wellness Sport and Spa Shops",
  eventsFamiles: "Family Events",
  eventsEntertainment: "Entertainment",
  eventsClasses: "Classes",
  eventsSpecial: "Exclusive Events",
  eventsInsider: "Insider Events"
};

categories = {
  eat: {
    name: "Eat, Drink & Nightlife",
    subcategories: [subcategories.restaurants, subcategories.nightlife, subcategories.entertainment]
  },
  family: {
    name: "Kids and Family",
    subcategories: [subcategories.facilitiesKids, subcategories.familyEvents, subcategories.familyExcursions, subcategories.familyProducts, subcategories.familyShops]
  },
  wss: {
    name: "Wellness, Sport & Spa",
    subcategories: [subcategories.wssFacilities, subcategories.wssEvents, subcategories.wssExcursions, subcategories.wssProducts]
  },
  wss: {
    name: "Wellness, Sport & Spa",
    subcategories: [subcategories.wssFacilities, subcategories.wssEvents, subcategories.wssExcursions, subcategories.wssProducts, subcategories.wssShops]
  }
};

module.exports = {
  categories: categories,
  catalog: [
    {
      itemName: "Rossini",
      type: "Restaurant",
      categories: [categories.eat, categories.family]
    }, {
      itemName: "Buffalo Steakhouse",
      type: "Restaurant",
      categories: [categories.eat]
    }, {
      itemName: "Club 123",
      type: "Bar",
      categories: [categories.eat]
    }
  ]
};


},{}],"data_categories":[function(require,module,exports){
exports.categories = {
  eat: "Eat, Drink & Nightlife",
  family: "Kids and Family"
};


},{}],"data_events":[function(require,module,exports){
exports.events = {
  title: "Marktausflug",
  startTime: "9:00",
  endTime: "",
  location: "Treffpunkt: Gourmetrestaurant Rossini, Deck 8",
  categories: ["Entdecken", "Geniesen", "Familie"],
  images: "./images/events/matktausflug.jpg"
};

({
  title: "Eiskaffee und Eisschokolade mit Vanilleeis",
  startTime: "10:00",
  endTime: "11:00",
  location: "Lanai Bar, Deck 7",
  categories: "Geniesen",
  images: "./images/events/eiskaffee.jpg"
});

({
  title: "Shuffleboard",
  startTime: "10:00",
  endTime: "11:00",
  location: "AuÃendeck, Deck 15",
  categories: "Sport & Spiel",
  images: "./images/events/shuffleboard.jpg"
});

({
  title: "Einsteiger Tanzkurs: Cha-Cha-Cha mit Tanzlehrer Matthias",
  startTime: "11:00",
  endTime: "12:00",
  location: "Treffpunkt: Gourmetrestaurant Rossini, Deck 8",
  categories: "Sport & Spiel",
  images: "./images/events/tanzkurs.jpg"
});

({
  title: "Dart mit Michael",
  startTime: "11:15",
  endTime: "12:15",
  location: "Treffpunkt: Four Elements Rezeption, Deck 14",
  categories: ["Sport & Spiel", "Familie"],
  images: "./images/events/dart.jpg"
});

({
  title: "Familienzeit im Organic Spa",
  startTime: "12:30",
  endTime: "17:30",
  location: "Body & Soul Organic Spa, Deck 8",
  categories: ["Entdecken", "Familie"],
  images: "./images/events/spa.jpg"
});

({
  title: "AIDA Reisequiz",
  startTime: "16:00",
  endTime: "16:45",
  location: "Theatrium, Deck 6-8",
  categories: ["Entdecken", "Familie"],
  images: "./images/events/spa.jpg"
});

({
  title: "Smoothies",
  startTime: "16:00",
  endTime: "16:45",
  location: "Bar 5. Element, Deck 14",
  categories: ["Entdecken", "Familie"],
  images: "./images/events/spa.jpg"
});

({
  title: "Kids-Kino: Mein Freund, der Delfin 2",
  startTime: "16:00",
  endTime: "17:30",
  location: "Four Elements, Deck 14",
  categories: ["Unterhaltung", "Familie"],
  images: "./images/events/kino.jpg"
});

({
  title: "Boccia",
  startTime: "17:00",
  endTime: "18:00",
  location: "Treffpunkt: AIDA Plaza, Deck 6",
  categories: ["Sport & Spiel"],
  images: "./images/events/boccia.jpg"
});

({
  title: "Workshop: Make-up",
  startTime: "17:00",
  endTime: "18:30",
  location: "Body & Soul Organic Spa, Deck 8",
  categories: ["Geniesen", "Sport & Spiel"],
  images: "./images/events/makeup.jpg"
});

({
  title: "Selfie Walkaround",
  startTime: "20:00",
  endTime: "",
  location: "Four Elements, Deck 14",
  categories: ["Entdecken", "Familie"],
  images: "./images/events/selfie.jpg"
});

({
  title: "Fotoshooting: Lupo-Portraits",
  startTime: "20:15",
  endTime: "22:00",
  location: "BlÃ¼tenmeer, Deck 7",
  categories: "Entdecken",
  images: "./images/events/selfie.jpg"
});

({
  title: "Rock-Show: Addicted To Love",
  startTime: "20:30",
  endTime: "21:15",
  location: "Theatrium, Deck 6-8",
  categories: ["Unterhaltung", "Familie"],
  images: "./images/events/rockshow.jpg"
});

({
  title: "Kneipenabend",
  startTime: "21:00",
  endTime: "",
  location: "Treffpunkt: Bar 5. Element, Deck 14",
  categories: ["Entdecken", "Unterhaltung"],
  images: "./images/events/kneipentour.jpg"
});


},{}],"data_excursionsByLocation":[function(require,module,exports){
var excursions;

excursions = require('data_excursions').excursions;

exports.excursionsByLocation = {
  DEHAM: [excursions.A1001, excursions.A1002, excursions.A1003]
};


},{"data_excursions":"data_excursions"}],"data_excursionsNew":[function(require,module,exports){
exports.excursionsNew = {
  "excursions": [
    {
      name: "Englands Hauptstadt: Southampton",
      tagline: "Panoramafahrt entlang der wichtigsten SehenswÃ¼rdigkeiten!",
      port: "ports.GBSOU.name",
      duration: 2,
      duration_measurement: "hrs",
      cost_adult: "1,99",
      cost_child: "0,00",
      cost_currency: "Euros"
    }, {
      name: "Frankreichs Hauptstadt: LeHavre!",
      tagline: "Besuchen Sie eine der beliebtesten Attraktionen der Stadt!",
      port: "ports.FRLEH.name",
      duration: 2,
      duration_measurement: "hrs",
      cost_adult: "1,99",
      cost_child: "0,00",
      cost_currency: "Euros"
    }, {
      name: "Hamburgs Hauptstadt: Hamburg!",
      tagline: "Lernen Sie die Hauptstadt per Bus & Boot kennen!",
      port: "portsDEHAM.name",
      duration: 2,
      duration_measurement: "hrs",
      cost_adult: "1,99",
      cost_child: "0,00",
      cost_currency: "Euros"
    }
  ]
};


},{}],"data_excursions":[function(require,module,exports){
var locations, tags;

locations = require('data_locations').locations;

tags = require('data_tags').tags;

exports.excursions = {
  PAKPR1: {
    name: "Paket 1 - Individuell entdecken",
    type: "packet",
    tagline: "Erobern Sie die Metropolen mit einem Preisvorteil",
    locations: [locations.GBSOU, locations.FRLEH, locations.NLRTM],
    images: [],
    tags: [tags.culture, tags.family],
    duration: 9,
    costs: [
      {
        label: "Erwachsener",
        price: 169.00
      }, {
        label: "Children",
        price: 89.00
      }
    ],
    difficulty: 1,
    startTime: {
      11: 45
    },
    includedItems: [],
    minimumAge: 2,
    description: "Schlendern Sie entlang der romantischen Grachten von Amsterdam, seien Sie Gast in der Stadt, die einst das zu Hause von Van Gogh war. Lauschen Sie dem Glockenschlag von Big Ben und beobachten Sie die tÃ¤gliche Zeremonie der WachablÃ¶sung am Buckingham Palace. Lassen Sie sich bei dem unvergesslichen Blick Ã¼ber Paris vom Eiffelturm aus frischen Wind um die Nase wehen oder werden Sie wÃ¤hrend eines Besuchs im Louvre zum Kunstliebhaber - sofern Sie es nicht schon sind.  Diese und viele weitere historische und kulturelle SehenswÃ¼rdigkeiten kÃ¶nnen Sie frei nach ihren WÃ¼nschen entdecken. Wir bringen Sie zu diesen eindrucksvollen Orten und Ã¼berlassen Ihnen die Wahl, welche persÃ¶nlichen Highlights von Ihnen erobert werden sollen. Eigens dafÃ¼r haben wir fÃ¼r Sie ein Paket erstellt, dass nur noch darauf wartet reserviert zu werden, damit Sie in den Genuss dieses einmaligen Angebots kommen kÃ¶nnen.",
    includedExcursions: ["Amsterdam auf eigene Faust", "London auf eigene Faust", "Paris auf eigene Faust"],
    ticketInfo: "Ihre Ausflugstickets mit den genauen Startzeiten und Treffpunkten liegen am Anreisetag in Ihrer Kabine fÃ¼r Sie bereit. Wir bemÃ¼hen uns in allen Fahrtgebieten um deutschsprachige Reiseleiter, die jedoch in manchen LÃ¤ndern gar nicht bzw. nicht ausreichend zur VerfÃ¼gung stehen. In diesem Fall werden die AusflÃ¼ge von englischsprachigen Reiseleitern gefÃ¼hrt.",
    addlInfo: "Fotostopps und Dauer der Freizeit verkehrsabhÃ¤ngig, Zustieg des Reiseleiters auf dem Weg nach London, RÃ¼ckfahrt ohne Reiseleiter Bitte beachten Sie, dass die Teilnahme bis zum 16. Geburtstag ausschlieÃlich in Begleitung eines Erwachsenen mÃ¶glich ist, der von einem Erziehungsberechtigten benannt werden muss. Bis zum 18. Geburtstag benÃ¶tigen Jugendliche eine ausflugsbezogene, schriftliche Erlaubnis eines Erziehungsberechtigten.",
    conditions: "Die AusflÃ¼ge fÃ¼r dieses Paket sind festgelegt und kÃ¶nnen nicht getauscht werden. An Bord ist das Paket nach dem Buchungsschluss des Hafens Southampton nicht mehr stornierbar."
  },
  PAKPR3: {
    name: "Paket 3 - Endlos entdecken",
    type: "packet",
    tagline: "Seien Sie wÃ¤hlerisch - Nutzen Sie einen Preisvorteil bis zu 101,80 â¬ p.P.",
    locations: [locations.GBSOU, locations.FRLEH, locations.NLRTM],
    images: [],
    tags: [tags.culture, tags.family],
    duration: 9,
    costAdults: 333.00,
    costChildren: 249.00,
    difficulty: 1,
    startTime: 1145,
    includedItems: [],
    minimumAge: 2,
    description: "Wo die Reise Sie hinfÃ¼hrt, liegt bei diesem Paket ganz allein in Ihrem Ermessen. Ihrem Entdeckerdrang sind keine Grenzen gesetzt. In Southampton bietet sich ein Trip in die englische Hauptstadt London an. Mit SOU05 erleben Sie die HauptsehenswÃ¼rdigkeiten und kÃ¶nnen freie Zeit zum Bummeln nutzen. Sollten Sie sich Ihre Zeit in London lieber selbst gestalten wollen, empfehlen wir Ihnen die Tour SOU07. Ein unvergessliches Highlight ist SOU08. Bei dem Sie London mit einer Bootstour auf der Themse und bei einer Stadtrundfahrt kennenlernen kÃ¶nnen. In Le Havre angekommen, lohnt sich ein Besuch von Honfleur. Schlendern Sie mit uns auf der Tour LEH03 durch die gemÃ¼tlichen Gassen der alten Seefahrerstadt, bevor es weiter geht zum Seebad Deauville. Mit LEH08 bringen wir Sie nach Honfleur und sie kÃ¶nnen Ihre Zeit fÃ¼r individuelle Erkundungen nutzen. Ein Highlight ist Frankreichs Hauptstadt Paris. Mit der Tour LEH11 kÃ¶nnen Sie bei einer Panoramafahrt Pariser Highlights sehen und die Kathedrale Notre-Dame de Paris besichtigen. In ZeebrÃ¼gge bieten wir Ihnen bei dem Ausflug ZEE01 eine Bootsfahrt auf den romantischen Grachten sowie einen Spaziergang durch die mittelalterliche Stadt an. ZEE03 ist fÃ¼r individuelle Erkundungen der Hansestadt geeignet. In Europas Hauptstadt BrÃ¼ssel entdecken Sie mit der Tour ZEE06 SehenswÃ¼rdigkeiten wie Manneken PIS, den KÃ¶niglichen Palast oder den Japanischen Turm. Das alte und neue Rotterdam kÃ¶nnen Sie mit einer Panoramafahrt RTM06 erkunden. Sollten Sie den Wunsch haben einen Trip nach Amsterdam zu unternehmen, bietet sich fÃ¼r Sie auf dem Ausflug RTM01 die MÃ¶glichkeit per Bus und Boot die Stadt zu erleben und dort Freizeit zu verbringen. FÃ¼r Selbstentdecker ist die Tour RTM03 empfehlenswert, um Amsterdam ausgiebig allein zu erobern. Neben den aufgefÃ¼hrten Touren, haben wir weitere AusflÃ¼ge im Programm. Schauen Sie einfach in unser MyAIDA-Reiseportal und entscheiden Sie sich fÃ¼r die schÃ¶nsten und exklusivsten Touren aus unserem Ausflugsprogramm. Somit machen Sie jeden Tag zum Highlight und Ihren Urlaub zu einem unvergesslichen Erlebnis. Sehr gern kÃ¶nnen Sie uns Ihre Auswahl bereits vorab mitteilen. Ihre Ausflugstickets mit den genauen Startzeiten und Treffpunkten liegen dann am Anreisetag in Ihrer Kabine fÃ¼r Sie bereit. ",
    includedExcursions: ["Kombinieren Sie Ihre AusflÃ¼ge frei nach Ihren WÃ¼nschen", "Bis 4 AusflÃ¼ge aussuchen", "Privat-Touren, Bike/Pedelec, Segway und Golf sind ausgenommen"],
    ticketInfo: "Wir bemÃ¼hen uns in allen Fahrtgebieten um deutschsprachige Reiseleiter, die jedoch in manchen LÃ¤ndern gar nicht bzw. nicht ausreichend zur VerfÃ¼gung stehen. In diesem Fall werden die AusflÃ¼ge von englischsprachigen Reiseleitern gefÃ¼hrt. Bitte beachten Sie, dass die Teilnahme bis zum 16. Geburtstag ausschlieÃlich in Begleitung eines Erwachsenen mÃ¶glich ist, der von einem Erziehungsberechtigten benannt werden muss. Bis zum 18. Geburtstag benÃ¶tigen Jugendliche eine ausflugsbezogene, schriftliche Erlaubnis eines Erziehungsberechtigten.",
    addlInfo: "",
    conditions: "An Bord ist das Paket nach dem Buchungsschluss des Hafens Southampton nicht mehr stornierbar."
  },
  SOU05: {
    name: "Englands Hauptstadt: London",
    type: "excursion",
    tagline: "Panoramafahrt entlang der wichtigsten SehenswÃ¼rdigkeiten!",
    locations: [locations.GBSOU],
    images: [],
    tags: [tags.culture, tags.family],
    duration: 9,
    costAdults: 71.96,
    costChildren: 50.36,
    difficulty: 2,
    startTime: 1115,
    includedItems: [],
    minimumAge: 2,
    description: "Der Ausflug beginnt mit einer 120-minÃ¼tigen Landschaftsfahrt nach London. AnschlieÃend folgt eine 2 h Orientierungsfahrt per Bus, vorbei an bekannten SehenswÃ¼rdigkeiten wie dem ParlamentsgebÃ¤ude, dem Buckingham-Palast und der Westminster Abbey. Im Anschluss stehen ca. 1,5 h Freizeit zum Mittagessen, Bummeln und Einkaufen zur VerfÃ¼gung. Danach erfolgt die RÃ¼ckfahrt zum Schiff.",
    stations: [
      {
        startTime: 1115,
        endTime: "--",
        description: "Alle treffen sich am Sammelpunkt"
      }, {
        startTime: 1130,
        endTime: 1330,
        description: "Busfahrt in die Metropole London"
      }, {
        startTime: 1330,
        endTime: 1530,
        description: "Orientierungsfahrt entlang der wichtigsten SehenswÃ¼rdigkeiten wie ParlamentsgebÃ¤ude, Buckingham-Palast und Westminster Abbey"
      }, {
        startTime: 1530,
        endTime: 1700,
        description: "Freizeit zum Mattagessen"
      }, {
        startTime: 1700,
        endTime: 1900,
        description: "RÃ¼ckfahrt zum Schiff"
      }
    ],
    ticketInfo: "Ihre Ausflugstickets mit den genauen Startzeiten und Treffpunkten liegen am Anreisetag in Ihrer Kabine fÃ¼r Sie bereit. Wir bemÃ¼hen uns in allen Fahrtgebieten um deutschsprachige Reiseleiter, die jedoch in manchen LÃ¤ndern gar nicht bzw. nicht ausreichend zur VerfÃ¼gung stehen. In diesem Fall werden die AusflÃ¼ge von englischsprachigen Reiseleitern gefÃ¼hrt.",
    addlInfo: "Fotostopps und Dauer der Freizeit verkehrsabhÃ¤ngig, Zustieg des Reiseleiters auf dem Weg nach London, RÃ¼ckfahrt ohne Reiseleiter Bitte beachten Sie, dass die Teilnahme bis zum 16. Geburtstag ausschlieÃlich in Begleitung eines Erwachsenen mÃ¶glich ist, der von einem Erziehungsberechtigten benannt werden muss. Bis zum 18. Geburtstag benÃ¶tigen Jugendliche eine ausflugsbezogene, schriftliche Erlaubnis eines Erziehungsberechtigten."
  },
  SOU06: {
    name: "KÃ¶nigliche Hauptstadt & Tower of London",
    type: "excursion",
    tagline: "Besuchen Sie eine der beliebtesten Attraktionen der Stadt!",
    locations: [locations.GBSOU],
    images: [],
    tags: [tags.culture, tags.family],
    duration: 10,
    costAdults: 98.95,
    costChildren: 69.25,
    difficulty: 2,
    startTime: 1000,
    includedItems: [],
    minimumAge: 2,
    description: "Der Ausflug beginnt mit einer 120-minÃ¼tigen Landschaftsfahrt nach London. AnschlieÃend folgt eine 2 h Orientierungsfahrt per Bus, vorbei an bekannten SehenswÃ¼rdigkeiten wie dem ParlamentsgebÃ¤ude, dem Buckingham-Palast und der Westminster Abbey. Im Anschluss stehen ca. 1,5 h Freizeit zum Mittagessen, Bummeln und Einkaufen zur VerfÃ¼gung. Danach erfolgt die RÃ¼ckfahrt zum Schiff.",
    stations: [
      {
        startTime: 1000,
        endTime: "--",
        description: "Alle treffen sich am Sammelpunkt"
      }, {
        startTime: 1000,
        endTime: 1130,
        description: "Busfahrt in die Metropole London"
      }, {
        startTime: 1130,
        endTime: 1300,
        description: "Orientierungsfahrt entlang der wichtigsten SehenswÃ¼rdigkeiten wie ParlamentsgebÃ¤ude, Buckingham-Palast und Westminster Abbey"
      }, {
        startTime: 1300,
        endTime: 1500,
        description: "Freizeit zum Mattagessen oder EinkÃ¤ufe"
      }, {
        startTime: 1500,
        endTime: 1600,
        description: "GefÃ¼hrte Tour durch den Tower of London"
      }, {
        startTime: 1700,
        endTime: 1900,
        description: "RÃ¼ckfahrt zum Schiff"
      }
    ],
    ticketInfo: "Ihre Ausflugstickets mit den genauen Startzeiten und Treffpunkten liegen am Anreisetag in Ihrer Kabine fÃ¼r Sie bereit. Wir bemÃ¼hen uns in allen Fahrtgebieten um deutschsprachige Reiseleiter, die jedoch in manchen LÃ¤ndern gar nicht bzw. nicht ausreichend zur VerfÃ¼gung stehen. In diesem Fall werden die AusflÃ¼ge von englischsprachigen Reiseleitern gefÃ¼hrt.",
    addlInfo: "Fotostopps und Dauer der Freizeit verkehrsabhÃ¤ngig, Zustieg des Reiseleiters auf dem Weg nach London, RÃ¼ckfahrt ohne Reiseleiter Bitte beachten Sie, dass die Teilnahme bis zum 16. Geburtstag ausschlieÃlich in Begleitung eines Erwachsenen mÃ¶glich ist, der von einem Erziehungsberechtigten benannt werden muss. Bis zum 18. Geburtstag benÃ¶tigen Jugendliche eine ausflugsbezogene, schriftliche Erlaubnis eines Erziehungsberechtigten."
  },
  SOU01: {
    name: "Salisbury & MysteriÃ¶ses Stonehenge",
    type: "excursion",
    tagline: "Besuchen Sie eine der beliebtesten Attraktionen der Stadt!",
    locations: [locations.GBSOU],
    images: [],
    tags: [tags.culture, tags.family],
    duration: 7,
    costAdults: 75.19,
    costChildren: 49.45,
    difficulty: 2,
    startTime: 1000,
    includedItems: [],
    minimumAge: 2,
    description: "Ziel der ca. 90-minÃ¼tigen Busfahrt ist das mysteriÃ¶se Stonehenge. Bei den Megalith Monuments sind ca. 1,5 h Aufenthalt geplant. Nach diesem Highlight beginnt die ca. 30- minÃ¼tige Weiterfahrt durch die lÃ¤ndliche Umgebung vorbei an englischen LandhÃ¤usern nach Salisbury. Dort sind fast 2 Stunden Zeit zur individuellen Besichtigung der mittelalterlich geprÃ¤gten Stadt geplant. AnschlieÃend erfolgt die RÃ¼ckfahrt zum Schiff.",
    stations: [
      {
        startTime: 1000,
        endTime: "--",
        description: "Alle treffen sich am Sammelpunkt"
      }, {
        startTime: 1000,
        endTime: "--",
        description: "Busfahrt nach Stonehenge"
      }, {
        startTime: 1130,
        endTime: "--",
        description: "Besuch des berÃ¼hmten Megalith Monuments"
      }, {
        startTime: 1300,
        endTime: "--",
        description: "Weiterfahrt nach Salisbury"
      }, {
        startTime: 1330,
        endTime: "--",
        description: "Freizeit zur individuellen Besichtigung"
      }, {
        startTime: 1600,
        endTime: "--",
        description: "RÃ¼ckfahrt zum Schiff"
      }
    ],
    ticketInfo: "Ihre Ausflugstickets mit den genauen Startzeiten und Treffpunkten liegen am Anreisetag in Ihrer Kabine fÃ¼r Sie bereit. Wir bemÃ¼hen uns in allen Fahrtgebieten um deutschsprachige Reiseleiter, die jedoch in manchen LÃ¤ndern gar nicht bzw. nicht ausreichend zur VerfÃ¼gung stehen. In diesem Fall werden die AusflÃ¼ge von englischsprachigen Reiseleitern gefÃ¼hrt.",
    addlInfo: "Deutschsprachige Audioguides in Stonehenge: Bitte beachten Sie, dass die Teilnahme bis zum 16. Geburtstag ausschlieÃlich in Begleitung eines Erwachsenen mÃ¶glich ist, der von einem Erziehungsberechtigten benannt werden muss. Bis zum 18. Geburtstag benÃ¶tigen Jugendliche eine ausflugsbezogene, schriftliche Erlaubnis eines Erziehungsberechtigten."
  }
};


},{"data_locations":"data_locations","data_tags":"data_tags"}],"data_headings":[function(require,module,exports){
var dpr;

dpr = require('DevicePixelRatio').dpr;

exports.headingSizes = {
  xxl: dpr(40),
  xl: dpr(36),
  l: dpr(34),
  m: dpr(32),
  s: dpr(24)
};


},{"DevicePixelRatio":"DevicePixelRatio"}],"data_itinerary":[function(require,module,exports){
var locations;

locations = require('data_locations').locations;

exports.sailing = {
  startAt: "04/29/2017 08:00:00",
  ship: "AIDAprima",
  departurePort: locations.DEHAM,
  arrivalPort: locations.DEHAM,
  segments: [
    {
      type: "onboarding",
      segmentNumber: 0,
      duration: "09:00:00",
      segmentStart: "04/29/2017 08:00:00",
      segmentEnd: "04/29/2017 23:59:59",
      arrivalTime: "04/29/2017 08:00",
      boardingStart: "04/29/2017 09:00",
      allOnBoard: "04/29/2017 15:00",
      securityStart: "04/29/2017 16:00",
      departureTime: "04/29/2017 18:00",
      location: locations.DEHAM,
      nextLand: locations.GBSOU,
      nextArrivalTime: "05/01/2017 09:30"
    }, {
      type: "seaday",
      segmentNumber: 1,
      segmentStart: "04/30/2017 00:00:00",
      segmentEnd: "04/30/2017 23:59:59",
      duration: "39:30:00",
      location: locations.XXSEA,
      nextLand: locations.GBSOU,
      nextArrivalTime: "05/01/2017 09:30"
    }, {
      type: "location",
      segmentNumber: 2,
      duration: "12:00:00",
      segmentStart: "05/01/2017 00:00:00",
      segmentEnd: "05/01/2017 23:59:59",
      arrivalTime: "05/01/2017 09:30",
      backOnBoard: "05/01/2017 20:30",
      departureTime: "05/01/2017 21:30",
      location: locations.GBSOU,
      nextLand: locations.FRLEH,
      nextArrivalTime: "05/02/2017 07:00"
    }, {
      type: "location",
      segmentNumber: 3,
      duration: "12:00:00",
      segmentStart: "05/02/2017 00:00:00",
      segmentEnd: "05/02/2017 23:59:59",
      arrivalTime: "05/02/2017 07:00",
      backOnBoard: "05/02/2017 18:00",
      departureTime: "05/02/2017 19:00",
      location: locations.FRLEH,
      nextLand: locations.BEZEE,
      nextArrivalTime: "05/03/2017 10:00"
    }, {
      type: "location",
      segmentNumber: 4,
      duration: "09:00:00",
      segmentStart: "05/03/2017 00:00:00",
      segmentEnd: "05/03/2017 23:59:59",
      arrivalTime: "05/03/2017 10:00",
      backOnBoard: "05/03/2017 18:00",
      departureTime: "05/03/2017 19:00",
      location: locations.BEZEE,
      nextLand: locations.NLRTM,
      nextArrivalTime: "05/04/2017 08:00"
    }, {
      type: "location",
      segmentNumber: 5,
      duration: "24:00:00",
      segmentStart: "05/04/2017 00:00:00",
      segmentEnd: "05/05/2017 08:00:00",
      arrivalTime: "05/04/2017 08:00",
      backOnBoard: "05/05/2017 07:00",
      departureTime: "05/05/2017 08:00",
      location: locations.NLRTM,
      nextLand: locations.DEHAM,
      nextArrivalTime: "05/06/2017 08:00"
    }, {
      type: "seaday",
      segmentNumber: 6,
      segmentStart: "05/05/2017 07:01",
      segmentEnd: "05/05/2017 23:59",
      duration: "39:30:00",
      location: locations.XXSEA,
      nextLand: locations.DEHAM,
      nextArrivalTime: "05/06/2017 08:00"
    }, {
      type: "offboarding",
      segmentNumber: 7,
      segmentStart: "05/06/2017 00:00",
      segmentEnd: "05/06/2017 09:59",
      arrivalTime: "05/06/2017 08:00",
      allFromBoard: "05/06/2017 10:00",
      duration: "08:00:00",
      location: locations.DEHAM,
      nextLand: locations.DEHAM
    }
  ]
};


},{"data_locations":"data_locations"}],"data_locations":[function(require,module,exports){
exports.locations = {
  XXSEA: {
    name: "Auf See",
    marketingName: "Auf See",
    images: {
      dawn: ["modules/moduleImages/itinerary/seaday/img_seetag_dawn.png"],
      day: ["modules/moduleImages/itinerary/seaday/img_seetag_day.png", "modules/moduleImages/itinerary/seaday/img_seetag_day2.jpeg", "modules/moduleImages/itinerary/seaday/img_seetag_day3.jpeg"],
      dusk: ["modules/moduleImages/itinerary/seaday/img_seetag_dusk1.png", "modules/moduleImages/itinerary/seaday/img_seetag_dusk2.png", "modules/moduleImages/itinerary/seaday/img_seetag_dusk3.jpeg"],
      night: ["modules/moduleImages/itinerary/seaday/img_seetag_night.png"]
    }
  },
  DEHAM: {
    name: "Hamburg",
    marketingName: "Hamburg",
    images: {
      dawn: ["modules/moduleImages/itinerary/hamburg/img_hamburg_dawn.png"],
      day: ["modules/moduleImages/itinerary/hamburg/img_hamburg_day.png"],
      dusk: ["modules/moduleImages/itinerary/hamburg/img_hamburg_dusk.png"],
      night: ["modules/moduleImages/itinerary/hamburg/img_hamburg_night.png"]
    }
  },
  GBSOU: {
    name: "Southampton",
    marketingName: "London / Southampton",
    images: {
      dawn: ["modules/moduleImages/itinerary/southampton/img_london_dawn.png"],
      day: ["modules/moduleImages/itinerary/southampton/img_london_day.png"],
      dusk: ["modules/moduleImages/itinerary/southampton/img_london_dusk.jpg"],
      night: ["modules/moduleImages/itinerary/southampton//img_london_night.png"]
    }
  },
  FRLEH: {
    name: "Le Havre",
    marketingName: "Paris / Le&nbsp;Havre",
    images: {
      dawn: ["modules/moduleImages/itinerary/lehavre/img_lehavre_dawn.jpg"],
      day: ["modules/moduleImages/itinerary/lehavre/img_paris_day.png", "modules/moduleImages/itinerary/lehavre/img_lehavre_day.jpg"],
      dusk: ["modules/moduleImages/itinerary/lehavre/img_paris_dusk.png", "modules/moduleImages/itinerary/lehavre/img_lehavre_dusk.jpg"],
      night: ["modules/moduleImages/itinerary/lehavre/img_paris_night.png"]
    }
  },
  BEZEE: {
    name: "ZeebrÃ¼gge",
    marketingName: "BrÃ¼ssel / ZeebrÃ¼gge",
    images: {
      dawn: ["modules/moduleImages/itinerary/zeebrugge/img_brussels_dawn.png"],
      day: ["modules/moduleImages/itinerary/zeebrugge/img_brussels_day.png"],
      dusk: ["modules/moduleImages/itinerary/zeebrugge/img_brussels_dusk.png"],
      night: ["modules/moduleImages/itinerary/zeebrugge/img_brussels_night.png"]
    }
  },
  NLRTM: {
    name: "Rotterdam",
    marketingName: "Amsterdam / Rotterdam",
    images: {
      dawn: ["modules/moduleImages/itinerary/rotterdam/img_rotterdam_dawn.jpg", "modules/moduleImages/itinerary/rotterdam/img_rotterdam_dawn2.jpg"],
      day: ["modules/moduleImages/itinerary/rotterdam/img_rotterdam_day.jpg"],
      dusk: ["modules/moduleImages/itinerary/rotterdam/img_rotterdam_dusk.jpg"],
      night: ["modules/moduleImages/itinerary/rotterdam/img_rotterdam_night.jpg"]
    }
  }
};


},{}],"data_myDaySegments_alt":[function(require,module,exports){
var locations, moment, npm,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

npm = require('npm');

moment = npm.moment;

locations = require('data_locations').locations;

Function.prototype.property = function(prop, desc) {
  return Object.defineProperty(this.prototype, prop, desc);
};

exports.remainingCruise = (function() {
  function remainingCruise(sailing, testDate) {
    var newNow;
    this.sailing = sailing;
    this.testDate = testDate;
    moment.locale('de');
    newNow = moment(this.testDate);
    moment.now = function() {
      return newNow;
    };
    this.constructDataObject();
  }

  remainingCruise.property('itineraryPages', {
    get: function() {
      if (!this.itineraryPages) {
        return this.constructDataObject();
      } else {
        return this.itineraryPages;
      }
    }
  });

  remainingCruise.prototype.constructDataObject = function() {
    var currentSegment, currentSegmentIndex, endDate, i, j, now, ref, ref1, results, segments, startDate, startingIndex;
    segments = this.sailing.segments;
    now = moment();
    startDate = moment(this.sailing.startAt);
    endDate = moment(segments[segments.length - 1].allFromBoard);
    currentSegment = this.findSegmentInSailing(segments);
    if (currentSegment) {
      currentSegmentIndex = segments.indexOf(currentSegment);
      this.itineraryPages.push(this.addMyDayObject(currentSegment));
      startingIndex = this.determineStartIndex(currentSegment, currentSegmentIndex);
      results = [];
      for (i = j = ref = startingIndex, ref1 = segments.length; ref <= ref1 ? j < ref1 : j > ref1; i = ref <= ref1 ? ++j : --j) {
        results.push(this.itineraryPages.push(this.addItinObject(segments[i])));
      }
      return results;
    } else {
      return this.checkPreOrPostCruise(startDate, endDate);
    }
  };

  remainingCruise.prototype.findSegmentInSailing = function(segmentList) {
    var currentSegment, endDate, startDate;
    startDate = moment(this.sailing.startAt);
    endDate = moment(segmentList[segmentList.length - 1].segmentEnd);
    currentSegment = segmentList.find((function(_this) {
      return function(segment) {
        return moment().isBetween(moment(segment.segmentStart), moment(segment.segmentEnd));
      };
    })(this));
    if (currentSegment) {
      return currentSegment;
    } else {
      return null;
    }
  };

  remainingCruise.prototype.checkPreOrPostCruise = function(startDate, endDate) {
    console.log("we returned no match for test date in sailing");
    if (moment().isBefore(startDate)) {
      return console.log("out of segment; testDate is before sailing start.  Precruise Mode of app");
    } else if (moment().isAfter(endDate)) {
      return console.log("out of segment; testDate is after sailing start.  Post-cruise Mode of app");
    }
  };

  remainingCruise.prototype.determineStartIndex = function(currentSegment, currentSegmentIndex) {
    var startingIndex;
    if (!this.options.arriving) {
      startingIndex = currentSegmentIndex + 1;
    } else if (currentSegment.type === "seaday") {
      startingIndex = currentSegmentIndex + 1;
    } else {
      startingIndex = currentSegmentIndex;
    }
    return startingIndex;
  };

  remainingCruise.prototype.addItinObject = function(currentSegment) {
    var itineraryObject;
    itineraryObject = {
      name: currentSegment.location.name + "_page",
      pageType: currentSegment.type,
      segment: currentSegment,
      testDate: this.testDate,
      segmentImage: currentSegment.location.images.day[0]
    };
    return itineraryObject;
  };

  remainingCruise.prototype.addMyDayObject = function(currentSegment) {
    var arrival, departure, myDayObject, pageType, selectedImage;
    if (currentSegment.type !== "seaday") {
      arrival = moment(currentSegment.arrivalTime);
      departure = moment(currentSegment.departureTime);
      selectedImage = "";
      pageType = "location";
      if (moment().isBetween(arrival, departure)) {
        this.options.arriving = false;
        selectedImage = this.selectImage(moment().hour(), currentSegment.location);
        pageType = currentSegment.type;
      } else if (moment().isSameOrBefore(arrival)) {
        this.options.arriving = true;
        selectedImage = this.selectImage(moment().hour(), locations.XXSEA);
        pageType = "arriving";
      } else if (moment().isSameOrAfter(departure)) {
        this.options.arriving = false;
        selectedImage = this.selectImage(moment().hour(), locations.XXSEA);
        pageType = "departing";
      } else {
        print("error - can't determine phase");
      }
    } else {
      this.options.arriving = false;
      selectedImage = this.selectImage(moment().hour(), currentSegment.location);
      pageType = "seaday";
    }
    myDayObject = {
      name: "ItineraryNow",
      pageType: pageType,
      segment: currentSegment,
      testDate: this.testDate,
      segmentImage: selectedImage
    };
    return myDayObject;
  };

  remainingCruise.prototype.daytime = function(h) {
    if (indexOf.call([21, 22, 23, 24], h) >= 0 || indexOf.call([0, 1, 2, 3, 4], h) >= 0) {
      return "night";
    }
    if (indexOf.call([19, 20, 21], h) >= 0) {
      return "dusk";
    }
    if (indexOf.call([7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], h) >= 0) {
      return "day";
    }
    if (indexOf.call([5, 6], h) >= 0) {
      return "dawn";
    }
  };

  remainingCruise.prototype.selectImage = function(forTime, forLocation) {
    var index, list;
    list = "";
    switch (this.daytime(forTime)) {
      case "night":
        list = forLocation.images.night;
        break;
      case "dusk":
        list = forLocation.images.dusk;
        break;
      case "day":
        list = forLocation.images.day;
        break;
      case "dawn":
        list = forLocation.images.dawn;
    }
    index = Math.round(Utils.randomNumber(0, list.length - 1));
    return list[index];
  };

  return remainingCruise;

})();


},{"data_locations":"data_locations","npm":"npm"}],"data_myDaySegments":[function(require,module,exports){
var locations, moment, npm,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

locations = require('data_locations').locations;

npm = require('npm');

moment = npm.moment;

exports.myDaySegements = (function(superClass) {
  extend(myDaySegements, superClass);

  function myDaySegements(options) {
    var base, base1, base2, newNow;
    this.options = options != null ? options : {};
    if ((base = this.options).sailing == null) {
      base.sailing = "";
    }
    if ((base1 = this.options).itineraryList == null) {
      base1.itineraryList = [];
    }
    if ((base2 = this.options).testDate == null) {
      base2.testDate = moment("04/29/2017 00:00:00");
    }
    myDaySegements.__super__.constructor.call(this, this.options);
    moment.locale('de');
    newNow = moment(this.options.testDate);
    moment.now = function() {
      return newNow;
    };
    this.visible = false;
    this.name = "myDayDataModel";
    this.constructDataObject();
  }

  myDaySegements.prototype.constructDataObject = function() {
    var currentSegment, currentSegmentIndex, endDate, i, j, now, ref, ref1, segments, startDate, startingIndex;
    segments = this.options.sailing.segments;
    now = moment();
    startDate = moment(this.options.sailing.startAt);
    endDate = moment(segments[segments.length - 1].allFromBoard);
    currentSegment = this.findSegmentInSailing(segments);
    if (currentSegment) {
      console.log(currentSegment);
      currentSegmentIndex = segments.indexOf(currentSegment);
      this.options.itineraryList.push(this.addMyDayObject(currentSegment));
      startingIndex = this.determineStartIndex(currentSegment, currentSegmentIndex);
      for (i = j = ref = startingIndex, ref1 = segments.length; ref <= ref1 ? j < ref1 : j > ref1; i = ref <= ref1 ? ++j : --j) {
        this.options.itineraryList.push(this.addItinObject(segments[i]));
      }
    } else {
      this.checkPreOrPostCruise(startDate, endDate);
    }
    return console.log(this.options.itineraryList);
  };

  myDaySegements.prototype.findSegmentInSailing = function(segmentList) {
    var currentSegment, endDate, startDate;
    startDate = moment(this.options.sailing.startAt);
    endDate = moment(segmentList[segmentList.length - 1].segmentEnd);
    currentSegment = segmentList.find((function(_this) {
      return function(segment) {
        return moment().isBetween(moment(segment.segmentStart), moment(segment.segmentEnd));
      };
    })(this));
    if (currentSegment) {
      return currentSegment;
    } else {
      return null;
    }
  };

  myDaySegements.prototype.checkPreOrPostCruise = function(startDate, endDate) {
    console.log("we returned no match for test date in sailing");
    if (moment().isBefore(startDate)) {
      return console.log("out of segment; testDate is before sailing start.  Precruise Mode of app");
    } else if (moment().isAfter(endDate)) {
      return console.log("out of segment; testDate is after sailing start.  Post-cruise Mode of app");
    }
  };

  myDaySegements.prototype.determineStartIndex = function(currentSegment, currentSegmentIndex) {
    var startingIndex;
    if (!this.options.arriving) {
      startingIndex = currentSegmentIndex + 1;
    } else if (currentSegment.type === "seaday") {
      startingIndex = currentSegmentIndex + 1;
    } else {
      startingIndex = currentSegmentIndex;
    }
    return startingIndex;
  };

  myDaySegements.prototype.addItinObject = function(currentSegment) {
    var itineraryObject;
    itineraryObject = {
      name: currentSegment.location.name + "_page",
      pageType: currentSegment.type,
      segment: currentSegment,
      testDate: this.options.testDate,
      segmentImage: currentSegment.location.images.day[0]
    };
    return itineraryObject;
  };

  myDaySegements.prototype.addMyDayObject = function(currentSegment) {
    var arrival, departure, myDayObject, pageType, selectedImage;
    if (currentSegment.type !== "seaday") {
      arrival = moment(currentSegment.arrivalTime);
      departure = moment(currentSegment.departureTime);
      selectedImage = "";
      pageType = "location";
      if (moment().isBetween(arrival, departure)) {
        this.options.arriving = false;
        selectedImage = this.selectImage(moment().hour(), currentSegment.location);
        pageType = currentSegment.type;
      } else if (moment().isSameOrBefore(arrival)) {
        this.options.arriving = true;
        selectedImage = this.selectImage(moment().hour(), locations.XXSEA);
        pageType = "arriving";
      } else if (moment().isSameOrAfter(departure)) {
        this.options.arriving = false;
        selectedImage = this.selectImage(moment().hour(), locations.XXSEA);
        pageType = "departing";
      } else {
        print("error - can't determine phase");
      }
    } else {
      this.options.arriving = false;
      selectedImage = this.selectImage(moment().hour(), currentSegment.location);
      pageType = "seaday";
    }
    myDayObject = {
      name: "ItineraryNow",
      pageType: pageType,
      segment: currentSegment,
      testDate: this.options.testDate,
      segmentImage: selectedImage
    };
    return myDayObject;
  };

  myDaySegements.prototype.daytime = function(h) {
    if (indexOf.call([21, 22, 23, 24], h) >= 0 || indexOf.call([0, 1, 2, 3, 4], h) >= 0) {
      return "night";
    }
    if (indexOf.call([19, 20, 21], h) >= 0) {
      return "dusk";
    }
    if (indexOf.call([7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], h) >= 0) {
      return "day";
    }
    if (indexOf.call([5, 6], h) >= 0) {
      return "dawn";
    }
  };

  myDaySegements.prototype.selectImage = function(forTime, forLocation) {
    var index, list;
    list = "";
    switch (this.daytime(forTime)) {
      case "night":
        list = forLocation.images.night;
        break;
      case "dusk":
        list = forLocation.images.dusk;
        break;
      case "day":
        list = forLocation.images.day;
        break;
      case "dawn":
        list = forLocation.images.dawn;
    }
    index = Math.round(Utils.randomNumber(0, list.length - 1));
    return list[index];
  };

  myDaySegements.define('sailing', {
    get: function() {
      if (this.options.sailing === "") {
        return console.error("ItineraryImageStrip: sailing attribute cannot be empty");
      } else {
        return this.options.sailing;
      }
    },
    set: function(value) {
      return this.options.sailing = value;
    }
  });

  myDaySegements.define('itineraryList', {
    get: function() {
      if (this.options.itineraryList === "") {
        return console.error("pages are empty");
      } else {
        return this.options.itineraryList;
      }
    },
    set: function(value) {
      return this.options.itineraryList = value;
    }
  });

  myDaySegements.define('testDate', {
    get: function() {
      return this.options.testDate;
    },
    set: function(value) {
      return this.options.testDate = value;
    }
  });

  return myDaySegements;

})(Layer);


},{"data_locations":"data_locations","npm":"npm"}],"data_openinghours":[function(require,module,exports){
exports.data_openinghours = {
  marktrestaurant: [
    {
      date: "04/29/2017",
      weekday: "saturday",
      times: [
        {
          open: "7:00",
          close: "10:00"
        }, {
          open: "17:00",
          close: "19:00"
        }, {
          open: "19:30",
          close: "21:00"
        }
      ]
    }, {
      date: "04/30/2017",
      weekday: "sunday",
      times: [
        {
          open: "7:00",
          close: "9:00"
        }, {
          open: "11:00",
          close: "14:00"
        }, {
          open: "17:30",
          close: "19:00"
        }, {
          open: "19:30",
          close: "21:00"
        }
      ]
    }, {
      date: "05/01/2017",
      weekday: "monday",
      times: [
        {
          open: "7:30",
          close: "9:00"
        }, {
          open: "11:30",
          close: "14:00"
        }, {
          open: "17:30",
          close: "19:00"
        }, {
          open: "19:30",
          close: "21:00"
        }
      ]
    }, {
      date: "05/02/2017",
      weekday: "tuesday",
      times: [
        {
          open: "6:30",
          close: "9:30"
        }, {
          open: "18:00",
          close: "19:00"
        }, {
          open: "19:30",
          close: "20:00"
        }
      ]
    }, {
      date: "05/03/2017",
      weekday: "wednesday",
      times: [
        {
          open: "7:00",
          close: "10:00"
        }, {
          open: "11:00",
          close: "14:30"
        }, {
          open: "18:00",
          close: "21:00"
        }
      ]
    }, {
      date: "05/04/2017",
      weekday: "thursday",
      times: [
        {
          open: "7:30",
          close: "9:00"
        }, {
          open: "11:30",
          close: "14:00"
        }, {
          open: "17:00",
          close: "19:00"
        }, {
          open: "19:30",
          close: "21:30"
        }
      ]
    }, {
      date: "05/05/2017",
      weekday: "friday",
      times: [
        {
          open: "6:30",
          close: "10:00"
        }, {
          open: "11:00",
          close: "14:00"
        }, {
          open: "17:30",
          close: "19:00"
        }, {
          open: "19:30",
          close: "21:00"
        }
      ]
    }, {
      date: "05/06/2017",
      weekday: "saturday",
      times: [
        {
          open: "7:00",
          close: "10:00"
        }, {
          open: "11:00",
          close: "14:30"
        }, {
          open: "17:00",
          close: "19:00"
        }, {
          open: "19:30",
          close: "22:00"
        }
      ]
    }
  ],
  weitewelt: [
    {
      date: "04/29/2017",
      weekday: "saturday",
      times: [
        {
          open: "7:00",
          close: "10:00"
        }, {
          open: "17:00",
          close: "19:00"
        }, {
          open: "19:30",
          close: "21:00"
        }
      ]
    }, {
      date: "04/30/2017",
      weekday: "sunday",
      times: [
        {
          open: "7:00",
          close: "9:00"
        }, {
          open: "11:00",
          close: "14:00"
        }, {
          open: "17:30",
          close: "19:00"
        }, {
          open: "19:30",
          close: "21:00"
        }
      ]
    }, {
      date: "05/01/2017",
      weekday: "monday",
      times: [
        {
          open: "7:30",
          close: "9:00"
        }, {
          open: "11:30",
          close: "14:00"
        }, {
          open: "17:30",
          close: "19:00"
        }, {
          open: "19:30",
          close: "21:00"
        }
      ]
    }, {
      date: "05/02/2017",
      weekday: "tuesday",
      times: [
        {
          open: "6:30",
          close: "9:30"
        }, {
          open: "18:00",
          close: "19:00"
        }, {
          open: "19:30",
          close: "20:00"
        }
      ]
    }, {
      date: "05/03/2017",
      weekday: "wednesday",
      times: [
        {
          open: "7:00",
          close: "10:00"
        }, {
          open: "11:00",
          close: "14:30"
        }, {
          open: "18:00",
          close: "21:00"
        }
      ]
    }, {
      date: "05/04/2017",
      weekday: "thursday",
      times: [
        {
          open: "7:30",
          close: "9:00"
        }, {
          open: "11:30",
          close: "14:00"
        }, {
          open: "17:00",
          close: "19:00"
        }, {
          open: "19:30",
          close: "21:30"
        }
      ]
    }, {
      date: "05/05/2017",
      weekday: "friday",
      times: [
        {
          open: "6:30",
          close: "10:00"
        }, {
          open: "11:00",
          close: "14:00"
        }, {
          open: "17:30",
          close: "19:00"
        }, {
          open: "19:30",
          close: "21:00"
        }
      ]
    }, {
      date: "05/06/2017",
      weekday: "saturday",
      times: [
        {
          open: "7:00",
          close: "10:00"
        }, {
          open: "11:00",
          close: "14:30"
        }, {
          open: "17:00",
          close: "19:00"
        }, {
          open: "19:30",
          close: "22:00"
        }
      ]
    }
  ],
  east: [
    {
      date: "04/29/2017",
      weekday: "saturday",
      times: [
        {
          open: "7:00",
          close: "10:00"
        }, {
          open: "17:00",
          close: "19:00"
        }, {
          open: "19:30",
          close: "21:00"
        }
      ]
    }, {
      date: "04/30/2017",
      weekday: "sunday",
      times: [
        {
          open: "7:00",
          close: "9:00"
        }, {
          open: "11:00",
          close: "14:00"
        }, {
          open: "17:30",
          close: "19:00"
        }, {
          open: "19:30",
          close: "21:00"
        }
      ]
    }, {
      date: "05/01/2017",
      weekday: "monday",
      times: [
        {
          open: "7:30",
          close: "9:00"
        }, {
          open: "11:30",
          close: "14:00"
        }, {
          open: "17:30",
          close: "19:00"
        }, {
          open: "19:30",
          close: "21:00"
        }
      ]
    }, {
      date: "05/02/2017",
      weekday: "tuesday",
      times: [
        {
          open: "6:30",
          close: "9:30"
        }, {
          open: "18:00",
          close: "19:00"
        }, {
          open: "19:30",
          close: "20:00"
        }
      ]
    }, {
      date: "05/03/2017",
      weekday: "wednesday",
      times: [
        {
          open: "7:00",
          close: "10:00"
        }, {
          open: "11:00",
          close: "14:30"
        }, {
          open: "18:00",
          close: "21:00"
        }
      ]
    }, {
      date: "17/05/4",
      weekday: "thursday",
      times: [
        {
          open: "7:30",
          close: "9:00"
        }, {
          open: "11:30",
          close: "14:00"
        }, {
          open: "17:00",
          close: "19:00"
        }, {
          open: "19:30",
          close: "21:30"
        }
      ]
    }, {
      date: "17/05/5",
      weekday: "friday",
      times: [
        {
          open: "6:30",
          close: "10:00"
        }, {
          open: "11:00",
          close: "14:00"
        }, {
          open: "17:30",
          close: "19:00"
        }, {
          open: "19:30",
          close: "21:00"
        }
      ]
    }, {
      date: "17/05/6",
      weekday: "saturday",
      times: [
        {
          open: "7:00",
          close: "10:00"
        }, {
          open: "11:00",
          close: "14:30"
        }, {
          open: "17:00",
          close: "19:00"
        }, {
          open: "19:30",
          close: "22:00"
        }
      ]
    }
  ],
  belladonna: [
    {
      date: "17/04/29",
      weekday: "saturday",
      times: [
        {
          open: "7:00",
          close: "10:00"
        }, {
          open: "17:00",
          close: "19:00"
        }, {
          open: "19:30",
          close: "21:00"
        }
      ]
    }, {
      date: "17/04/30",
      weekday: "sunday",
      times: [
        {
          open: "7:00",
          close: "9:00"
        }, {
          open: "11:00",
          close: "14:00"
        }, {
          open: "17:30",
          close: "19:00"
        }, {
          open: "19:30",
          close: "21:00"
        }
      ]
    }, {
      date: "17/05/1",
      weekday: "monday",
      times: [
        {
          open: "7:30",
          close: "9:00"
        }, {
          open: "11:30",
          close: "14:00"
        }, {
          open: "17:30",
          close: "19:00"
        }, {
          open: "19:30",
          close: "21:00"
        }
      ]
    }, {
      date: "17/05/2",
      weekday: "tuesday",
      times: [
        {
          open: "6:30",
          close: "9:30"
        }, {
          open: "18:00",
          close: "19:00"
        }, {
          open: "19:30",
          close: "20:00"
        }
      ]
    }, {
      date: "17/05/3",
      weekday: "wednesday",
      times: [
        {
          open: "7:00",
          close: "10:00"
        }, {
          open: "11:00",
          close: "14:30"
        }, {
          open: "18:00",
          close: "21:00"
        }
      ]
    }, {
      date: "17/05/4",
      weekday: "thursday",
      times: [
        {
          open: "7:30",
          close: "9:00"
        }, {
          open: "11:30",
          close: "14:00"
        }, {
          open: "17:00",
          close: "19:00"
        }, {
          open: "19:30",
          close: "21:30"
        }
      ]
    }, {
      date: "17/05/5",
      weekday: "friday",
      times: [
        {
          open: "6:30",
          close: "10:00"
        }, {
          open: "11:00",
          close: "14:00"
        }, {
          open: "17:30",
          close: "19:00"
        }, {
          open: "19:30",
          close: "21:00"
        }
      ]
    }, {
      date: "17/05/6",
      weekday: "saturday",
      times: [
        {
          open: "7:00",
          close: "10:00"
        }, {
          open: "11:00",
          close: "14:30"
        }, {
          open: "17:00",
          close: "19:00"
        }, {
          open: "19:30",
          close: "22:00"
        }
      ]
    }
  ],
  fuego: [
    {
      date: "17/04/29",
      weekday: "saturday",
      times: [
        {
          open: "7:00",
          close: "10:00"
        }, {
          open: "17:00",
          close: "19:00"
        }, {
          open: "19:30",
          close: "21:00"
        }
      ]
    }, {
      date: "17/04/30",
      weekday: "sunday",
      times: [
        {
          open: "7:00",
          close: "9:00"
        }, {
          open: "11:00",
          close: "14:00"
        }, {
          open: "17:30",
          close: "19:00"
        }, {
          open: "19:30",
          close: "21:00"
        }
      ]
    }, {
      date: "17/05/1",
      weekday: "monday",
      times: [
        {
          open: "7:30",
          close: "9:00"
        }, {
          open: "11:30",
          close: "14:00"
        }, {
          open: "17:30",
          close: "19:00"
        }, {
          open: "19:30",
          close: "21:00"
        }
      ]
    }, {
      date: "17/05/2",
      weekday: "tuesday",
      times: [
        {
          open: "6:30",
          close: "9:30"
        }, {
          open: "18:00",
          close: "19:00"
        }, {
          open: "19:30",
          close: "20:00"
        }
      ]
    }, {
      date: "17/05/3",
      weekday: "wednesday",
      times: [
        {
          open: "7:00",
          close: "10:00"
        }, {
          open: "11:00",
          close: "14:30"
        }, {
          open: "18:00",
          close: "21:00"
        }
      ]
    }, {
      date: "17/05/4",
      weekday: "thursday",
      times: [
        {
          open: "7:30",
          close: "9:00"
        }, {
          open: "11:30",
          close: "14:00"
        }, {
          open: "17:00",
          close: "19:00"
        }, {
          open: "19:30",
          close: "21:30"
        }
      ]
    }, {
      date: "17/05/5",
      weekday: "friday",
      times: [
        {
          open: "6:30",
          close: "10:00"
        }, {
          open: "11:00",
          close: "14:00"
        }, {
          open: "17:30",
          close: "19:00"
        }, {
          open: "19:30",
          close: "21:00"
        }
      ]
    }, {
      date: "17/05/6",
      weekday: "saturday",
      times: [
        {
          open: "7:00",
          close: "10:00"
        }, {
          open: "11:00",
          close: "14:30"
        }, {
          open: "17:00",
          close: "19:00"
        }, {
          open: "19:30",
          close: "22:00"
        }
      ]
    }
  ],
  casanova: [
    {
      date: "17/04/29",
      weekday: "saturday",
      times: [
        {
          open: "7:00",
          close: "10:00"
        }, {
          open: "17:00",
          close: "19:00"
        }, {
          open: "19:30",
          close: "21:00"
        }
      ]
    }, {
      date: "17/04/30",
      weekday: "sunday",
      times: [
        {
          open: "7:00",
          close: "9:00"
        }, {
          open: "11:00",
          close: "14:00"
        }, {
          open: "17:30",
          close: "19:00"
        }, {
          open: "19:30",
          close: "21:00"
        }
      ]
    }, {
      date: "17/05/1",
      weekday: "monday",
      times: [
        {
          open: "7:30",
          close: "9:00"
        }, {
          open: "11:30",
          close: "14:00"
        }, {
          open: "17:30",
          close: "19:00"
        }, {
          open: "19:30",
          close: "21:00"
        }
      ]
    }, {
      date: "17/05/2",
      weekday: "tuesday",
      times: [
        {
          open: "6:30",
          close: "9:30"
        }, {
          open: "18:00",
          close: "19:00"
        }, {
          open: "19:30",
          close: "20:00"
        }
      ]
    }, {
      date: "17/05/3",
      weekday: "wednesday",
      times: [
        {
          open: "7:00",
          close: "10:00"
        }, {
          open: "11:00",
          close: "14:30"
        }, {
          open: "18:00",
          close: "21:00"
        }
      ]
    }, {
      date: "17/05/4",
      weekday: "thursday",
      times: [
        {
          open: "7:30",
          close: "9:00"
        }, {
          open: "11:30",
          close: "14:00"
        }, {
          open: "17:00",
          close: "19:00"
        }, {
          open: "19:30",
          close: "21:30"
        }
      ]
    }, {
      date: "17/05/5",
      weekday: "friday",
      times: [
        {
          open: "6:30",
          close: "10:00"
        }, {
          open: "11:00",
          close: "14:00"
        }, {
          open: "17:30",
          close: "19:00"
        }, {
          open: "19:30",
          close: "21:00"
        }
      ]
    }, {
      date: "17/05/6",
      weekday: "saturday",
      times: [
        {
          open: "7:00",
          close: "10:00"
        }, {
          open: "11:00",
          close: "14:30"
        }, {
          open: "17:00",
          close: "19:00"
        }, {
          open: "19:30",
          close: "22:00"
        }
      ]
    }
  ],
  brauhaus: [
    {
      date: "17/04/29",
      weekday: "saturday",
      times: [
        {
          open: "7:00",
          close: "10:00"
        }, {
          open: "17:00",
          close: "19:00"
        }, {
          open: "19:30",
          close: "21:00"
        }
      ]
    }, {
      date: "17/04/30",
      weekday: "sunday",
      times: [
        {
          open: "7:00",
          close: "9:00"
        }, {
          open: "11:00",
          close: "14:00"
        }, {
          open: "17:30",
          close: "19:00"
        }, {
          open: "19:30",
          close: "21:00"
        }
      ]
    }, {
      date: "17/05/1",
      weekday: "monday",
      times: [
        {
          open: "7:30",
          close: "9:00"
        }, {
          open: "11:30",
          close: "14:00"
        }, {
          open: "17:30",
          close: "19:00"
        }, {
          open: "19:30",
          close: "21:00"
        }
      ]
    }, {
      date: "17/05/2",
      weekday: "tuesday",
      times: [
        {
          open: "6:30",
          close: "9:30"
        }, {
          open: "18:00",
          close: "19:00"
        }, {
          open: "19:30",
          close: "20:00"
        }
      ]
    }, {
      date: "17/05/3",
      weekday: "wednesday",
      times: [
        {
          open: "7:00",
          close: "10:00"
        }, {
          open: "11:00",
          close: "14:30"
        }, {
          open: "18:00",
          close: "21:00"
        }
      ]
    }, {
      date: "17/05/4",
      weekday: "thursday",
      times: [
        {
          open: "7:30",
          close: "9:00"
        }, {
          open: "11:30",
          close: "14:00"
        }, {
          open: "17:00",
          close: "19:00"
        }, {
          open: "19:30",
          close: "21:30"
        }
      ]
    }, {
      date: "17/05/5",
      weekday: "friday",
      times: [
        {
          open: "6:30",
          close: "10:00"
        }, {
          open: "11:00",
          close: "14:00"
        }, {
          open: "17:30",
          close: "19:00"
        }, {
          open: "19:30",
          close: "21:00"
        }
      ]
    }, {
      date: "17/05/6",
      weekday: "saturday",
      times: [
        {
          open: "7:00",
          close: "10:00"
        }, {
          open: "11:00",
          close: "14:30"
        }, {
          open: "17:00",
          close: "19:00"
        }, {
          open: "19:30",
          close: "22:00"
        }
      ]
    }
  ]
};


},{}],"data_tags":[function(require,module,exports){
exports.tags = {
  family: "family",
  nature: "nature",
  culture: "culture",
  wellness: "Wellness, Sport & Spa",
  healthy: "Gesund",
  schnitzel: "Schnitzel",
  pasta: "Nudeln"
};


},{}],"data_topics":[function(require,module,exports){


},{}],"data_venues":[function(require,module,exports){
var locations, tags;

locations = require('data_locations').locations;

tags = require('data_tags').tags;

exports.venues = {
  marktrestaurant: {
    name: "Marktrestaurant",
    type: "buffet",
    rating: 4,
    numRatings: 2143,
    tagline: "Saisonal, frisch und bunt",
    locations: locations.marktrestaurant,
    tags: [tags.healthy, tags.family],
    description: "Hier finden Sie an fantasievoll dekorierte StaÌnden mediterrane und mitteleuropaÌische KuÌche, viel frisches Obst und GemuÌse sowie vielfaÌltige KaÌse-, Wurst- und SchinkenspezialitaÌten. Unser Fisch-Buffet mit KoÌstlichkeiten aus der restauranteigenen FischraÌucherei wird Sie begeistern. Hochwertige offene Weine an der Weinstation und ein vegetarisches Buffet mit Schonkostbar runden das Angebot ab.",
    includedInPrice: {
      title: "Inklusive:",
      content: "Alle Speisen und Softdrinks"
    },
    excludedInPrice: {
      title: "Zum Aufpreis",
      content: "Kaffee- und WeinspezialitÃ¤ten"
    },
    openingHours: {
      title: "Ãffnungszeiten",
      content: [
        {
          date: "04/29/2017",
          weekday: "saturday",
          times: [
            {
              open: "7:00",
              close: "10:00"
            }, {
              open: "17:00",
              close: "19:00"
            }, {
              open: "19:30",
              close: "21:00"
            }
          ]
        }, {
          date: "04/30/2017",
          weekday: "sunday",
          times: [
            {
              open: "7:00",
              close: "9:00"
            }, {
              open: "11:00",
              close: "14:00"
            }, {
              open: "17:30",
              close: "19:00"
            }, {
              open: "19:30",
              close: "21:00"
            }
          ]
        }, {
          date: "05/01/2017",
          weekday: "monday",
          times: [
            {
              open: "7:30",
              close: "9:00"
            }, {
              open: "11:30",
              close: "14:00"
            }, {
              open: "17:30",
              close: "19:00"
            }, {
              open: "19:30",
              close: "21:00"
            }
          ]
        }, {
          date: "05/02/2017",
          weekday: "tuesday",
          times: [
            {
              open: "6:30",
              close: "9:30"
            }, {
              open: "18:00",
              close: "19:00"
            }, {
              open: "19:30",
              close: "20:00"
            }
          ]
        }, {
          date: "05/03/2017",
          weekday: "wednesday",
          times: [
            {
              open: "7:00",
              close: "10:00"
            }, {
              open: "11:00",
              close: "14:30"
            }, {
              open: "18:00",
              close: "21:00"
            }
          ]
        }, {
          date: "05/04/2017",
          weekday: "thursday",
          times: [
            {
              open: "7:30",
              close: "9:00"
            }, {
              open: "11:30",
              close: "14:00"
            }, {
              open: "17:00",
              close: "19:00"
            }, {
              open: "19:30",
              close: "21:30"
            }
          ]
        }, {
          date: "05/05/2017",
          weekday: "friday",
          times: [
            {
              open: "6:30",
              close: "10:00"
            }, {
              open: "11:00",
              close: "14:00"
            }, {
              open: "17:30",
              close: "19:00"
            }, {
              open: "19:30",
              close: "21:00"
            }
          ]
        }, {
          date: "05/06/2017",
          weekday: "saturday",
          times: [
            {
              open: "7:00",
              close: "10:00"
            }, {
              open: "11:00",
              close: "14:30"
            }, {
              open: "17:00",
              close: "19:00"
            }, {
              open: "19:30",
              close: "22:00"
            }
          ]
        }
      ]
    },
    popularTimes: {
      title: "Beliebte Besuchszeiten",
      content: "images/interface/pinkbox.svg"
    },
    isBookable: true,
    isPromoted: false,
    staff: {
      title: "Ihre Begleitung:",
      content: [
        {
          name: "Maricel Pamintuan",
          title: "Buffet Chef",
          staffImage: "modules/moduleImages/personnel/MaricelPamintuan.png"
        }, {
          name: "Anna Rademacher",
          title: "Hostess",
          staffImage: "modules/moduleImages/personnel/AnnaRademacher.png"
        }
      ]
    }
  },
  weitewelt: {
    name: "Weite Welt Restaurant",
    type: "buffet",
    rating: 4,
    numRatings: 122,
    tagline: "Kommen Sie auf eine kulinarische Entdeckungsreise!",
    locations: locations.weitewelt,
    tags: [tags.schnitzel, tags.family],
    description: "Hier finden Sie an fantasievoll dekorierte StÃ¤nden mediterrane und mitteleuropaÌische KuÌche, viel frisches Obst und GemuÌse sowie vielfaÌltige KaÌse-, Wurst- und SchinkenspezialitaÌten. Unser Fisch-Buffet mit KoÌstlichkeiten aus der restauranteigenen FischraÌucherei wird Sie begeistern. Hochwertige offene Weine an der Weinstation und ein vegetarisches Buffet mit Schonkostbar runden das Angebot ab.",
    includedInPrice: {
      title: "Inklusive:",
      content: "Alle Speisen und Softdrinks"
    },
    excludedInPrice: {
      title: "Zum Aufpreis",
      content: "Kaffee- und WeinspezialitÃ¤ten"
    },
    openingHours: {
      title: "Ãffnungszeiten",
      content: [
        {
          date: "04/29/2017",
          weekday: "saturday",
          times: [
            {
              open: "7:00",
              close: "10:00"
            }, {
              open: "17:00",
              close: "19:00"
            }, {
              open: "19:30",
              close: "21:00"
            }
          ]
        }, {
          date: "04/30/2017",
          weekday: "sunday",
          times: [
            {
              open: "7:00",
              close: "9:00"
            }, {
              open: "11:00",
              close: "14:00"
            }, {
              open: "17:30",
              close: "19:00"
            }, {
              open: "19:30",
              close: "21:00"
            }
          ]
        }, {
          date: "05/01/2017",
          weekday: "monday",
          times: [
            {
              open: "7:30",
              close: "9:00"
            }, {
              open: "11:30",
              close: "14:00"
            }, {
              open: "17:30",
              close: "19:00"
            }, {
              open: "19:30",
              close: "21:00"
            }
          ]
        }, {
          date: "05/02/2017",
          weekday: "tuesday",
          times: [
            {
              open: "6:30",
              close: "9:30"
            }, {
              open: "18:00",
              close: "19:00"
            }, {
              open: "19:30",
              close: "20:00"
            }
          ]
        }, {
          date: "05/03/2017",
          weekday: "wednesday",
          times: [
            {
              open: "7:00",
              close: "10:00"
            }, {
              open: "11:00",
              close: "14:30"
            }, {
              open: "18:00",
              close: "21:00"
            }
          ]
        }, {
          date: "05/04/2017",
          weekday: "thursday",
          times: [
            {
              open: "7:30",
              close: "9:00"
            }, {
              open: "11:30",
              close: "14:00"
            }, {
              open: "17:00",
              close: "19:00"
            }, {
              open: "19:30",
              close: "21:30"
            }
          ]
        }, {
          date: "05/05/2017",
          weekday: "friday",
          times: [
            {
              open: "6:30",
              close: "10:00"
            }, {
              open: "11:00",
              close: "14:00"
            }, {
              open: "17:30",
              close: "19:00"
            }, {
              open: "19:30",
              close: "21:00"
            }
          ]
        }, {
          date: "05/06/2017",
          weekday: "saturday",
          times: [
            {
              open: "7:00",
              close: "10:00"
            }, {
              open: "11:00",
              close: "14:30"
            }, {
              open: "17:00",
              close: "19:00"
            }, {
              open: "19:30",
              close: "22:00"
            }
          ]
        }
      ]
    },
    popularTimes: {
      title: "Beliebte Besuchszeiten",
      content: "images/interface/pinkbox.svg"
    },
    isBookable: false,
    isPromoted: false
  },
  east: {
    name: "East Restaurant",
    type: "buffet",
    tagline: "Die ganze Vielfalt Asiens",
    rating: 3,
    numRatings: 766,
    locations: locations.east,
    tags: [tags.asian, tags.family],
    description: "Frische asiatische KuÌche â leicht, exotisch und fantasievoll. Unsere Vielfalt an asiatischem und europaÌischem GemuÌse, Fisch, Fleisch und MeeresfruÌchten begeistern. Mit von Ihnen ausgewÃ¤hlten Zutaten kÃ¶nnen SIe sich hier Ihr persoÌnliches Lieblingsgericht im Wok oder auf dem japanischen Teppanyaki-Grill zubereiten lassen. FrstÃ¼ck im East: Bei uns bekommen Sie jeden morgen Ihr TankstellenbrÃ¶tchen mit Marmelade. Garantiert keine Dumplings. Versprochen.",
    includedInPrice: {
      title: "Inklusive:",
      content: "Alle Speisen und Softdrinks"
    },
    excludedInPrice: {
      title: "Zum Aufpreis",
      content: "Kaffee- und WeinspezialitÃ¤ten"
    },
    openingHours: {
      title: "Ãffnungszeiten",
      content: [
        {
          date: "04/29/2017",
          weekday: "saturday",
          times: [
            {
              open: "7:00",
              close: "10:00"
            }, {
              open: "17:00",
              close: "19:00"
            }, {
              open: "19:30",
              close: "21:00"
            }
          ]
        }, {
          date: "04/30/2017",
          weekday: "sunday",
          times: [
            {
              open: "7:00",
              close: "9:00"
            }, {
              open: "11:00",
              close: "14:00"
            }, {
              open: "17:30",
              close: "19:00"
            }, {
              open: "19:30",
              close: "21:00"
            }
          ]
        }, {
          date: "05/01/2017",
          weekday: "monday",
          times: [
            {
              open: "7:30",
              close: "9:00"
            }, {
              open: "11:30",
              close: "14:00"
            }, {
              open: "17:30",
              close: "19:00"
            }, {
              open: "19:30",
              close: "21:00"
            }
          ]
        }, {
          date: "05/02/2017",
          weekday: "tuesday",
          times: [
            {
              open: "6:30",
              close: "9:30"
            }, {
              open: "18:00",
              close: "19:00"
            }, {
              open: "19:30",
              close: "20:00"
            }
          ]
        }, {
          date: "05/03/2017",
          weekday: "wednesday",
          times: [
            {
              open: "7:00",
              close: "10:00"
            }, {
              open: "11:00",
              close: "14:30"
            }, {
              open: "18:00",
              close: "21:00"
            }
          ]
        }, {
          date: "05/04/2017",
          weekday: "thursday",
          times: [
            {
              open: "7:30",
              close: "9:00"
            }, {
              open: "11:30",
              close: "14:00"
            }, {
              open: "17:00",
              close: "19:00"
            }, {
              open: "19:30",
              close: "21:30"
            }
          ]
        }, {
          date: "05/05/2017",
          weekday: "friday",
          times: [
            {
              open: "6:30",
              close: "10:00"
            }, {
              open: "11:00",
              close: "14:00"
            }, {
              open: "17:30",
              close: "19:00"
            }, {
              open: "19:30",
              close: "21:00"
            }
          ]
        }, {
          date: "05/06/2017",
          weekday: "saturday",
          times: [
            {
              open: "7:00",
              close: "10:00"
            }, {
              open: "11:00",
              close: "14:30"
            }, {
              open: "17:00",
              close: "19:00"
            }, {
              open: "19:30",
              close: "22:00"
            }
          ]
        }
      ]
    },
    popularTimes: {
      title: "Beliebte Besuchszeiten",
      content: "images/interface/pinkbox.svg"
    },
    isBookable: false,
    isPromoted: false
  },
  belladonna: {
    name: "Bella Donna Restaurant",
    type: "buffet",
    tagline: "Das Beste aus Italien",
    rating: 5,
    numRatings: 398,
    locations: locations.belladonna,
    tags: [tags.pasta, tags.family],
    description: "Lernen Sie SpezialitaÌten aus allen Regionen Italiens (z. B. Lombardei, Emilia Romagna, SuÌdtirol, Kampanien und Toskana) kennen â jeden Abend eine neue Region! Hier finden Sie die grÃ¶Ãte Auswahl an Antipasti, Pasta, Schinken und Desserts auf der AIDAprima.",
    includedInPrice: {
      title: "Inklusive:",
      content: "Alle Speisen und Softdrinks"
    },
    excludedInPrice: {
      title: "Zum Aufpreis",
      content: "Kaffee- und WeinspezialitÃ¤ten"
    },
    openingHours: {
      title: "Ãffnungszeiten",
      content: [
        {
          date: "04/29/2017",
          weekday: "saturday",
          times: [
            {
              open: "7:00",
              close: "10:00"
            }, {
              open: "17:00",
              close: "19:00"
            }, {
              open: "19:30",
              close: "21:00"
            }
          ]
        }, {
          date: "04/30/2017",
          weekday: "sunday",
          times: [
            {
              open: "7:00",
              close: "9:00"
            }, {
              open: "11:00",
              close: "14:00"
            }, {
              open: "17:30",
              close: "19:00"
            }, {
              open: "19:30",
              close: "21:00"
            }
          ]
        }, {
          date: "05/01/2017",
          weekday: "monday",
          times: [
            {
              open: "7:30",
              close: "9:00"
            }, {
              open: "11:30",
              close: "14:00"
            }, {
              open: "17:30",
              close: "19:00"
            }, {
              open: "19:30",
              close: "21:00"
            }
          ]
        }, {
          date: "05/02/2017",
          weekday: "tuesday",
          times: [
            {
              open: "6:30",
              close: "9:30"
            }, {
              open: "18:00",
              close: "19:00"
            }, {
              open: "19:30",
              close: "20:00"
            }
          ]
        }, {
          date: "05/03/2017",
          weekday: "wednesday",
          times: [
            {
              open: "7:00",
              close: "10:00"
            }, {
              open: "11:00",
              close: "14:30"
            }, {
              open: "18:00",
              close: "21:00"
            }
          ]
        }, {
          date: "05/04/2017",
          weekday: "thursday",
          times: [
            {
              open: "7:30",
              close: "9:00"
            }, {
              open: "11:30",
              close: "14:00"
            }, {
              open: "17:00",
              close: "19:00"
            }, {
              open: "19:30",
              close: "21:30"
            }
          ]
        }, {
          date: "05/05/2017",
          weekday: "friday",
          times: [
            {
              open: "6:30",
              close: "10:00"
            }, {
              open: "11:00",
              close: "14:00"
            }, {
              open: "17:30",
              close: "19:00"
            }, {
              open: "19:30",
              close: "21:00"
            }
          ]
        }, {
          date: "05/06/2017",
          weekday: "saturday",
          times: [
            {
              open: "7:00",
              close: "10:00"
            }, {
              open: "11:00",
              close: "14:30"
            }, {
              open: "17:00",
              close: "19:00"
            }, {
              open: "19:30",
              close: "22:00"
            }
          ]
        }
      ]
    },
    popularTimes: {
      title: "Beliebte Besuchszeiten",
      content: "images/interface/pinkbox.svg"
    },
    isBookable: false,
    isPromoted: false
  },
  fuego: {
    name: "Fuego Restaurant",
    type: "buffet",
    tagline: "Das Beste aus Italien",
    rating: 3,
    numRatings: 1187,
    locations: locations.weitewelt,
    tags: [tags.pasta, tags.family],
    description: "Das besonders familienfreundliche Buffet-Restaurant! Unser spezielles Kinder-Buffet mit FischstaÌbchen, Lasagne, HackbaÌllchen u.v.m. erfreut nicht nur die lieben Kleinen, sondern auch ihre Eltern. Burger-, Pizza- und Pasta-Stationen auf Gourmet-Niveau!",
    includedInPrice: {
      title: "Inklusive:",
      content: "Alle Speisen und Softdrinks"
    },
    excludedInPrice: {
      title: "Zum Aufpreis",
      content: "Kaffee- und WeinspezialitÃ¤ten"
    },
    openingHours: {
      title: "Ãffnungszeiten",
      content: [
        {
          date: "04/29/2017",
          weekday: "saturday",
          times: [
            {
              open: "7:00",
              close: "10:00"
            }, {
              open: "17:00",
              close: "19:00"
            }, {
              open: "19:30",
              close: "21:00"
            }
          ]
        }, {
          date: "04/30/2017",
          weekday: "sunday",
          times: [
            {
              open: "7:00",
              close: "9:00"
            }, {
              open: "11:00",
              close: "14:00"
            }, {
              open: "17:30",
              close: "19:00"
            }, {
              open: "19:30",
              close: "21:00"
            }
          ]
        }, {
          date: "05/01/2017",
          weekday: "monday",
          times: [
            {
              open: "7:30",
              close: "9:00"
            }, {
              open: "11:30",
              close: "14:00"
            }, {
              open: "17:30",
              close: "19:00"
            }, {
              open: "19:30",
              close: "21:00"
            }
          ]
        }, {
          date: "05/02/2017",
          weekday: "tuesday",
          times: [
            {
              open: "6:30",
              close: "9:30"
            }, {
              open: "18:00",
              close: "19:00"
            }, {
              open: "19:30",
              close: "20:00"
            }
          ]
        }, {
          date: "05/03/2017",
          weekday: "wednesday",
          times: [
            {
              open: "7:00",
              close: "10:00"
            }, {
              open: "11:00",
              close: "14:30"
            }, {
              open: "18:00",
              close: "21:00"
            }
          ]
        }, {
          date: "05/04/2017",
          weekday: "thursday",
          times: [
            {
              open: "7:30",
              close: "9:00"
            }, {
              open: "11:30",
              close: "14:00"
            }, {
              open: "17:00",
              close: "19:00"
            }, {
              open: "19:30",
              close: "21:30"
            }
          ]
        }, {
          date: "05/05/2017",
          weekday: "friday",
          times: [
            {
              open: "6:30",
              close: "10:00"
            }, {
              open: "11:00",
              close: "14:00"
            }, {
              open: "17:30",
              close: "19:00"
            }, {
              open: "19:30",
              close: "21:00"
            }
          ]
        }, {
          date: "05/06/2017",
          weekday: "saturday",
          times: [
            {
              open: "7:00",
              close: "10:00"
            }, {
              open: "11:00",
              close: "14:30"
            }, {
              open: "17:00",
              close: "19:00"
            }, {
              open: "19:30",
              close: "22:00"
            }
          ]
        }
      ]
    },
    popularTimes: {
      title: "Beliebte Besuchszeiten",
      content: "images/interface/pinkbox.svg"
    },
    isBookable: false,
    isPromoted: false
  },
  casanova: {
    name: "Ristorante Casa Nova",
    type: "service",
    rating: 5,
    numRatings: 544,
    tagline: "VerfuÌhrung auf venezianische Art",
    locations: locations.casanova,
    tags: [tags.pasta, tags.family],
    description: "Lernen Sie SpezialitaÌten aus allen Regionen Italiens (z. B. Lombardei, Emilia Romagna, SuÌdtirol, Kampanien und Toskana) kennen â jeden Abend eine neue Region! Hier finden Sie die grÃ¶Ãte Auswahl an Antipasti, Pasta, Schinken und Desserts auf der AIDAprima.",
    includedInPrice: {
      title: "Inklusive:",
      content: "Alle Speisen"
    },
    excludedInPrice: {
      title: "Zum Aufpreis",
      content: "GetrÃ¤nke"
    },
    openingHours: {
      title: "Ãffnungszeiten",
      content: [
        {
          date: "04/29/2017",
          weekday: "saturday",
          times: [
            {
              open: "7:00",
              close: "10:00"
            }, {
              open: "17:00",
              close: "19:00"
            }, {
              open: "19:30",
              close: "21:00"
            }
          ]
        }, {
          date: "04/30/2017",
          weekday: "sunday",
          times: [
            {
              open: "7:00",
              close: "9:00"
            }, {
              open: "11:00",
              close: "14:00"
            }, {
              open: "17:30",
              close: "19:00"
            }, {
              open: "19:30",
              close: "21:00"
            }
          ]
        }, {
          date: "05/01/2017",
          weekday: "monday",
          times: [
            {
              open: "7:30",
              close: "9:00"
            }, {
              open: "11:30",
              close: "14:00"
            }, {
              open: "17:30",
              close: "19:00"
            }, {
              open: "19:30",
              close: "21:00"
            }
          ]
        }, {
          date: "05/02/2017",
          weekday: "tuesday",
          times: [
            {
              open: "6:30",
              close: "9:30"
            }, {
              open: "18:00",
              close: "19:00"
            }, {
              open: "19:30",
              close: "20:00"
            }
          ]
        }, {
          date: "05/03/2017",
          weekday: "wednesday",
          times: [
            {
              open: "7:00",
              close: "10:00"
            }, {
              open: "11:00",
              close: "14:30"
            }, {
              open: "18:00",
              close: "21:00"
            }
          ]
        }, {
          date: "05/04/2017",
          weekday: "thursday",
          times: [
            {
              open: "7:30",
              close: "9:00"
            }, {
              open: "11:30",
              close: "14:00"
            }, {
              open: "17:00",
              close: "19:00"
            }, {
              open: "19:30",
              close: "21:30"
            }
          ]
        }, {
          date: "05/05/2017",
          weekday: "friday",
          times: [
            {
              open: "6:30",
              close: "10:00"
            }, {
              open: "11:00",
              close: "14:00"
            }, {
              open: "17:30",
              close: "19:00"
            }, {
              open: "19:30",
              close: "21:00"
            }
          ]
        }, {
          date: "05/06/2017",
          weekday: "saturday",
          times: [
            {
              open: "7:00",
              close: "10:00"
            }, {
              open: "11:00",
              close: "14:30"
            }, {
              open: "17:00",
              close: "19:00"
            }, {
              open: "19:30",
              close: "22:00"
            }
          ]
        }
      ]
    },
    popularTimes: {
      title: "Beliebte Besuchszeiten",
      content: "images/interface/pinkbox.svg"
    },
    isBookable: false,
    isPromoted: false
  },
  brauhaus: {
    name: "Brauhaus",
    type: "service",
    tagline: "So a Gaudi",
    rating: 3,
    numRatings: 166,
    locations: locations.brauhaus,
    wayfinding: {
      title: "Wegbeschreibung",
      deck: "Deck 14",
      preview: "moduleImages/interface/deckplanPreview.png",
      content: "direkt neben dem Four Elements"
    },
    coverImage: "moduleImages/eatdrinknightlife/brauhaus.jpg",
    tags: [tags.pasta, tags.family],
    description: "Herzhafte SpezialitÃ¤ten aus dem Alpenland und verschiedene Biersorten aus der bordeigenen Brauerei, gebraut aus Meerwasser nach dem deutschem Reinheitsgebot. Unsere berÃ¼hmte gegrillte Ente mit Blaukraut und KartoffelknÃ¶deln, knusprige Schweinshaxe mit SemmelknÃ¶deln, Kalbsgulasch, Brezeln und Obazda lassen das Herz jeden Feinschmeckers hÃ¶her schlagen.",
    includedInPrice: {
      title: "Inklusive:",
      content: "Alle Speisen"
    },
    excludedInPrice: {
      title: "Zum Aufpreis",
      content: "GetrÃ¤nke"
    },
    minimumAge: {
      title: "Mindestalter",
      content: "ab 65 Jahren"
    },
    popularTimes: {
      title: "Beliebte Besuchszeiten",
      content: "moduleImages/interface/popularTimes.png"
    },
    isBookable: true,
    isPromoted: false,
    openingHours: {
      title: "Ãffnungszeiten",
      content: [
        {
          date: "04/29/2017",
          weekday: "saturday",
          times: [
            {
              open: "7:00",
              close: "10:00"
            }, {
              open: "17:00",
              close: "19:00"
            }, {
              open: "19:30",
              close: "21:00"
            }
          ]
        }, {
          date: "04/30/2017",
          weekday: "sunday",
          times: [
            {
              open: "7:00",
              close: "9:00"
            }, {
              open: "11:00",
              close: "14:00"
            }, {
              open: "17:30",
              close: "19:00"
            }, {
              open: "19:30",
              close: "21:00"
            }
          ]
        }, {
          date: "05/01/2017",
          weekday: "monday",
          times: [
            {
              open: "7:30",
              close: "9:00"
            }, {
              open: "11:30",
              close: "14:00"
            }, {
              open: "17:30",
              close: "19:00"
            }, {
              open: "19:30",
              close: "21:00"
            }
          ]
        }, {
          date: "05/02/2017",
          weekday: "tuesday",
          times: [
            {
              open: "6:30",
              close: "9:30"
            }, {
              open: "18:00",
              close: "19:00"
            }, {
              open: "19:30",
              close: "20:00"
            }
          ]
        }, {
          date: "05/03/2017",
          weekday: "wednesday",
          times: [
            {
              open: "7:00",
              close: "10:00"
            }, {
              open: "11:00",
              close: "14:30"
            }, {
              open: "18:00",
              close: "21:00"
            }
          ]
        }, {
          date: "05/04/2017",
          weekday: "thursday",
          times: [
            {
              open: "7:30",
              close: "9:00"
            }, {
              open: "11:30",
              close: "14:00"
            }, {
              open: "17:00",
              close: "19:00"
            }, {
              open: "19:30",
              close: "21:30"
            }
          ]
        }, {
          date: "05/05/2017",
          weekday: "friday",
          times: [
            {
              open: "6:30",
              close: "10:00"
            }, {
              open: "11:00",
              close: "14:00"
            }, {
              open: "17:30",
              close: "19:00"
            }, {
              open: "19:30",
              close: "21:00"
            }
          ]
        }, {
          date: "05/06/2017",
          weekday: "saturday",
          times: [
            {
              open: "7:00",
              close: "10:00"
            }, {
              open: "11:00",
              close: "14:30"
            }, {
              open: "17:00",
              close: "19:00"
            }, {
              open: "19:30",
              close: "22:00"
            }
          ]
        }
      ]
    }
  }
};


},{"data_locations":"data_locations","data_tags":"data_tags"}],"data_weather":[function(require,module,exports){
exports.weather = {
  weatherForecast: [
    {
      cruiseDay: 0,
      temperaturesPerHour: ["18", "18", "17", "17", "16", "17", "19", "20", "20", "21", "22", "23", "25", "26", "28", "27", "25", "24", "22", "22", "21", "20", "20", "19"],
      rainPerHour: ["0", "0", "0", "10", "10", "20", "20", "20", "20", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
      weatherSymbolPerHour: ["1", "1", "1", "2", "2", "2", "2", "2", "2", "1", "1", "1", "2", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
      temperaturesPerQuarter: ["16", "23", "27", "19"],
      rainPerQuarter: ["10", "20", "0", "10"],
      weatherSymbolPerQuarter: ["1", "1", "1", "2"],
      minTemperature: "16",
      maxTemperature: "28",
      totalSymbol: "1",
      description: "Heute Ã¼berwiegend sonnig, kleinere Schauer.\\nAbends SturmbÃ¶en bis 80 km/h",
      location: locations.DEHAM
    }, {
      cruiseDay: 1,
      temperaturesPerHour: ["18", "18", "17", "17", "16", "17", "19", "20", "20", "21", "22", "23", "25", "26", "28", "27", "25", "24", "22", "22", "21", "20", "20", "19"],
      rainPerHour: ["0", "0", "0", "10", "10", "20", "20", "20", "20", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
      weatherSymbolPerHour: ["1", "1", "1", "2", "2", "2", "2", "2", "2", "1", "1", "1", "2", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
      temperaturesPerQuarter: ["16", "23", "27", "19"],
      rainPerQuarter: ["10", "20", "0", "10"],
      weatherSymbolPerQuarter: ["1", "1", "1", "2"],
      minTemperature: "16",
      maxTemperature: "28",
      totalSymbol: "1",
      description: "Heute Ã¼berwiegend sonnig, kleinere Schauer.\\nAbends SturmbÃ¶en bis 80 km/h",
      location: locations.XXSEA
    }, {
      cruiseDay: 2,
      temperaturesPerHour: ["18", "18", "17", "17", "16", "17", "19", "20", "20", "21", "22", "23", "25", "26", "28", "27", "25", "24", "22", "22", "21", "20", "20", "19"],
      rainPerHour: ["0", "0", "0", "10", "10", "20", "20", "20", "20", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
      weatherSymbolPerHour: ["1", "1", "1", "2", "2", "2", "2", "2", "2", "1", "1", "1", "2", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
      temperaturesPerQuarter: ["16", "23", "27", "19"],
      rainPerQuarter: ["10", "20", "0", "10"],
      weatherSymbolPerQuarter: ["1", "1", "1", "2"],
      minTemperature: "16",
      maxTemperature: "28",
      totalSymbol: "1",
      description: "Heute Ã¼berwiegend sonnig, kleinere Schauer.\\nAbends SturmbÃ¶en bis 80 km/h",
      location: locations.GBSOU
    }, {
      cruiseDay: 3,
      temperaturesPerHour: ["18", "18", "17", "17", "16", "17", "19", "20", "20", "21", "22", "23", "25", "26", "28", "27", "25", "24", "22", "22", "21", "20", "20", "19"],
      rainPerHour: ["0", "0", "0", "10", "10", "20", "20", "20", "20", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
      weatherSymbolPerHour: ["1", "1", "1", "2", "2", "2", "2", "2", "2", "1", "1", "1", "2", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
      temperaturesPerQuarter: ["16", "23", "27", "19"],
      rainPerQuarter: ["10", "20", "0", "10"],
      weatherSymbolPerQuarter: ["1", "1", "1", "2"],
      minTemperature: "16",
      maxTemperature: "28",
      totalSymbol: "1",
      description: "Heute Ã¼berwiegend sonnig, kleinere Schauer.\\nAbends SturmbÃ¶en bis 80 km/h",
      location: locations.FRLEH
    }, {
      cruiseDay: 4,
      temperaturesPerHour: ["18", "18", "17", "17", "16", "17", "19", "20", "20", "21", "22", "23", "25", "26", "28", "27", "25", "24", "22", "22", "21", "20", "20", "19"],
      rainPerHour: ["0", "0", "0", "10", "10", "20", "20", "20", "20", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
      weatherSymbolPerHour: ["1", "1", "1", "2", "2", "2", "2", "2", "2", "1", "1", "1", "2", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
      temperaturesPerQuarter: ["16", "23", "27", "19"],
      rainPerQuarter: ["10", "20", "0", "10"],
      weatherSymbolPerQuarter: ["1", "1", "1", "2"],
      minTemperature: "16",
      maxTemperature: "28",
      totalSymbol: "1",
      description: "Heute Ã¼berwiegend sonnig, kleinere Schauer.\\nAbends SturmbÃ¶en bis 80 km/h",
      location: locations.BEZEE
    }, {
      cruiseDay: 5,
      temperaturesPerHour: ["18", "18", "17", "17", "16", "17", "19", "20", "20", "21", "22", "23", "25", "26", "28", "27", "25", "24", "22", "22", "21", "20", "20", "19"],
      rainPerHour: ["0", "0", "0", "10", "10", "20", "20", "20", "20", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
      weatherSymbolPerHour: ["1", "1", "1", "2", "2", "2", "2", "2", "2", "1", "1", "1", "2", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
      temperaturesPerQuarter: ["16", "23", "27", "19"],
      rainPerQuarter: ["10", "20", "0", "10"],
      weatherSymbolPerQuarter: ["1", "1", "1", "2"],
      minTemperature: "16",
      maxTemperature: "28",
      totalSymbol: "1",
      description: "Heute Ã¼berwiegend sonnig, kleinere Schauer.\\nAbends SturmbÃ¶en bis 80 km/h",
      location: locations.NLRTM
    }, {
      cruiseDay: 6,
      temperaturesPerHour: ["18", "18", "17", "17", "16", "17", "19", "20", "20", "21", "22", "23", "25", "26", "28", "27", "25", "24", "22", "22", "21", "20", "20", "19"],
      rainPerHour: ["0", "0", "0", "10", "10", "20", "20", "20", "20", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
      weatherSymbolPerHour: ["1", "1", "1", "2", "2", "2", "2", "2", "2", "1", "1", "1", "2", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
      temperaturesPerQuarter: ["16", "23", "27", "19"],
      rainPerQuarter: ["10", "20", "0", "10"],
      weatherSymbolPerQuarter: ["1", "1", "1", "2"],
      minTemperature: "16",
      maxTemperature: "28",
      totalSymbol: "1",
      description: "Heute Ã¼berwiegend sonnig, kleinere Schauer.\\nAbends SturmbÃ¶en bis 80 km/h",
      location: locations.XXSEA
    }, {
      cruiseDay: 7,
      temperaturesPerHour: ["18", "18", "17", "17", "16", "17", "19", "20", "20", "21", "22", "23", "25", "26", "28", "27", "25", "24", "22", "22", "21", "20", "20", "19"],
      rainPerHour: ["0", "0", "0", "10", "10", "20", "20", "20", "20", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"],
      weatherSymbolPerHour: ["1", "1", "1", "2", "2", "2", "2", "2", "2", "1", "1", "1", "2", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1", "1"],
      temperaturesPerQuarter: ["16", "23", "27", "19"],
      rainPerQuarter: ["10", "20", "0", "10"],
      weatherSymbolPerQuarter: ["1", "1", "1", "2"],
      minTemperature: "16",
      maxTemperature: "28",
      totalSymbol: "1",
      description: "Heute Ã¼berwiegend sonnig, kleinere Schauer.\\nAbends SturmbÃ¶en bis 80 km/h",
      location: locations.DEHAM
    }
  ]
};


},{}],"imgCarousel":[function(require,module,exports){
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

exports.ImageCarousel = (function(superClass) {
  extend(ImageCarousel, superClass);

  function ImageCarousel(options) {
    var base, base1, base2, card, cards, css, i, imageHolder, j, len, ref, swiper;
    this.options = options != null ? options : {};
    if ((base = this.options).itemSpacing == null) {
      base.itemSpacing = 20;
    }
    if ((base1 = this.options).carouselItems == null) {
      base1.carouselItems = [
        {
          title: "item 1",
          image: "modules/_modulesAssets/placeholderImages/image_01.jpg"
        }, {
          title: "item 2",
          image: "modules/_modulesAssets/placeholderImages/image_02.jpg"
        }, {
          title: "item 3",
          image: "modules/_modulesAssets/placeholderImages/image_03.jpg"
        }, {
          title: "item 4",
          image: "modules/_modulesAssets/placeholderImages/image_04.jpg"
        }
      ];
    }
    if ((base2 = this.options).parallax == null) {
      base2.parallax = true;
    }
    ImageCarousel.__super__.constructor.call(this, this.options);
    css = ".imageCarousel {\n	box-sizing:		border-box;\n	font-family:	Istok Web;\n	padding:			24px;\n	width:				" + Screen.width + "px;\n	color:				#FFFFFF;\n}\n\n\n\n\n";
    Utils.insertCSS(css);
    swiper = new PageComponent({
      width: this.width,
      height: this.height,
      backgroundColor: "green",
      clip: false,
      name: "imgCarouselPageComponent",
      parent: this,
      contentInset: {
        right: this.options.itemSpacing
      },
      scrollVertical: false
    });
    cards = [];
    ref = this.options.carouselItems;
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      card = ref[i];
      imageHolder = new Layer({
        image: card.location.dayImage,
        height: this.height * 2,
        width: this.width * 2,
        name: "image_0" + i
      });
      card = new Layer({
        width: this.width - this.options.itemSpacing * 3,
        backgroundColor: "pink",
        clip: true
      });
      card.height = this.height - (this.options.itemSpacing * 2);
      card.x = this.options.itemSpacing + i * (card.width + this.options.itemSpacing);
      card.parent = swiper.content;
      card.y = Align.center();
      card.name = "card_0" + i;
      card.shadowY = 8;
      card.shadowBlur = 32;
      card.shadowColor = "rgba(0, 0, 0, 0.1)";
      imageHolder.parent = card;
      imageHolder.y = Align.center();
      imageHolder.x = Align.center();
      cards.push({
        card: card,
        image: imageHolder,
        name: card.name
      });
    }
    swiper.content.onMove((function(_this) {
      return function() {
        var item, k, len1, results;
        results = [];
        for (i = k = 0, len1 = cards.length; k < len1; i = ++k) {
          item = cards[i];
          print(item.card.screenFrame.x);
          results.push(item.image.x = Utils.modulate(item.card.screenFrame.x, [_this.options.itemSpacing, -645], [-420, -300]));
        }
        return results;
      };
    })(this));
  }

  ImageCarousel.define('itemSpacing', {
    get: function() {
      return this.options.itemSpacing;
    },
    set: function(value) {
      return this.options.itemSpacing = value;
    }
  });

  ImageCarousel.define('carouselItems', {
    get: function() {
      return this.options.carouselItems;
    },
    set: function(value) {
      return this.options.carouselItems = value;
    }
  });

  ImageCarousel.define('parallax', {
    get: function() {
      return this.options.parallax;
    },
    set: function(value) {
      return this.options.parallax = value;
    }
  });

  return ImageCarousel;

})(Layer);


},{}],"moment":[function(require,module,exports){
;(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    global.moment = factory()
}(this, (function () { 'use strict';

var hookCallback;

function hooks () {
    return hookCallback.apply(null, arguments);
}

// This is done to register the method called with moment()
// without creating circular dependencies.
function setHookCallback (callback) {
    hookCallback = callback;
}

function isArray(input) {
    return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
}

function isObject(input) {
    // IE8 will treat undefined and null as object if it wasn't for
    // input != null
    return input != null && Object.prototype.toString.call(input) === '[object Object]';
}

function isObjectEmpty(obj) {
    var k;
    for (k in obj) {
        // even if its not own property I'd still call it non-empty
        return false;
    }
    return true;
}

function isNumber(input) {
    return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
}

function isDate(input) {
    return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
}

function map(arr, fn) {
    var res = [], i;
    for (i = 0; i < arr.length; ++i) {
        res.push(fn(arr[i], i));
    }
    return res;
}

function hasOwnProp(a, b) {
    return Object.prototype.hasOwnProperty.call(a, b);
}

function extend(a, b) {
    for (var i in b) {
        if (hasOwnProp(b, i)) {
            a[i] = b[i];
        }
    }

    if (hasOwnProp(b, 'toString')) {
        a.toString = b.toString;
    }

    if (hasOwnProp(b, 'valueOf')) {
        a.valueOf = b.valueOf;
    }

    return a;
}

function createUTC (input, format, locale, strict) {
    return createLocalOrUTC(input, format, locale, strict, true).utc();
}

function defaultParsingFlags() {
    // We need to deep clone this object.
    return {
        empty           : false,
        unusedTokens    : [],
        unusedInput     : [],
        overflow        : -2,
        charsLeftOver   : 0,
        nullInput       : false,
        invalidMonth    : null,
        invalidFormat   : false,
        userInvalidated : false,
        iso             : false,
        parsedDateParts : [],
        meridiem        : null
    };
}

function getParsingFlags(m) {
    if (m._pf == null) {
        m._pf = defaultParsingFlags();
    }
    return m._pf;
}

var some;
if (Array.prototype.some) {
    some = Array.prototype.some;
} else {
    some = function (fun) {
        var t = Object(this);
        var len = t.length >>> 0;

        for (var i = 0; i < len; i++) {
            if (i in t && fun.call(this, t[i], i, t)) {
                return true;
            }
        }

        return false;
    };
}

var some$1 = some;

function isValid(m) {
    if (m._isValid == null) {
        var flags = getParsingFlags(m);
        var parsedParts = some$1.call(flags.parsedDateParts, function (i) {
            return i != null;
        });
        var isNowValid = !isNaN(m._d.getTime()) &&
            flags.overflow < 0 &&
            !flags.empty &&
            !flags.invalidMonth &&
            !flags.invalidWeekday &&
            !flags.nullInput &&
            !flags.invalidFormat &&
            !flags.userInvalidated &&
            (!flags.meridiem || (flags.meridiem && parsedParts));

        if (m._strict) {
            isNowValid = isNowValid &&
                flags.charsLeftOver === 0 &&
                flags.unusedTokens.length === 0 &&
                flags.bigHour === undefined;
        }

        if (Object.isFrozen == null || !Object.isFrozen(m)) {
            m._isValid = isNowValid;
        }
        else {
            return isNowValid;
        }
    }
    return m._isValid;
}

function createInvalid (flags) {
    var m = createUTC(NaN);
    if (flags != null) {
        extend(getParsingFlags(m), flags);
    }
    else {
        getParsingFlags(m).userInvalidated = true;
    }

    return m;
}

function isUndefined(input) {
    return input === void 0;
}

// Plugins that add properties should also add the key here (null value),
// so we can properly clone ourselves.
var momentProperties = hooks.momentProperties = [];

function copyConfig(to, from) {
    var i, prop, val;

    if (!isUndefined(from._isAMomentObject)) {
        to._isAMomentObject = from._isAMomentObject;
    }
    if (!isUndefined(from._i)) {
        to._i = from._i;
    }
    if (!isUndefined(from._f)) {
        to._f = from._f;
    }
    if (!isUndefined(from._l)) {
        to._l = from._l;
    }
    if (!isUndefined(from._strict)) {
        to._strict = from._strict;
    }
    if (!isUndefined(from._tzm)) {
        to._tzm = from._tzm;
    }
    if (!isUndefined(from._isUTC)) {
        to._isUTC = from._isUTC;
    }
    if (!isUndefined(from._offset)) {
        to._offset = from._offset;
    }
    if (!isUndefined(from._pf)) {
        to._pf = getParsingFlags(from);
    }
    if (!isUndefined(from._locale)) {
        to._locale = from._locale;
    }

    if (momentProperties.length > 0) {
        for (i in momentProperties) {
            prop = momentProperties[i];
            val = from[prop];
            if (!isUndefined(val)) {
                to[prop] = val;
            }
        }
    }

    return to;
}

var updateInProgress = false;

// Moment prototype object
function Moment(config) {
    copyConfig(this, config);
    this._d = new Date(config._d != null ? config._d.getTime() : NaN);
    if (!this.isValid()) {
        this._d = new Date(NaN);
    }
    // Prevent infinite loop in case updateOffset creates new moment
    // objects.
    if (updateInProgress === false) {
        updateInProgress = true;
        hooks.updateOffset(this);
        updateInProgress = false;
    }
}

function isMoment (obj) {
    return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
}

function absFloor (number) {
    if (number < 0) {
        // -0 -> 0
        return Math.ceil(number) || 0;
    } else {
        return Math.floor(number);
    }
}

function toInt(argumentForCoercion) {
    var coercedNumber = +argumentForCoercion,
        value = 0;

    if (coercedNumber !== 0 && isFinite(coercedNumber)) {
        value = absFloor(coercedNumber);
    }

    return value;
}

// compare two arrays, return the number of differences
function compareArrays(array1, array2, dontConvert) {
    var len = Math.min(array1.length, array2.length),
        lengthDiff = Math.abs(array1.length - array2.length),
        diffs = 0,
        i;
    for (i = 0; i < len; i++) {
        if ((dontConvert && array1[i] !== array2[i]) ||
            (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
            diffs++;
        }
    }
    return diffs + lengthDiff;
}

function warn(msg) {
    if (hooks.suppressDeprecationWarnings === false &&
            (typeof console !==  'undefined') && console.warn) {
        console.warn('Deprecation warning: ' + msg);
    }
}

function deprecate(msg, fn) {
    var firstTime = true;

    return extend(function () {
        if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(null, msg);
        }
        if (firstTime) {
            var args = [];
            var arg;
            for (var i = 0; i < arguments.length; i++) {
                arg = '';
                if (typeof arguments[i] === 'object') {
                    arg += '\n[' + i + '] ';
                    for (var key in arguments[0]) {
                        arg += key + ': ' + arguments[0][key] + ', ';
                    }
                    arg = arg.slice(0, -2); // Remove trailing comma and space
                } else {
                    arg = arguments[i];
                }
                args.push(arg);
            }
            warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
            firstTime = false;
        }
        return fn.apply(this, arguments);
    }, fn);
}

var deprecations = {};

function deprecateSimple(name, msg) {
    if (hooks.deprecationHandler != null) {
        hooks.deprecationHandler(name, msg);
    }
    if (!deprecations[name]) {
        warn(msg);
        deprecations[name] = true;
    }
}

hooks.suppressDeprecationWarnings = false;
hooks.deprecationHandler = null;

function isFunction(input) {
    return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
}

function set (config) {
    var prop, i;
    for (i in config) {
        prop = config[i];
        if (isFunction(prop)) {
            this[i] = prop;
        } else {
            this['_' + i] = prop;
        }
    }
    this._config = config;
    // Lenient ordinal parsing accepts just a number in addition to
    // number + (possibly) stuff coming from _ordinalParseLenient.
    this._ordinalParseLenient = new RegExp(this._ordinalParse.source + '|' + (/\d{1,2}/).source);
}

function mergeConfigs(parentConfig, childConfig) {
    var res = extend({}, parentConfig), prop;
    for (prop in childConfig) {
        if (hasOwnProp(childConfig, prop)) {
            if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                res[prop] = {};
                extend(res[prop], parentConfig[prop]);
                extend(res[prop], childConfig[prop]);
            } else if (childConfig[prop] != null) {
                res[prop] = childConfig[prop];
            } else {
                delete res[prop];
            }
        }
    }
    for (prop in parentConfig) {
        if (hasOwnProp(parentConfig, prop) &&
                !hasOwnProp(childConfig, prop) &&
                isObject(parentConfig[prop])) {
            // make sure changes to properties don't modify parent config
            res[prop] = extend({}, res[prop]);
        }
    }
    return res;
}

function Locale(config) {
    if (config != null) {
        this.set(config);
    }
}

var keys;

if (Object.keys) {
    keys = Object.keys;
} else {
    keys = function (obj) {
        var i, res = [];
        for (i in obj) {
            if (hasOwnProp(obj, i)) {
                res.push(i);
            }
        }
        return res;
    };
}

var keys$1 = keys;

var defaultCalendar = {
    sameDay : '[Today at] LT',
    nextDay : '[Tomorrow at] LT',
    nextWeek : 'dddd [at] LT',
    lastDay : '[Yesterday at] LT',
    lastWeek : '[Last] dddd [at] LT',
    sameElse : 'L'
};

function calendar (key, mom, now) {
    var output = this._calendar[key] || this._calendar['sameElse'];
    return isFunction(output) ? output.call(mom, now) : output;
}

var defaultLongDateFormat = {
    LTS  : 'h:mm:ss A',
    LT   : 'h:mm A',
    L    : 'MM/DD/YYYY',
    LL   : 'MMMM D, YYYY',
    LLL  : 'MMMM D, YYYY h:mm A',
    LLLL : 'dddd, MMMM D, YYYY h:mm A'
};

function longDateFormat (key) {
    var format = this._longDateFormat[key],
        formatUpper = this._longDateFormat[key.toUpperCase()];

    if (format || !formatUpper) {
        return format;
    }

    this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
        return val.slice(1);
    });

    return this._longDateFormat[key];
}

var defaultInvalidDate = 'Invalid date';

function invalidDate () {
    return this._invalidDate;
}

var defaultOrdinal = '%d';
var defaultOrdinalParse = /\d{1,2}/;

function ordinal (number) {
    return this._ordinal.replace('%d', number);
}

var defaultRelativeTime = {
    future : 'in %s',
    past   : '%s ago',
    s  : 'a few seconds',
    m  : 'a minute',
    mm : '%d minutes',
    h  : 'an hour',
    hh : '%d hours',
    d  : 'a day',
    dd : '%d days',
    M  : 'a month',
    MM : '%d months',
    y  : 'a year',
    yy : '%d years'
};

function relativeTime (number, withoutSuffix, string, isFuture) {
    var output = this._relativeTime[string];
    return (isFunction(output)) ?
        output(number, withoutSuffix, string, isFuture) :
        output.replace(/%d/i, number);
}

function pastFuture (diff, output) {
    var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
    return isFunction(format) ? format(output) : format.replace(/%s/i, output);
}

var aliases = {};

function addUnitAlias (unit, shorthand) {
    var lowerCase = unit.toLowerCase();
    aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
}

function normalizeUnits(units) {
    return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
}

function normalizeObjectUnits(inputObject) {
    var normalizedInput = {},
        normalizedProp,
        prop;

    for (prop in inputObject) {
        if (hasOwnProp(inputObject, prop)) {
            normalizedProp = normalizeUnits(prop);
            if (normalizedProp) {
                normalizedInput[normalizedProp] = inputObject[prop];
            }
        }
    }

    return normalizedInput;
}

var priorities = {};

function addUnitPriority(unit, priority) {
    priorities[unit] = priority;
}

function getPrioritizedUnits(unitsObj) {
    var units = [];
    for (var u in unitsObj) {
        units.push({unit: u, priority: priorities[u]});
    }
    units.sort(function (a, b) {
        return a.priority - b.priority;
    });
    return units;
}

function makeGetSet (unit, keepTime) {
    return function (value) {
        if (value != null) {
            set$1(this, unit, value);
            hooks.updateOffset(this, keepTime);
            return this;
        } else {
            return get(this, unit);
        }
    };
}

function get (mom, unit) {
    return mom.isValid() ?
        mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
}

function set$1 (mom, unit, value) {
    if (mom.isValid()) {
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
    }
}

// MOMENTS

function stringGet (units) {
    units = normalizeUnits(units);
    if (isFunction(this[units])) {
        return this[units]();
    }
    return this;
}


function stringSet (units, value) {
    if (typeof units === 'object') {
        units = normalizeObjectUnits(units);
        var prioritized = getPrioritizedUnits(units);
        for (var i = 0; i < prioritized.length; i++) {
            this[prioritized[i].unit](units[prioritized[i].unit]);
        }
    } else {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
            return this[units](value);
        }
    }
    return this;
}

function zeroFill(number, targetLength, forceSign) {
    var absNumber = '' + Math.abs(number),
        zerosToFill = targetLength - absNumber.length,
        sign = number >= 0;
    return (sign ? (forceSign ? '+' : '') : '-') +
        Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
}

var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

var formatFunctions = {};

var formatTokenFunctions = {};

// token:    'M'
// padded:   ['MM', 2]
// ordinal:  'Mo'
// callback: function () { this.month() + 1 }
function addFormatToken (token, padded, ordinal, callback) {
    var func = callback;
    if (typeof callback === 'string') {
        func = function () {
            return this[callback]();
        };
    }
    if (token) {
        formatTokenFunctions[token] = func;
    }
    if (padded) {
        formatTokenFunctions[padded[0]] = function () {
            return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
        };
    }
    if (ordinal) {
        formatTokenFunctions[ordinal] = function () {
            return this.localeData().ordinal(func.apply(this, arguments), token);
        };
    }
}

function removeFormattingTokens(input) {
    if (input.match(/\[[\s\S]/)) {
        return input.replace(/^\[|\]$/g, '');
    }
    return input.replace(/\\/g, '');
}

function makeFormatFunction(format) {
    var array = format.match(formattingTokens), i, length;

    for (i = 0, length = array.length; i < length; i++) {
        if (formatTokenFunctions[array[i]]) {
            array[i] = formatTokenFunctions[array[i]];
        } else {
            array[i] = removeFormattingTokens(array[i]);
        }
    }

    return function (mom) {
        var output = '', i;
        for (i = 0; i < length; i++) {
            output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
        }
        return output;
    };
}

// format date using native date object
function formatMoment(m, format) {
    if (!m.isValid()) {
        return m.localeData().invalidDate();
    }

    format = expandFormat(format, m.localeData());
    formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

    return formatFunctions[format](m);
}

function expandFormat(format, locale) {
    var i = 5;

    function replaceLongDateFormatTokens(input) {
        return locale.longDateFormat(input) || input;
    }

    localFormattingTokens.lastIndex = 0;
    while (i >= 0 && localFormattingTokens.test(format)) {
        format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
        localFormattingTokens.lastIndex = 0;
        i -= 1;
    }

    return format;
}

var match1         = /\d/;            //       0 - 9
var match2         = /\d\d/;          //      00 - 99
var match3         = /\d{3}/;         //     000 - 999
var match4         = /\d{4}/;         //    0000 - 9999
var match6         = /[+-]?\d{6}/;    // -999999 - 999999
var match1to2      = /\d\d?/;         //       0 - 99
var match3to4      = /\d\d\d\d?/;     //     999 - 9999
var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
var match1to3      = /\d{1,3}/;       //       0 - 999
var match1to4      = /\d{1,4}/;       //       0 - 9999
var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

var matchUnsigned  = /\d+/;           //       0 - inf
var matchSigned    = /[+-]?\d+/;      //    -inf - inf

var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

// any word (or two) characters or numbers including two/three word month in arabic.
// includes scottish gaelic two word and hyphenated months
var matchWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;


var regexes = {};

function addRegexToken (token, regex, strictRegex) {
    regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
        return (isStrict && strictRegex) ? strictRegex : regex;
    };
}

function getParseRegexForToken (token, config) {
    if (!hasOwnProp(regexes, token)) {
        return new RegExp(unescapeFormat(token));
    }

    return regexes[token](config._strict, config._locale);
}

// Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
function unescapeFormat(s) {
    return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
        return p1 || p2 || p3 || p4;
    }));
}

function regexEscape(s) {
    return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
}

var tokens = {};

function addParseToken (token, callback) {
    var i, func = callback;
    if (typeof token === 'string') {
        token = [token];
    }
    if (isNumber(callback)) {
        func = function (input, array) {
            array[callback] = toInt(input);
        };
    }
    for (i = 0; i < token.length; i++) {
        tokens[token[i]] = func;
    }
}

function addWeekParseToken (token, callback) {
    addParseToken(token, function (input, array, config, token) {
        config._w = config._w || {};
        callback(input, config._w, config, token);
    });
}

function addTimeToArrayFromToken(token, input, config) {
    if (input != null && hasOwnProp(tokens, token)) {
        tokens[token](input, config._a, config, token);
    }
}

var YEAR = 0;
var MONTH = 1;
var DATE = 2;
var HOUR = 3;
var MINUTE = 4;
var SECOND = 5;
var MILLISECOND = 6;
var WEEK = 7;
var WEEKDAY = 8;

var indexOf;

if (Array.prototype.indexOf) {
    indexOf = Array.prototype.indexOf;
} else {
    indexOf = function (o) {
        // I know
        var i;
        for (i = 0; i < this.length; ++i) {
            if (this[i] === o) {
                return i;
            }
        }
        return -1;
    };
}

var indexOf$1 = indexOf;

function daysInMonth(year, month) {
    return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
}

// FORMATTING

addFormatToken('M', ['MM', 2], 'Mo', function () {
    return this.month() + 1;
});

addFormatToken('MMM', 0, 0, function (format) {
    return this.localeData().monthsShort(this, format);
});

addFormatToken('MMMM', 0, 0, function (format) {
    return this.localeData().months(this, format);
});

// ALIASES

addUnitAlias('month', 'M');

// PRIORITY

addUnitPriority('month', 8);

// PARSING

addRegexToken('M',    match1to2);
addRegexToken('MM',   match1to2, match2);
addRegexToken('MMM',  function (isStrict, locale) {
    return locale.monthsShortRegex(isStrict);
});
addRegexToken('MMMM', function (isStrict, locale) {
    return locale.monthsRegex(isStrict);
});

addParseToken(['M', 'MM'], function (input, array) {
    array[MONTH] = toInt(input) - 1;
});

addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
    var month = config._locale.monthsParse(input, token, config._strict);
    // if we didn't find a month name, mark the date as invalid.
    if (month != null) {
        array[MONTH] = month;
    } else {
        getParsingFlags(config).invalidMonth = input;
    }
});

// LOCALES

var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
function localeMonths (m, format) {
    if (!m) {
        return this._months;
    }
    return isArray(this._months) ? this._months[m.month()] :
        this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
}

var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
function localeMonthsShort (m, format) {
    if (!m) {
        return this._monthsShort;
    }
    return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
        this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
}

function handleStrictParse(monthName, format, strict) {
    var i, ii, mom, llc = monthName.toLocaleLowerCase();
    if (!this._monthsParse) {
        // this is not used
        this._monthsParse = [];
        this._longMonthsParse = [];
        this._shortMonthsParse = [];
        for (i = 0; i < 12; ++i) {
            mom = createUTC([2000, i]);
            this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
            this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
        }
    }

    if (strict) {
        if (format === 'MMM') {
            ii = indexOf$1.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf$1.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
        }
    } else {
        if (format === 'MMM') {
            ii = indexOf$1.call(this._shortMonthsParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf$1.call(this._longMonthsParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
        }
    }
}

function localeMonthsParse (monthName, format, strict) {
    var i, mom, regex;

    if (this._monthsParseExact) {
        return handleStrictParse.call(this, monthName, format, strict);
    }

    if (!this._monthsParse) {
        this._monthsParse = [];
        this._longMonthsParse = [];
        this._shortMonthsParse = [];
    }

    // TODO: add sorting
    // Sorting makes sure if one month (or abbr) is a prefix of another
    // see sorting in computeMonthsParse
    for (i = 0; i < 12; i++) {
        // make the regex if we don't have it already
        mom = createUTC([2000, i]);
        if (strict && !this._longMonthsParse[i]) {
            this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
            this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
        }
        if (!strict && !this._monthsParse[i]) {
            regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
            this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
        }
        // test the regex
        if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
            return i;
        } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
            return i;
        } else if (!strict && this._monthsParse[i].test(monthName)) {
            return i;
        }
    }
}

// MOMENTS

function setMonth (mom, value) {
    var dayOfMonth;

    if (!mom.isValid()) {
        // No op
        return mom;
    }

    if (typeof value === 'string') {
        if (/^\d+$/.test(value)) {
            value = toInt(value);
        } else {
            value = mom.localeData().monthsParse(value);
            // TODO: Another silent failure?
            if (!isNumber(value)) {
                return mom;
            }
        }
    }

    dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
    mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
    return mom;
}

function getSetMonth (value) {
    if (value != null) {
        setMonth(this, value);
        hooks.updateOffset(this, true);
        return this;
    } else {
        return get(this, 'Month');
    }
}

function getDaysInMonth () {
    return daysInMonth(this.year(), this.month());
}

var defaultMonthsShortRegex = matchWord;
function monthsShortRegex (isStrict) {
    if (this._monthsParseExact) {
        if (!hasOwnProp(this, '_monthsRegex')) {
            computeMonthsParse.call(this);
        }
        if (isStrict) {
            return this._monthsShortStrictRegex;
        } else {
            return this._monthsShortRegex;
        }
    } else {
        if (!hasOwnProp(this, '_monthsShortRegex')) {
            this._monthsShortRegex = defaultMonthsShortRegex;
        }
        return this._monthsShortStrictRegex && isStrict ?
            this._monthsShortStrictRegex : this._monthsShortRegex;
    }
}

var defaultMonthsRegex = matchWord;
function monthsRegex (isStrict) {
    if (this._monthsParseExact) {
        if (!hasOwnProp(this, '_monthsRegex')) {
            computeMonthsParse.call(this);
        }
        if (isStrict) {
            return this._monthsStrictRegex;
        } else {
            return this._monthsRegex;
        }
    } else {
        if (!hasOwnProp(this, '_monthsRegex')) {
            this._monthsRegex = defaultMonthsRegex;
        }
        return this._monthsStrictRegex && isStrict ?
            this._monthsStrictRegex : this._monthsRegex;
    }
}

function computeMonthsParse () {
    function cmpLenRev(a, b) {
        return b.length - a.length;
    }

    var shortPieces = [], longPieces = [], mixedPieces = [],
        i, mom;
    for (i = 0; i < 12; i++) {
        // make the regex if we don't have it already
        mom = createUTC([2000, i]);
        shortPieces.push(this.monthsShort(mom, ''));
        longPieces.push(this.months(mom, ''));
        mixedPieces.push(this.months(mom, ''));
        mixedPieces.push(this.monthsShort(mom, ''));
    }
    // Sorting makes sure if one month (or abbr) is a prefix of another it
    // will match the longer piece.
    shortPieces.sort(cmpLenRev);
    longPieces.sort(cmpLenRev);
    mixedPieces.sort(cmpLenRev);
    for (i = 0; i < 12; i++) {
        shortPieces[i] = regexEscape(shortPieces[i]);
        longPieces[i] = regexEscape(longPieces[i]);
    }
    for (i = 0; i < 24; i++) {
        mixedPieces[i] = regexEscape(mixedPieces[i]);
    }

    this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
    this._monthsShortRegex = this._monthsRegex;
    this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
    this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
}

// FORMATTING

addFormatToken('Y', 0, 0, function () {
    var y = this.year();
    return y <= 9999 ? '' + y : '+' + y;
});

addFormatToken(0, ['YY', 2], 0, function () {
    return this.year() % 100;
});

addFormatToken(0, ['YYYY',   4],       0, 'year');
addFormatToken(0, ['YYYYY',  5],       0, 'year');
addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

// ALIASES

addUnitAlias('year', 'y');

// PRIORITIES

addUnitPriority('year', 1);

// PARSING

addRegexToken('Y',      matchSigned);
addRegexToken('YY',     match1to2, match2);
addRegexToken('YYYY',   match1to4, match4);
addRegexToken('YYYYY',  match1to6, match6);
addRegexToken('YYYYYY', match1to6, match6);

addParseToken(['YYYYY', 'YYYYYY'], YEAR);
addParseToken('YYYY', function (input, array) {
    array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
});
addParseToken('YY', function (input, array) {
    array[YEAR] = hooks.parseTwoDigitYear(input);
});
addParseToken('Y', function (input, array) {
    array[YEAR] = parseInt(input, 10);
});

// HELPERS

function daysInYear(year) {
    return isLeapYear(year) ? 366 : 365;
}

function isLeapYear(year) {
    return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
}

// HOOKS

hooks.parseTwoDigitYear = function (input) {
    return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
};

// MOMENTS

var getSetYear = makeGetSet('FullYear', true);

function getIsLeapYear () {
    return isLeapYear(this.year());
}

function createDate (y, m, d, h, M, s, ms) {
    //can't just apply() to create a date:
    //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
    var date = new Date(y, m, d, h, M, s, ms);

    //the date constructor remaps years 0-99 to 1900-1999
    if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
        date.setFullYear(y);
    }
    return date;
}

function createUTCDate (y) {
    var date = new Date(Date.UTC.apply(null, arguments));

    //the Date.UTC function remaps years 0-99 to 1900-1999
    if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
        date.setUTCFullYear(y);
    }
    return date;
}

// start-of-first-week - start-of-year
function firstWeekOffset(year, dow, doy) {
    var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
        fwd = 7 + dow - doy,
        // first-week day local weekday -- which local weekday is fwd
        fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

    return -fwdlw + fwd - 1;
}

//http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
    var localWeekday = (7 + weekday - dow) % 7,
        weekOffset = firstWeekOffset(year, dow, doy),
        dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
        resYear, resDayOfYear;

    if (dayOfYear <= 0) {
        resYear = year - 1;
        resDayOfYear = daysInYear(resYear) + dayOfYear;
    } else if (dayOfYear > daysInYear(year)) {
        resYear = year + 1;
        resDayOfYear = dayOfYear - daysInYear(year);
    } else {
        resYear = year;
        resDayOfYear = dayOfYear;
    }

    return {
        year: resYear,
        dayOfYear: resDayOfYear
    };
}

function weekOfYear(mom, dow, doy) {
    var weekOffset = firstWeekOffset(mom.year(), dow, doy),
        week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
        resWeek, resYear;

    if (week < 1) {
        resYear = mom.year() - 1;
        resWeek = week + weeksInYear(resYear, dow, doy);
    } else if (week > weeksInYear(mom.year(), dow, doy)) {
        resWeek = week - weeksInYear(mom.year(), dow, doy);
        resYear = mom.year() + 1;
    } else {
        resYear = mom.year();
        resWeek = week;
    }

    return {
        week: resWeek,
        year: resYear
    };
}

function weeksInYear(year, dow, doy) {
    var weekOffset = firstWeekOffset(year, dow, doy),
        weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
    return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
}

// FORMATTING

addFormatToken('w', ['ww', 2], 'wo', 'week');
addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

// ALIASES

addUnitAlias('week', 'w');
addUnitAlias('isoWeek', 'W');

// PRIORITIES

addUnitPriority('week', 5);
addUnitPriority('isoWeek', 5);

// PARSING

addRegexToken('w',  match1to2);
addRegexToken('ww', match1to2, match2);
addRegexToken('W',  match1to2);
addRegexToken('WW', match1to2, match2);

addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
    week[token.substr(0, 1)] = toInt(input);
});

// HELPERS

// LOCALES

function localeWeek (mom) {
    return weekOfYear(mom, this._week.dow, this._week.doy).week;
}

var defaultLocaleWeek = {
    dow : 0, // Sunday is the first day of the week.
    doy : 6  // The week that contains Jan 1st is the first week of the year.
};

function localeFirstDayOfWeek () {
    return this._week.dow;
}

function localeFirstDayOfYear () {
    return this._week.doy;
}

// MOMENTS

function getSetWeek (input) {
    var week = this.localeData().week(this);
    return input == null ? week : this.add((input - week) * 7, 'd');
}

function getSetISOWeek (input) {
    var week = weekOfYear(this, 1, 4).week;
    return input == null ? week : this.add((input - week) * 7, 'd');
}

// FORMATTING

addFormatToken('d', 0, 'do', 'day');

addFormatToken('dd', 0, 0, function (format) {
    return this.localeData().weekdaysMin(this, format);
});

addFormatToken('ddd', 0, 0, function (format) {
    return this.localeData().weekdaysShort(this, format);
});

addFormatToken('dddd', 0, 0, function (format) {
    return this.localeData().weekdays(this, format);
});

addFormatToken('e', 0, 0, 'weekday');
addFormatToken('E', 0, 0, 'isoWeekday');

// ALIASES

addUnitAlias('day', 'd');
addUnitAlias('weekday', 'e');
addUnitAlias('isoWeekday', 'E');

// PRIORITY
addUnitPriority('day', 11);
addUnitPriority('weekday', 11);
addUnitPriority('isoWeekday', 11);

// PARSING

addRegexToken('d',    match1to2);
addRegexToken('e',    match1to2);
addRegexToken('E',    match1to2);
addRegexToken('dd',   function (isStrict, locale) {
    return locale.weekdaysMinRegex(isStrict);
});
addRegexToken('ddd',   function (isStrict, locale) {
    return locale.weekdaysShortRegex(isStrict);
});
addRegexToken('dddd',   function (isStrict, locale) {
    return locale.weekdaysRegex(isStrict);
});

addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
    var weekday = config._locale.weekdaysParse(input, token, config._strict);
    // if we didn't get a weekday name, mark the date as invalid
    if (weekday != null) {
        week.d = weekday;
    } else {
        getParsingFlags(config).invalidWeekday = input;
    }
});

addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
    week[token] = toInt(input);
});

// HELPERS

function parseWeekday(input, locale) {
    if (typeof input !== 'string') {
        return input;
    }

    if (!isNaN(input)) {
        return parseInt(input, 10);
    }

    input = locale.weekdaysParse(input);
    if (typeof input === 'number') {
        return input;
    }

    return null;
}

function parseIsoWeekday(input, locale) {
    if (typeof input === 'string') {
        return locale.weekdaysParse(input) % 7 || 7;
    }
    return isNaN(input) ? null : input;
}

// LOCALES

var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
function localeWeekdays (m, format) {
    if (!m) {
        return this._weekdays;
    }
    return isArray(this._weekdays) ? this._weekdays[m.day()] :
        this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
}

var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
function localeWeekdaysShort (m) {
    return (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
}

var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
function localeWeekdaysMin (m) {
    return (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
}

function handleStrictParse$1(weekdayName, format, strict) {
    var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
    if (!this._weekdaysParse) {
        this._weekdaysParse = [];
        this._shortWeekdaysParse = [];
        this._minWeekdaysParse = [];

        for (i = 0; i < 7; ++i) {
            mom = createUTC([2000, 1]).day(i);
            this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
            this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
            this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
        }
    }

    if (strict) {
        if (format === 'dddd') {
            ii = indexOf$1.call(this._weekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else if (format === 'ddd') {
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        }
    } else {
        if (format === 'dddd') {
            ii = indexOf$1.call(this._weekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else if (format === 'ddd') {
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._weekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        } else {
            ii = indexOf$1.call(this._minWeekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._weekdaysParse, llc);
            if (ii !== -1) {
                return ii;
            }
            ii = indexOf$1.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
        }
    }
}

function localeWeekdaysParse (weekdayName, format, strict) {
    var i, mom, regex;

    if (this._weekdaysParseExact) {
        return handleStrictParse$1.call(this, weekdayName, format, strict);
    }

    if (!this._weekdaysParse) {
        this._weekdaysParse = [];
        this._minWeekdaysParse = [];
        this._shortWeekdaysParse = [];
        this._fullWeekdaysParse = [];
    }

    for (i = 0; i < 7; i++) {
        // make the regex if we don't have it already

        mom = createUTC([2000, 1]).day(i);
        if (strict && !this._fullWeekdaysParse[i]) {
            this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\.?') + '$', 'i');
            this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\.?') + '$', 'i');
            this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\.?') + '$', 'i');
        }
        if (!this._weekdaysParse[i]) {
            regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
            this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
        }
        // test the regex
        if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
            return i;
        } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
            return i;
        } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
            return i;
        } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
            return i;
        }
    }
}

// MOMENTS

function getSetDayOfWeek (input) {
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }
    var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
    if (input != null) {
        input = parseWeekday(input, this.localeData());
        return this.add(input - day, 'd');
    } else {
        return day;
    }
}

function getSetLocaleDayOfWeek (input) {
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }
    var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
    return input == null ? weekday : this.add(input - weekday, 'd');
}

function getSetISODayOfWeek (input) {
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }

    // behaves the same as moment#day except
    // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
    // as a setter, sunday should belong to the previous week.

    if (input != null) {
        var weekday = parseIsoWeekday(input, this.localeData());
        return this.day(this.day() % 7 ? weekday : weekday - 7);
    } else {
        return this.day() || 7;
    }
}

var defaultWeekdaysRegex = matchWord;
function weekdaysRegex (isStrict) {
    if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
        }
        if (isStrict) {
            return this._weekdaysStrictRegex;
        } else {
            return this._weekdaysRegex;
        }
    } else {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
            this._weekdaysRegex = defaultWeekdaysRegex;
        }
        return this._weekdaysStrictRegex && isStrict ?
            this._weekdaysStrictRegex : this._weekdaysRegex;
    }
}

var defaultWeekdaysShortRegex = matchWord;
function weekdaysShortRegex (isStrict) {
    if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
        }
        if (isStrict) {
            return this._weekdaysShortStrictRegex;
        } else {
            return this._weekdaysShortRegex;
        }
    } else {
        if (!hasOwnProp(this, '_weekdaysShortRegex')) {
            this._weekdaysShortRegex = defaultWeekdaysShortRegex;
        }
        return this._weekdaysShortStrictRegex && isStrict ?
            this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
    }
}

var defaultWeekdaysMinRegex = matchWord;
function weekdaysMinRegex (isStrict) {
    if (this._weekdaysParseExact) {
        if (!hasOwnProp(this, '_weekdaysRegex')) {
            computeWeekdaysParse.call(this);
        }
        if (isStrict) {
            return this._weekdaysMinStrictRegex;
        } else {
            return this._weekdaysMinRegex;
        }
    } else {
        if (!hasOwnProp(this, '_weekdaysMinRegex')) {
            this._weekdaysMinRegex = defaultWeekdaysMinRegex;
        }
        return this._weekdaysMinStrictRegex && isStrict ?
            this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
    }
}


function computeWeekdaysParse () {
    function cmpLenRev(a, b) {
        return b.length - a.length;
    }

    var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
        i, mom, minp, shortp, longp;
    for (i = 0; i < 7; i++) {
        // make the regex if we don't have it already
        mom = createUTC([2000, 1]).day(i);
        minp = this.weekdaysMin(mom, '');
        shortp = this.weekdaysShort(mom, '');
        longp = this.weekdays(mom, '');
        minPieces.push(minp);
        shortPieces.push(shortp);
        longPieces.push(longp);
        mixedPieces.push(minp);
        mixedPieces.push(shortp);
        mixedPieces.push(longp);
    }
    // Sorting makes sure if one weekday (or abbr) is a prefix of another it
    // will match the longer piece.
    minPieces.sort(cmpLenRev);
    shortPieces.sort(cmpLenRev);
    longPieces.sort(cmpLenRev);
    mixedPieces.sort(cmpLenRev);
    for (i = 0; i < 7; i++) {
        shortPieces[i] = regexEscape(shortPieces[i]);
        longPieces[i] = regexEscape(longPieces[i]);
        mixedPieces[i] = regexEscape(mixedPieces[i]);
    }

    this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
    this._weekdaysShortRegex = this._weekdaysRegex;
    this._weekdaysMinRegex = this._weekdaysRegex;

    this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
    this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
    this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
}

// FORMATTING

function hFormat() {
    return this.hours() % 12 || 12;
}

function kFormat() {
    return this.hours() || 24;
}

addFormatToken('H', ['HH', 2], 0, 'hour');
addFormatToken('h', ['hh', 2], 0, hFormat);
addFormatToken('k', ['kk', 2], 0, kFormat);

addFormatToken('hmm', 0, 0, function () {
    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
});

addFormatToken('hmmss', 0, 0, function () {
    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
        zeroFill(this.seconds(), 2);
});

addFormatToken('Hmm', 0, 0, function () {
    return '' + this.hours() + zeroFill(this.minutes(), 2);
});

addFormatToken('Hmmss', 0, 0, function () {
    return '' + this.hours() + zeroFill(this.minutes(), 2) +
        zeroFill(this.seconds(), 2);
});

function meridiem (token, lowercase) {
    addFormatToken(token, 0, 0, function () {
        return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
    });
}

meridiem('a', true);
meridiem('A', false);

// ALIASES

addUnitAlias('hour', 'h');

// PRIORITY
addUnitPriority('hour', 13);

// PARSING

function matchMeridiem (isStrict, locale) {
    return locale._meridiemParse;
}

addRegexToken('a',  matchMeridiem);
addRegexToken('A',  matchMeridiem);
addRegexToken('H',  match1to2);
addRegexToken('h',  match1to2);
addRegexToken('HH', match1to2, match2);
addRegexToken('hh', match1to2, match2);

addRegexToken('hmm', match3to4);
addRegexToken('hmmss', match5to6);
addRegexToken('Hmm', match3to4);
addRegexToken('Hmmss', match5to6);

addParseToken(['H', 'HH'], HOUR);
addParseToken(['a', 'A'], function (input, array, config) {
    config._isPm = config._locale.isPM(input);
    config._meridiem = input;
});
addParseToken(['h', 'hh'], function (input, array, config) {
    array[HOUR] = toInt(input);
    getParsingFlags(config).bigHour = true;
});
addParseToken('hmm', function (input, array, config) {
    var pos = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos));
    array[MINUTE] = toInt(input.substr(pos));
    getParsingFlags(config).bigHour = true;
});
addParseToken('hmmss', function (input, array, config) {
    var pos1 = input.length - 4;
    var pos2 = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos1));
    array[MINUTE] = toInt(input.substr(pos1, 2));
    array[SECOND] = toInt(input.substr(pos2));
    getParsingFlags(config).bigHour = true;
});
addParseToken('Hmm', function (input, array, config) {
    var pos = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos));
    array[MINUTE] = toInt(input.substr(pos));
});
addParseToken('Hmmss', function (input, array, config) {
    var pos1 = input.length - 4;
    var pos2 = input.length - 2;
    array[HOUR] = toInt(input.substr(0, pos1));
    array[MINUTE] = toInt(input.substr(pos1, 2));
    array[SECOND] = toInt(input.substr(pos2));
});

// LOCALES

function localeIsPM (input) {
    // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
    // Using charAt should be more compatible.
    return ((input + '').toLowerCase().charAt(0) === 'p');
}

var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
function localeMeridiem (hours, minutes, isLower) {
    if (hours > 11) {
        return isLower ? 'pm' : 'PM';
    } else {
        return isLower ? 'am' : 'AM';
    }
}


// MOMENTS

// Setting the hour should keep the time, because the user explicitly
// specified which hour he wants. So trying to maintain the same hour (in
// a new timezone) makes sense. Adding/subtracting hours does not follow
// this rule.
var getSetHour = makeGetSet('Hours', true);

// months
// week
// weekdays
// meridiem
var baseConfig = {
    calendar: defaultCalendar,
    longDateFormat: defaultLongDateFormat,
    invalidDate: defaultInvalidDate,
    ordinal: defaultOrdinal,
    ordinalParse: defaultOrdinalParse,
    relativeTime: defaultRelativeTime,

    months: defaultLocaleMonths,
    monthsShort: defaultLocaleMonthsShort,

    week: defaultLocaleWeek,

    weekdays: defaultLocaleWeekdays,
    weekdaysMin: defaultLocaleWeekdaysMin,
    weekdaysShort: defaultLocaleWeekdaysShort,

    meridiemParse: defaultLocaleMeridiemParse
};

// internal storage for locale config files
var locales = {};
var localeFamilies = {};
var globalLocale;

function normalizeLocale(key) {
    return key ? key.toLowerCase().replace('_', '-') : key;
}

// pick the locale from the array
// try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
// substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
function chooseLocale(names) {
    var i = 0, j, next, locale, split;

    while (i < names.length) {
        split = normalizeLocale(names[i]).split('-');
        j = split.length;
        next = normalizeLocale(names[i + 1]);
        next = next ? next.split('-') : null;
        while (j > 0) {
            locale = loadLocale(split.slice(0, j).join('-'));
            if (locale) {
                return locale;
            }
            if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                //the next array item is better than a shallower substring of this one
                break;
            }
            j--;
        }
        i++;
    }
    return null;
}

function loadLocale(name) {
    var oldLocale = null;
    // TODO: Find a better way to register and load all the locales in Node
    if (!locales[name] && (typeof module !== 'undefined') &&
            module && module.exports) {
        try {
            oldLocale = globalLocale._abbr;
            require('./locale/' + name);
            // because defineLocale currently also sets the global locale, we
            // want to undo that for lazy loaded locales
            getSetGlobalLocale(oldLocale);
        } catch (e) { }
    }
    return locales[name];
}

// This function will load locale and then set the global locale.  If
// no arguments are passed in, it will simply return the current global
// locale key.
function getSetGlobalLocale (key, values) {
    var data;
    if (key) {
        if (isUndefined(values)) {
            data = getLocale(key);
        }
        else {
            data = defineLocale(key, values);
        }

        if (data) {
            // moment.duration._locale = moment._locale = data;
            globalLocale = data;
        }
    }

    return globalLocale._abbr;
}

function defineLocale (name, config) {
    if (config !== null) {
        var parentConfig = baseConfig;
        config.abbr = name;
        if (locales[name] != null) {
            deprecateSimple('defineLocaleOverride',
                    'use moment.updateLocale(localeName, config) to change ' +
                    'an existing locale. moment.defineLocale(localeName, ' +
                    'config) should only be used for creating a new locale ' +
                    'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
            parentConfig = locales[name]._config;
        } else if (config.parentLocale != null) {
            if (locales[config.parentLocale] != null) {
                parentConfig = locales[config.parentLocale]._config;
            } else {
                if (!localeFamilies[config.parentLocale]) {
                    localeFamilies[config.parentLocale] = [];
                }
                localeFamilies[config.parentLocale].push({
                    name: name,
                    config: config
                });
                return null;
            }
        }
        locales[name] = new Locale(mergeConfigs(parentConfig, config));

        if (localeFamilies[name]) {
            localeFamilies[name].forEach(function (x) {
                defineLocale(x.name, x.config);
            });
        }

        // backwards compat for now: also set the locale
        // make sure we set the locale AFTER all child locales have been
        // created, so we won't end up with the child locale set.
        getSetGlobalLocale(name);


        return locales[name];
    } else {
        // useful for testing
        delete locales[name];
        return null;
    }
}

function updateLocale(name, config) {
    if (config != null) {
        var locale, parentConfig = baseConfig;
        // MERGE
        if (locales[name] != null) {
            parentConfig = locales[name]._config;
        }
        config = mergeConfigs(parentConfig, config);
        locale = new Locale(config);
        locale.parentLocale = locales[name];
        locales[name] = locale;

        // backwards compat for now: also set the locale
        getSetGlobalLocale(name);
    } else {
        // pass null for config to unupdate, useful for tests
        if (locales[name] != null) {
            if (locales[name].parentLocale != null) {
                locales[name] = locales[name].parentLocale;
            } else if (locales[name] != null) {
                delete locales[name];
            }
        }
    }
    return locales[name];
}

// returns locale data
function getLocale (key) {
    var locale;

    if (key && key._locale && key._locale._abbr) {
        key = key._locale._abbr;
    }

    if (!key) {
        return globalLocale;
    }

    if (!isArray(key)) {
        //short-circuit everything else
        locale = loadLocale(key);
        if (locale) {
            return locale;
        }
        key = [key];
    }

    return chooseLocale(key);
}

function listLocales() {
    return keys$1(locales);
}

function checkOverflow (m) {
    var overflow;
    var a = m._a;

    if (a && getParsingFlags(m).overflow === -2) {
        overflow =
            a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
            a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
            a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
            a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
            a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
            a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
            -1;

        if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
            overflow = DATE;
        }
        if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
            overflow = WEEK;
        }
        if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
            overflow = WEEKDAY;
        }

        getParsingFlags(m).overflow = overflow;
    }

    return m;
}

// iso 8601 regex
// 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

var isoDates = [
    ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
    ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
    ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
    ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
    ['YYYY-DDD', /\d{4}-\d{3}/],
    ['YYYY-MM', /\d{4}-\d\d/, false],
    ['YYYYYYMMDD', /[+-]\d{10}/],
    ['YYYYMMDD', /\d{8}/],
    // YYYYMM is NOT allowed by the standard
    ['GGGG[W]WWE', /\d{4}W\d{3}/],
    ['GGGG[W]WW', /\d{4}W\d{2}/, false],
    ['YYYYDDD', /\d{7}/]
];

// iso time formats and regexes
var isoTimes = [
    ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
    ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
    ['HH:mm:ss', /\d\d:\d\d:\d\d/],
    ['HH:mm', /\d\d:\d\d/],
    ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
    ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
    ['HHmmss', /\d\d\d\d\d\d/],
    ['HHmm', /\d\d\d\d/],
    ['HH', /\d\d/]
];

var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

// date from iso format
function configFromISO(config) {
    var i, l,
        string = config._i,
        match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
        allowTime, dateFormat, timeFormat, tzFormat;

    if (match) {
        getParsingFlags(config).iso = true;

        for (i = 0, l = isoDates.length; i < l; i++) {
            if (isoDates[i][1].exec(match[1])) {
                dateFormat = isoDates[i][0];
                allowTime = isoDates[i][2] !== false;
                break;
            }
        }
        if (dateFormat == null) {
            config._isValid = false;
            return;
        }
        if (match[3]) {
            for (i = 0, l = isoTimes.length; i < l; i++) {
                if (isoTimes[i][1].exec(match[3])) {
                    // match[2] should be 'T' or space
                    timeFormat = (match[2] || ' ') + isoTimes[i][0];
                    break;
                }
            }
            if (timeFormat == null) {
                config._isValid = false;
                return;
            }
        }
        if (!allowTime && timeFormat != null) {
            config._isValid = false;
            return;
        }
        if (match[4]) {
            if (tzRegex.exec(match[4])) {
                tzFormat = 'Z';
            } else {
                config._isValid = false;
                return;
            }
        }
        config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
        configFromStringAndFormat(config);
    } else {
        config._isValid = false;
    }
}

// date from iso format or fallback
function configFromString(config) {
    var matched = aspNetJsonRegex.exec(config._i);

    if (matched !== null) {
        config._d = new Date(+matched[1]);
        return;
    }

    configFromISO(config);
    if (config._isValid === false) {
        delete config._isValid;
        hooks.createFromInputFallback(config);
    }
}

hooks.createFromInputFallback = deprecate(
    'value provided is not in a recognized ISO format. moment construction falls back to js Date(), ' +
    'which is not reliable across all browsers and versions. Non ISO date formats are ' +
    'discouraged and will be removed in an upcoming major release. Please refer to ' +
    'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
    function (config) {
        config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
    }
);

// Pick the first defined of two or three arguments.
function defaults(a, b, c) {
    if (a != null) {
        return a;
    }
    if (b != null) {
        return b;
    }
    return c;
}

function currentDateArray(config) {
    // hooks is actually the exported moment object
    var nowValue = new Date(hooks.now());
    if (config._useUTC) {
        return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
    }
    return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
}

// convert an array to a date.
// the array should mirror the parameters below
// note: all values past the year are optional and will default to the lowest possible value.
// [year, month, day , hour, minute, second, millisecond]
function configFromArray (config) {
    var i, date, input = [], currentDate, yearToUse;

    if (config._d) {
        return;
    }

    currentDate = currentDateArray(config);

    //compute day of the year from weeks and weekdays
    if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
        dayOfYearFromWeekInfo(config);
    }

    //if the day of the year is set, figure out what it is
    if (config._dayOfYear) {
        yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

        if (config._dayOfYear > daysInYear(yearToUse)) {
            getParsingFlags(config)._overflowDayOfYear = true;
        }

        date = createUTCDate(yearToUse, 0, config._dayOfYear);
        config._a[MONTH] = date.getUTCMonth();
        config._a[DATE] = date.getUTCDate();
    }

    // Default to current date.
    // * if no year, month, day of month are given, default to today
    // * if day of month is given, default month and year
    // * if month is given, default only year
    // * if year is given, don't default anything
    for (i = 0; i < 3 && config._a[i] == null; ++i) {
        config._a[i] = input[i] = currentDate[i];
    }

    // Zero out whatever was not defaulted, including time
    for (; i < 7; i++) {
        config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
    }

    // Check for 24:00:00.000
    if (config._a[HOUR] === 24 &&
            config._a[MINUTE] === 0 &&
            config._a[SECOND] === 0 &&
            config._a[MILLISECOND] === 0) {
        config._nextDay = true;
        config._a[HOUR] = 0;
    }

    config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
    // Apply timezone offset from input. The actual utcOffset can be changed
    // with parseZone.
    if (config._tzm != null) {
        config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
    }

    if (config._nextDay) {
        config._a[HOUR] = 24;
    }
}

function dayOfYearFromWeekInfo(config) {
    var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

    w = config._w;
    if (w.GG != null || w.W != null || w.E != null) {
        dow = 1;
        doy = 4;

        // TODO: We need to take the current isoWeekYear, but that depends on
        // how we interpret now (local, utc, fixed offset). So create
        // a now version of current config (take local/utc/offset flags, and
        // create now).
        weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
        week = defaults(w.W, 1);
        weekday = defaults(w.E, 1);
        if (weekday < 1 || weekday > 7) {
            weekdayOverflow = true;
        }
    } else {
        dow = config._locale._week.dow;
        doy = config._locale._week.doy;

        var curWeek = weekOfYear(createLocal(), dow, doy);

        weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

        // Default to current week.
        week = defaults(w.w, curWeek.week);

        if (w.d != null) {
            // weekday -- low day numbers are considered next week
            weekday = w.d;
            if (weekday < 0 || weekday > 6) {
                weekdayOverflow = true;
            }
        } else if (w.e != null) {
            // local weekday -- counting starts from begining of week
            weekday = w.e + dow;
            if (w.e < 0 || w.e > 6) {
                weekdayOverflow = true;
            }
        } else {
            // default to begining of week
            weekday = dow;
        }
    }
    if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
        getParsingFlags(config)._overflowWeeks = true;
    } else if (weekdayOverflow != null) {
        getParsingFlags(config)._overflowWeekday = true;
    } else {
        temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
        config._a[YEAR] = temp.year;
        config._dayOfYear = temp.dayOfYear;
    }
}

// constant that refers to the ISO standard
hooks.ISO_8601 = function () {};

// date from string and format string
function configFromStringAndFormat(config) {
    // TODO: Move this to another part of the creation flow to prevent circular deps
    if (config._f === hooks.ISO_8601) {
        configFromISO(config);
        return;
    }

    config._a = [];
    getParsingFlags(config).empty = true;

    // This array is used to make a Date, either with `new Date` or `Date.UTC`
    var string = '' + config._i,
        i, parsedInput, tokens, token, skipped,
        stringLength = string.length,
        totalParsedInputLength = 0;

    tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

    for (i = 0; i < tokens.length; i++) {
        token = tokens[i];
        parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
        // console.log('token', token, 'parsedInput', parsedInput,
        //         'regex', getParseRegexForToken(token, config));
        if (parsedInput) {
            skipped = string.substr(0, string.indexOf(parsedInput));
            if (skipped.length > 0) {
                getParsingFlags(config).unusedInput.push(skipped);
            }
            string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
            totalParsedInputLength += parsedInput.length;
        }
        // don't parse if it's not a known token
        if (formatTokenFunctions[token]) {
            if (parsedInput) {
                getParsingFlags(config).empty = false;
            }
            else {
                getParsingFlags(config).unusedTokens.push(token);
            }
            addTimeToArrayFromToken(token, parsedInput, config);
        }
        else if (config._strict && !parsedInput) {
            getParsingFlags(config).unusedTokens.push(token);
        }
    }

    // add remaining unparsed input length to the string
    getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
    if (string.length > 0) {
        getParsingFlags(config).unusedInput.push(string);
    }

    // clear _12h flag if hour is <= 12
    if (config._a[HOUR] <= 12 &&
        getParsingFlags(config).bigHour === true &&
        config._a[HOUR] > 0) {
        getParsingFlags(config).bigHour = undefined;
    }

    getParsingFlags(config).parsedDateParts = config._a.slice(0);
    getParsingFlags(config).meridiem = config._meridiem;
    // handle meridiem
    config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

    configFromArray(config);
    checkOverflow(config);
}


function meridiemFixWrap (locale, hour, meridiem) {
    var isPm;

    if (meridiem == null) {
        // nothing to do
        return hour;
    }
    if (locale.meridiemHour != null) {
        return locale.meridiemHour(hour, meridiem);
    } else if (locale.isPM != null) {
        // Fallback
        isPm = locale.isPM(meridiem);
        if (isPm && hour < 12) {
            hour += 12;
        }
        if (!isPm && hour === 12) {
            hour = 0;
        }
        return hour;
    } else {
        // this is not supposed to happen
        return hour;
    }
}

// date from string and array of format strings
function configFromStringAndArray(config) {
    var tempConfig,
        bestMoment,

        scoreToBeat,
        i,
        currentScore;

    if (config._f.length === 0) {
        getParsingFlags(config).invalidFormat = true;
        config._d = new Date(NaN);
        return;
    }

    for (i = 0; i < config._f.length; i++) {
        currentScore = 0;
        tempConfig = copyConfig({}, config);
        if (config._useUTC != null) {
            tempConfig._useUTC = config._useUTC;
        }
        tempConfig._f = config._f[i];
        configFromStringAndFormat(tempConfig);

        if (!isValid(tempConfig)) {
            continue;
        }

        // if there is any input that was not parsed add a penalty for that format
        currentScore += getParsingFlags(tempConfig).charsLeftOver;

        //or tokens
        currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

        getParsingFlags(tempConfig).score = currentScore;

        if (scoreToBeat == null || currentScore < scoreToBeat) {
            scoreToBeat = currentScore;
            bestMoment = tempConfig;
        }
    }

    extend(config, bestMoment || tempConfig);
}

function configFromObject(config) {
    if (config._d) {
        return;
    }

    var i = normalizeObjectUnits(config._i);
    config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
        return obj && parseInt(obj, 10);
    });

    configFromArray(config);
}

function createFromConfig (config) {
    var res = new Moment(checkOverflow(prepareConfig(config)));
    if (res._nextDay) {
        // Adding is smart enough around DST
        res.add(1, 'd');
        res._nextDay = undefined;
    }

    return res;
}

function prepareConfig (config) {
    var input = config._i,
        format = config._f;

    config._locale = config._locale || getLocale(config._l);

    if (input === null || (format === undefined && input === '')) {
        return createInvalid({nullInput: true});
    }

    if (typeof input === 'string') {
        config._i = input = config._locale.preparse(input);
    }

    if (isMoment(input)) {
        return new Moment(checkOverflow(input));
    } else if (isDate(input)) {
        config._d = input;
    } else if (isArray(format)) {
        configFromStringAndArray(config);
    } else if (format) {
        configFromStringAndFormat(config);
    }  else {
        configFromInput(config);
    }

    if (!isValid(config)) {
        config._d = null;
    }

    return config;
}

function configFromInput(config) {
    var input = config._i;
    if (input === undefined) {
        config._d = new Date(hooks.now());
    } else if (isDate(input)) {
        config._d = new Date(input.valueOf());
    } else if (typeof input === 'string') {
        configFromString(config);
    } else if (isArray(input)) {
        config._a = map(input.slice(0), function (obj) {
            return parseInt(obj, 10);
        });
        configFromArray(config);
    } else if (typeof(input) === 'object') {
        configFromObject(config);
    } else if (isNumber(input)) {
        // from milliseconds
        config._d = new Date(input);
    } else {
        hooks.createFromInputFallback(config);
    }
}

function createLocalOrUTC (input, format, locale, strict, isUTC) {
    var c = {};

    if (locale === true || locale === false) {
        strict = locale;
        locale = undefined;
    }

    if ((isObject(input) && isObjectEmpty(input)) ||
            (isArray(input) && input.length === 0)) {
        input = undefined;
    }
    // object construction must be done this way.
    // https://github.com/moment/moment/issues/1423
    c._isAMomentObject = true;
    c._useUTC = c._isUTC = isUTC;
    c._l = locale;
    c._i = input;
    c._f = format;
    c._strict = strict;

    return createFromConfig(c);
}

function createLocal (input, format, locale, strict) {
    return createLocalOrUTC(input, format, locale, strict, false);
}

var prototypeMin = deprecate(
    'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
    function () {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
            return other < this ? this : other;
        } else {
            return createInvalid();
        }
    }
);

var prototypeMax = deprecate(
    'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
    function () {
        var other = createLocal.apply(null, arguments);
        if (this.isValid() && other.isValid()) {
            return other > this ? this : other;
        } else {
            return createInvalid();
        }
    }
);

// Pick a moment m from moments so that m[fn](other) is true for all
// other. This relies on the function fn to be transitive.
//
// moments should either be an array of moment objects or an array, whose
// first element is an array of moment objects.
function pickBy(fn, moments) {
    var res, i;
    if (moments.length === 1 && isArray(moments[0])) {
        moments = moments[0];
    }
    if (!moments.length) {
        return createLocal();
    }
    res = moments[0];
    for (i = 1; i < moments.length; ++i) {
        if (!moments[i].isValid() || moments[i][fn](res)) {
            res = moments[i];
        }
    }
    return res;
}

// TODO: Use [].sort instead?
function min () {
    var args = [].slice.call(arguments, 0);

    return pickBy('isBefore', args);
}

function max () {
    var args = [].slice.call(arguments, 0);

    return pickBy('isAfter', args);
}

var now = function () {
    return Date.now ? Date.now() : +(new Date());
};

function Duration (duration) {
    var normalizedInput = normalizeObjectUnits(duration),
        years = normalizedInput.year || 0,
        quarters = normalizedInput.quarter || 0,
        months = normalizedInput.month || 0,
        weeks = normalizedInput.week || 0,
        days = normalizedInput.day || 0,
        hours = normalizedInput.hour || 0,
        minutes = normalizedInput.minute || 0,
        seconds = normalizedInput.second || 0,
        milliseconds = normalizedInput.millisecond || 0;

    // representation for dateAddRemove
    this._milliseconds = +milliseconds +
        seconds * 1e3 + // 1000
        minutes * 6e4 + // 1000 * 60
        hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
    // Because of dateAddRemove treats 24 hours as different from a
    // day when working around DST, we need to store them separately
    this._days = +days +
        weeks * 7;
    // It is impossible translate months into days without knowing
    // which months you are are talking about, so we have to store
    // it separately.
    this._months = +months +
        quarters * 3 +
        years * 12;

    this._data = {};

    this._locale = getLocale();

    this._bubble();
}

function isDuration (obj) {
    return obj instanceof Duration;
}

function absRound (number) {
    if (number < 0) {
        return Math.round(-1 * number) * -1;
    } else {
        return Math.round(number);
    }
}

// FORMATTING

function offset (token, separator) {
    addFormatToken(token, 0, 0, function () {
        var offset = this.utcOffset();
        var sign = '+';
        if (offset < 0) {
            offset = -offset;
            sign = '-';
        }
        return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
    });
}

offset('Z', ':');
offset('ZZ', '');

// PARSING

addRegexToken('Z',  matchShortOffset);
addRegexToken('ZZ', matchShortOffset);
addParseToken(['Z', 'ZZ'], function (input, array, config) {
    config._useUTC = true;
    config._tzm = offsetFromString(matchShortOffset, input);
});

// HELPERS

// timezone chunker
// '+10:00' > ['10',  '00']
// '-1530'  > ['-15', '30']
var chunkOffset = /([\+\-]|\d\d)/gi;

function offsetFromString(matcher, string) {
    var matches = (string || '').match(matcher);

    if (matches === null) {
        return null;
    }

    var chunk   = matches[matches.length - 1] || [];
    var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
    var minutes = +(parts[1] * 60) + toInt(parts[2]);

    return minutes === 0 ?
      0 :
      parts[0] === '+' ? minutes : -minutes;
}

// Return a moment from input, that is local/utc/zone equivalent to model.
function cloneWithOffset(input, model) {
    var res, diff;
    if (model._isUTC) {
        res = model.clone();
        diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
        // Use low-level api, because this fn is low-level api.
        res._d.setTime(res._d.valueOf() + diff);
        hooks.updateOffset(res, false);
        return res;
    } else {
        return createLocal(input).local();
    }
}

function getDateOffset (m) {
    // On Firefox.24 Date#getTimezoneOffset returns a floating point.
    // https://github.com/moment/moment/pull/1871
    return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
}

// HOOKS

// This function will be called whenever a moment is mutated.
// It is intended to keep the offset in sync with the timezone.
hooks.updateOffset = function () {};

// MOMENTS

// keepLocalTime = true means only change the timezone, without
// affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
// 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
// +0200, so we adjust the time as needed, to be valid.
//
// Keeping the time actually adds/subtracts (one hour)
// from the actual represented time. That is why we call updateOffset
// a second time. In case it wants us to change the offset again
// _changeInProgress == true case, then we have to adjust, because
// there is no such time in the given timezone.
function getSetOffset (input, keepLocalTime) {
    var offset = this._offset || 0,
        localAdjust;
    if (!this.isValid()) {
        return input != null ? this : NaN;
    }
    if (input != null) {
        if (typeof input === 'string') {
            input = offsetFromString(matchShortOffset, input);
            if (input === null) {
                return this;
            }
        } else if (Math.abs(input) < 16) {
            input = input * 60;
        }
        if (!this._isUTC && keepLocalTime) {
            localAdjust = getDateOffset(this);
        }
        this._offset = input;
        this._isUTC = true;
        if (localAdjust != null) {
            this.add(localAdjust, 'm');
        }
        if (offset !== input) {
            if (!keepLocalTime || this._changeInProgress) {
                addSubtract(this, createDuration(input - offset, 'm'), 1, false);
            } else if (!this._changeInProgress) {
                this._changeInProgress = true;
                hooks.updateOffset(this, true);
                this._changeInProgress = null;
            }
        }
        return this;
    } else {
        return this._isUTC ? offset : getDateOffset(this);
    }
}

function getSetZone (input, keepLocalTime) {
    if (input != null) {
        if (typeof input !== 'string') {
            input = -input;
        }

        this.utcOffset(input, keepLocalTime);

        return this;
    } else {
        return -this.utcOffset();
    }
}

function setOffsetToUTC (keepLocalTime) {
    return this.utcOffset(0, keepLocalTime);
}

function setOffsetToLocal (keepLocalTime) {
    if (this._isUTC) {
        this.utcOffset(0, keepLocalTime);
        this._isUTC = false;

        if (keepLocalTime) {
            this.subtract(getDateOffset(this), 'm');
        }
    }
    return this;
}

function setOffsetToParsedOffset () {
    if (this._tzm != null) {
        this.utcOffset(this._tzm);
    } else if (typeof this._i === 'string') {
        var tZone = offsetFromString(matchOffset, this._i);
        if (tZone != null) {
            this.utcOffset(tZone);
        }
        else {
            this.utcOffset(0, true);
        }
    }
    return this;
}

function hasAlignedHourOffset (input) {
    if (!this.isValid()) {
        return false;
    }
    input = input ? createLocal(input).utcOffset() : 0;

    return (this.utcOffset() - input) % 60 === 0;
}

function isDaylightSavingTime () {
    return (
        this.utcOffset() > this.clone().month(0).utcOffset() ||
        this.utcOffset() > this.clone().month(5).utcOffset()
    );
}

function isDaylightSavingTimeShifted () {
    if (!isUndefined(this._isDSTShifted)) {
        return this._isDSTShifted;
    }

    var c = {};

    copyConfig(c, this);
    c = prepareConfig(c);

    if (c._a) {
        var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
        this._isDSTShifted = this.isValid() &&
            compareArrays(c._a, other.toArray()) > 0;
    } else {
        this._isDSTShifted = false;
    }

    return this._isDSTShifted;
}

function isLocal () {
    return this.isValid() ? !this._isUTC : false;
}

function isUtcOffset () {
    return this.isValid() ? this._isUTC : false;
}

function isUtc () {
    return this.isValid() ? this._isUTC && this._offset === 0 : false;
}

// ASP.NET json date format regex
var aspNetRegex = /^(\-)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;

// from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
// somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
// and further modified to allow for strings containing both week and day
var isoRegex = /^(-)?P(?:(-?[0-9,.]*)Y)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)W)?(?:(-?[0-9,.]*)D)?(?:T(?:(-?[0-9,.]*)H)?(?:(-?[0-9,.]*)M)?(?:(-?[0-9,.]*)S)?)?$/;

function createDuration (input, key) {
    var duration = input,
        // matching against regexp is expensive, do it on demand
        match = null,
        sign,
        ret,
        diffRes;

    if (isDuration(input)) {
        duration = {
            ms : input._milliseconds,
            d  : input._days,
            M  : input._months
        };
    } else if (isNumber(input)) {
        duration = {};
        if (key) {
            duration[key] = input;
        } else {
            duration.milliseconds = input;
        }
    } else if (!!(match = aspNetRegex.exec(input))) {
        sign = (match[1] === '-') ? -1 : 1;
        duration = {
            y  : 0,
            d  : toInt(match[DATE])                         * sign,
            h  : toInt(match[HOUR])                         * sign,
            m  : toInt(match[MINUTE])                       * sign,
            s  : toInt(match[SECOND])                       * sign,
            ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
        };
    } else if (!!(match = isoRegex.exec(input))) {
        sign = (match[1] === '-') ? -1 : 1;
        duration = {
            y : parseIso(match[2], sign),
            M : parseIso(match[3], sign),
            w : parseIso(match[4], sign),
            d : parseIso(match[5], sign),
            h : parseIso(match[6], sign),
            m : parseIso(match[7], sign),
            s : parseIso(match[8], sign)
        };
    } else if (duration == null) {// checks for null or undefined
        duration = {};
    } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
        diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));

        duration = {};
        duration.ms = diffRes.milliseconds;
        duration.M = diffRes.months;
    }

    ret = new Duration(duration);

    if (isDuration(input) && hasOwnProp(input, '_locale')) {
        ret._locale = input._locale;
    }

    return ret;
}

createDuration.fn = Duration.prototype;

function parseIso (inp, sign) {
    // We'd normally use ~~inp for this, but unfortunately it also
    // converts floats to ints.
    // inp may be undefined, so careful calling replace on it.
    var res = inp && parseFloat(inp.replace(',', '.'));
    // apply sign while we're at it
    return (isNaN(res) ? 0 : res) * sign;
}

function positiveMomentsDifference(base, other) {
    var res = {milliseconds: 0, months: 0};

    res.months = other.month() - base.month() +
        (other.year() - base.year()) * 12;
    if (base.clone().add(res.months, 'M').isAfter(other)) {
        --res.months;
    }

    res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

    return res;
}

function momentsDifference(base, other) {
    var res;
    if (!(base.isValid() && other.isValid())) {
        return {milliseconds: 0, months: 0};
    }

    other = cloneWithOffset(other, base);
    if (base.isBefore(other)) {
        res = positiveMomentsDifference(base, other);
    } else {
        res = positiveMomentsDifference(other, base);
        res.milliseconds = -res.milliseconds;
        res.months = -res.months;
    }

    return res;
}

// TODO: remove 'name' arg after deprecation is removed
function createAdder(direction, name) {
    return function (val, period) {
        var dur, tmp;
        //invert the arguments, but complain about it
        if (period !== null && !isNaN(+period)) {
            deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
            'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
            tmp = val; val = period; period = tmp;
        }

        val = typeof val === 'string' ? +val : val;
        dur = createDuration(val, period);
        addSubtract(this, dur, direction);
        return this;
    };
}

function addSubtract (mom, duration, isAdding, updateOffset) {
    var milliseconds = duration._milliseconds,
        days = absRound(duration._days),
        months = absRound(duration._months);

    if (!mom.isValid()) {
        // No op
        return;
    }

    updateOffset = updateOffset == null ? true : updateOffset;

    if (milliseconds) {
        mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
    }
    if (days) {
        set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
    }
    if (months) {
        setMonth(mom, get(mom, 'Month') + months * isAdding);
    }
    if (updateOffset) {
        hooks.updateOffset(mom, days || months);
    }
}

var add      = createAdder(1, 'add');
var subtract = createAdder(-1, 'subtract');

function getCalendarFormat(myMoment, now) {
    var diff = myMoment.diff(now, 'days', true);
    return diff < -6 ? 'sameElse' :
            diff < -1 ? 'lastWeek' :
            diff < 0 ? 'lastDay' :
            diff < 1 ? 'sameDay' :
            diff < 2 ? 'nextDay' :
            diff < 7 ? 'nextWeek' : 'sameElse';
}

function calendar$1 (time, formats) {
    // We want to compare the start of today, vs this.
    // Getting start-of-today depends on whether we're local/utc/offset or not.
    var now = time || createLocal(),
        sod = cloneWithOffset(now, this).startOf('day'),
        format = hooks.calendarFormat(this, sod) || 'sameElse';

    var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);

    return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
}

function clone () {
    return new Moment(this);
}

function isAfter (input, units) {
    var localInput = isMoment(input) ? input : createLocal(input);
    if (!(this.isValid() && localInput.isValid())) {
        return false;
    }
    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
    if (units === 'millisecond') {
        return this.valueOf() > localInput.valueOf();
    } else {
        return localInput.valueOf() < this.clone().startOf(units).valueOf();
    }
}

function isBefore (input, units) {
    var localInput = isMoment(input) ? input : createLocal(input);
    if (!(this.isValid() && localInput.isValid())) {
        return false;
    }
    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
    if (units === 'millisecond') {
        return this.valueOf() < localInput.valueOf();
    } else {
        return this.clone().endOf(units).valueOf() < localInput.valueOf();
    }
}

function isBetween (from, to, units, inclusivity) {
    inclusivity = inclusivity || '()';
    return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&
        (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));
}

function isSame (input, units) {
    var localInput = isMoment(input) ? input : createLocal(input),
        inputMs;
    if (!(this.isValid() && localInput.isValid())) {
        return false;
    }
    units = normalizeUnits(units || 'millisecond');
    if (units === 'millisecond') {
        return this.valueOf() === localInput.valueOf();
    } else {
        inputMs = localInput.valueOf();
        return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
    }
}

function isSameOrAfter (input, units) {
    return this.isSame(input, units) || this.isAfter(input,units);
}

function isSameOrBefore (input, units) {
    return this.isSame(input, units) || this.isBefore(input,units);
}

function diff (input, units, asFloat) {
    var that,
        zoneDelta,
        delta, output;

    if (!this.isValid()) {
        return NaN;
    }

    that = cloneWithOffset(input, this);

    if (!that.isValid()) {
        return NaN;
    }

    zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

    units = normalizeUnits(units);

    if (units === 'year' || units === 'month' || units === 'quarter') {
        output = monthDiff(this, that);
        if (units === 'quarter') {
            output = output / 3;
        } else if (units === 'year') {
            output = output / 12;
        }
    } else {
        delta = this - that;
        output = units === 'second' ? delta / 1e3 : // 1000
            units === 'minute' ? delta / 6e4 : // 1000 * 60
            units === 'hour' ? delta / 36e5 : // 1000 * 60 * 60
            units === 'day' ? (delta - zoneDelta) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
            units === 'week' ? (delta - zoneDelta) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
            delta;
    }
    return asFloat ? output : absFloor(output);
}

function monthDiff (a, b) {
    // difference in months
    var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
        // b is in (anchor - 1 month, anchor + 1 month)
        anchor = a.clone().add(wholeMonthDiff, 'months'),
        anchor2, adjust;

    if (b - anchor < 0) {
        anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
        // linear across the month
        adjust = (b - anchor) / (anchor - anchor2);
    } else {
        anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
        // linear across the month
        adjust = (b - anchor) / (anchor2 - anchor);
    }

    //check for negative zero, return zero if negative zero
    return -(wholeMonthDiff + adjust) || 0;
}

hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

function toString () {
    return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
}

function toISOString () {
    var m = this.clone().utc();
    if (0 < m.year() && m.year() <= 9999) {
        if (isFunction(Date.prototype.toISOString)) {
            // native implementation is ~50x faster, use it when we can
            return this.toDate().toISOString();
        } else {
            return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
        }
    } else {
        return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
    }
}

/**
 * Return a human readable representation of a moment that can
 * also be evaluated to get a new moment which is the same
 *
 * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
 */
function inspect () {
    if (!this.isValid()) {
        return 'moment.invalid(/* ' + this._i + ' */)';
    }
    var func = 'moment';
    var zone = '';
    if (!this.isLocal()) {
        func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
        zone = 'Z';
    }
    var prefix = '[' + func + '("]';
    var year = (0 < this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';
    var datetime = '-MM-DD[T]HH:mm:ss.SSS';
    var suffix = zone + '[")]';

    return this.format(prefix + year + datetime + suffix);
}

function format (inputString) {
    if (!inputString) {
        inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
    }
    var output = formatMoment(this, inputString);
    return this.localeData().postformat(output);
}

function from (time, withoutSuffix) {
    if (this.isValid() &&
            ((isMoment(time) && time.isValid()) ||
             createLocal(time).isValid())) {
        return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
    } else {
        return this.localeData().invalidDate();
    }
}

function fromNow (withoutSuffix) {
    return this.from(createLocal(), withoutSuffix);
}

function to (time, withoutSuffix) {
    if (this.isValid() &&
            ((isMoment(time) && time.isValid()) ||
             createLocal(time).isValid())) {
        return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
    } else {
        return this.localeData().invalidDate();
    }
}

function toNow (withoutSuffix) {
    return this.to(createLocal(), withoutSuffix);
}

// If passed a locale key, it will set the locale for this
// instance.  Otherwise, it will return the locale configuration
// variables for this instance.
function locale (key) {
    var newLocaleData;

    if (key === undefined) {
        return this._locale._abbr;
    } else {
        newLocaleData = getLocale(key);
        if (newLocaleData != null) {
            this._locale = newLocaleData;
        }
        return this;
    }
}

var lang = deprecate(
    'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
    function (key) {
        if (key === undefined) {
            return this.localeData();
        } else {
            return this.locale(key);
        }
    }
);

function localeData () {
    return this._locale;
}

function startOf (units) {
    units = normalizeUnits(units);
    // the following switch intentionally omits break keywords
    // to utilize falling through the cases.
    switch (units) {
        case 'year':
            this.month(0);
            /* falls through */
        case 'quarter':
        case 'month':
            this.date(1);
            /* falls through */
        case 'week':
        case 'isoWeek':
        case 'day':
        case 'date':
            this.hours(0);
            /* falls through */
        case 'hour':
            this.minutes(0);
            /* falls through */
        case 'minute':
            this.seconds(0);
            /* falls through */
        case 'second':
            this.milliseconds(0);
    }

    // weeks are a special case
    if (units === 'week') {
        this.weekday(0);
    }
    if (units === 'isoWeek') {
        this.isoWeekday(1);
    }

    // quarters are also special
    if (units === 'quarter') {
        this.month(Math.floor(this.month() / 3) * 3);
    }

    return this;
}

function endOf (units) {
    units = normalizeUnits(units);
    if (units === undefined || units === 'millisecond') {
        return this;
    }

    // 'date' is an alias for 'day', so it should be considered as such.
    if (units === 'date') {
        units = 'day';
    }

    return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
}

function valueOf () {
    return this._d.valueOf() - ((this._offset || 0) * 60000);
}

function unix () {
    return Math.floor(this.valueOf() / 1000);
}

function toDate () {
    return new Date(this.valueOf());
}

function toArray () {
    var m = this;
    return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
}

function toObject () {
    var m = this;
    return {
        years: m.year(),
        months: m.month(),
        date: m.date(),
        hours: m.hours(),
        minutes: m.minutes(),
        seconds: m.seconds(),
        milliseconds: m.milliseconds()
    };
}

function toJSON () {
    // new Date(NaN).toJSON() === null
    return this.isValid() ? this.toISOString() : null;
}

function isValid$1 () {
    return isValid(this);
}

function parsingFlags () {
    return extend({}, getParsingFlags(this));
}

function invalidAt () {
    return getParsingFlags(this).overflow;
}

function creationData() {
    return {
        input: this._i,
        format: this._f,
        locale: this._locale,
        isUTC: this._isUTC,
        strict: this._strict
    };
}

// FORMATTING

addFormatToken(0, ['gg', 2], 0, function () {
    return this.weekYear() % 100;
});

addFormatToken(0, ['GG', 2], 0, function () {
    return this.isoWeekYear() % 100;
});

function addWeekYearFormatToken (token, getter) {
    addFormatToken(0, [token, token.length], 0, getter);
}

addWeekYearFormatToken('gggg',     'weekYear');
addWeekYearFormatToken('ggggg',    'weekYear');
addWeekYearFormatToken('GGGG',  'isoWeekYear');
addWeekYearFormatToken('GGGGG', 'isoWeekYear');

// ALIASES

addUnitAlias('weekYear', 'gg');
addUnitAlias('isoWeekYear', 'GG');

// PRIORITY

addUnitPriority('weekYear', 1);
addUnitPriority('isoWeekYear', 1);


// PARSING

addRegexToken('G',      matchSigned);
addRegexToken('g',      matchSigned);
addRegexToken('GG',     match1to2, match2);
addRegexToken('gg',     match1to2, match2);
addRegexToken('GGGG',   match1to4, match4);
addRegexToken('gggg',   match1to4, match4);
addRegexToken('GGGGG',  match1to6, match6);
addRegexToken('ggggg',  match1to6, match6);

addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
    week[token.substr(0, 2)] = toInt(input);
});

addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
    week[token] = hooks.parseTwoDigitYear(input);
});

// MOMENTS

function getSetWeekYear (input) {
    return getSetWeekYearHelper.call(this,
            input,
            this.week(),
            this.weekday(),
            this.localeData()._week.dow,
            this.localeData()._week.doy);
}

function getSetISOWeekYear (input) {
    return getSetWeekYearHelper.call(this,
            input, this.isoWeek(), this.isoWeekday(), 1, 4);
}

function getISOWeeksInYear () {
    return weeksInYear(this.year(), 1, 4);
}

function getWeeksInYear () {
    var weekInfo = this.localeData()._week;
    return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
}

function getSetWeekYearHelper(input, week, weekday, dow, doy) {
    var weeksTarget;
    if (input == null) {
        return weekOfYear(this, dow, doy).year;
    } else {
        weeksTarget = weeksInYear(input, dow, doy);
        if (week > weeksTarget) {
            week = weeksTarget;
        }
        return setWeekAll.call(this, input, week, weekday, dow, doy);
    }
}

function setWeekAll(weekYear, week, weekday, dow, doy) {
    var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
        date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

    this.year(date.getUTCFullYear());
    this.month(date.getUTCMonth());
    this.date(date.getUTCDate());
    return this;
}

// FORMATTING

addFormatToken('Q', 0, 'Qo', 'quarter');

// ALIASES

addUnitAlias('quarter', 'Q');

// PRIORITY

addUnitPriority('quarter', 7);

// PARSING

addRegexToken('Q', match1);
addParseToken('Q', function (input, array) {
    array[MONTH] = (toInt(input) - 1) * 3;
});

// MOMENTS

function getSetQuarter (input) {
    return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
}

// FORMATTING

addFormatToken('D', ['DD', 2], 'Do', 'date');

// ALIASES

addUnitAlias('date', 'D');

// PRIOROITY
addUnitPriority('date', 9);

// PARSING

addRegexToken('D',  match1to2);
addRegexToken('DD', match1to2, match2);
addRegexToken('Do', function (isStrict, locale) {
    return isStrict ? locale._ordinalParse : locale._ordinalParseLenient;
});

addParseToken(['D', 'DD'], DATE);
addParseToken('Do', function (input, array) {
    array[DATE] = toInt(input.match(match1to2)[0], 10);
});

// MOMENTS

var getSetDayOfMonth = makeGetSet('Date', true);

// FORMATTING

addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

// ALIASES

addUnitAlias('dayOfYear', 'DDD');

// PRIORITY
addUnitPriority('dayOfYear', 4);

// PARSING

addRegexToken('DDD',  match1to3);
addRegexToken('DDDD', match3);
addParseToken(['DDD', 'DDDD'], function (input, array, config) {
    config._dayOfYear = toInt(input);
});

// HELPERS

// MOMENTS

function getSetDayOfYear (input) {
    var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
    return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
}

// FORMATTING

addFormatToken('m', ['mm', 2], 0, 'minute');

// ALIASES

addUnitAlias('minute', 'm');

// PRIORITY

addUnitPriority('minute', 14);

// PARSING

addRegexToken('m',  match1to2);
addRegexToken('mm', match1to2, match2);
addParseToken(['m', 'mm'], MINUTE);

// MOMENTS

var getSetMinute = makeGetSet('Minutes', false);

// FORMATTING

addFormatToken('s', ['ss', 2], 0, 'second');

// ALIASES

addUnitAlias('second', 's');

// PRIORITY

addUnitPriority('second', 15);

// PARSING

addRegexToken('s',  match1to2);
addRegexToken('ss', match1to2, match2);
addParseToken(['s', 'ss'], SECOND);

// MOMENTS

var getSetSecond = makeGetSet('Seconds', false);

// FORMATTING

addFormatToken('S', 0, 0, function () {
    return ~~(this.millisecond() / 100);
});

addFormatToken(0, ['SS', 2], 0, function () {
    return ~~(this.millisecond() / 10);
});

addFormatToken(0, ['SSS', 3], 0, 'millisecond');
addFormatToken(0, ['SSSS', 4], 0, function () {
    return this.millisecond() * 10;
});
addFormatToken(0, ['SSSSS', 5], 0, function () {
    return this.millisecond() * 100;
});
addFormatToken(0, ['SSSSSS', 6], 0, function () {
    return this.millisecond() * 1000;
});
addFormatToken(0, ['SSSSSSS', 7], 0, function () {
    return this.millisecond() * 10000;
});
addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
    return this.millisecond() * 100000;
});
addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
    return this.millisecond() * 1000000;
});


// ALIASES

addUnitAlias('millisecond', 'ms');

// PRIORITY

addUnitPriority('millisecond', 16);

// PARSING

addRegexToken('S',    match1to3, match1);
addRegexToken('SS',   match1to3, match2);
addRegexToken('SSS',  match1to3, match3);

var token;
for (token = 'SSSS'; token.length <= 9; token += 'S') {
    addRegexToken(token, matchUnsigned);
}

function parseMs(input, array) {
    array[MILLISECOND] = toInt(('0.' + input) * 1000);
}

for (token = 'S'; token.length <= 9; token += 'S') {
    addParseToken(token, parseMs);
}
// MOMENTS

var getSetMillisecond = makeGetSet('Milliseconds', false);

// FORMATTING

addFormatToken('z',  0, 0, 'zoneAbbr');
addFormatToken('zz', 0, 0, 'zoneName');

// MOMENTS

function getZoneAbbr () {
    return this._isUTC ? 'UTC' : '';
}

function getZoneName () {
    return this._isUTC ? 'Coordinated Universal Time' : '';
}

var proto = Moment.prototype;

proto.add               = add;
proto.calendar          = calendar$1;
proto.clone             = clone;
proto.diff              = diff;
proto.endOf             = endOf;
proto.format            = format;
proto.from              = from;
proto.fromNow           = fromNow;
proto.to                = to;
proto.toNow             = toNow;
proto.get               = stringGet;
proto.invalidAt         = invalidAt;
proto.isAfter           = isAfter;
proto.isBefore          = isBefore;
proto.isBetween         = isBetween;
proto.isSame            = isSame;
proto.isSameOrAfter     = isSameOrAfter;
proto.isSameOrBefore    = isSameOrBefore;
proto.isValid           = isValid$1;
proto.lang              = lang;
proto.locale            = locale;
proto.localeData        = localeData;
proto.max               = prototypeMax;
proto.min               = prototypeMin;
proto.parsingFlags      = parsingFlags;
proto.set               = stringSet;
proto.startOf           = startOf;
proto.subtract          = subtract;
proto.toArray           = toArray;
proto.toObject          = toObject;
proto.toDate            = toDate;
proto.toISOString       = toISOString;
proto.inspect           = inspect;
proto.toJSON            = toJSON;
proto.toString          = toString;
proto.unix              = unix;
proto.valueOf           = valueOf;
proto.creationData      = creationData;

// Year
proto.year       = getSetYear;
proto.isLeapYear = getIsLeapYear;

// Week Year
proto.weekYear    = getSetWeekYear;
proto.isoWeekYear = getSetISOWeekYear;

// Quarter
proto.quarter = proto.quarters = getSetQuarter;

// Month
proto.month       = getSetMonth;
proto.daysInMonth = getDaysInMonth;

// Week
proto.week           = proto.weeks        = getSetWeek;
proto.isoWeek        = proto.isoWeeks     = getSetISOWeek;
proto.weeksInYear    = getWeeksInYear;
proto.isoWeeksInYear = getISOWeeksInYear;

// Day
proto.date       = getSetDayOfMonth;
proto.day        = proto.days             = getSetDayOfWeek;
proto.weekday    = getSetLocaleDayOfWeek;
proto.isoWeekday = getSetISODayOfWeek;
proto.dayOfYear  = getSetDayOfYear;

// Hour
proto.hour = proto.hours = getSetHour;

// Minute
proto.minute = proto.minutes = getSetMinute;

// Second
proto.second = proto.seconds = getSetSecond;

// Millisecond
proto.millisecond = proto.milliseconds = getSetMillisecond;

// Offset
proto.utcOffset            = getSetOffset;
proto.utc                  = setOffsetToUTC;
proto.local                = setOffsetToLocal;
proto.parseZone            = setOffsetToParsedOffset;
proto.hasAlignedHourOffset = hasAlignedHourOffset;
proto.isDST                = isDaylightSavingTime;
proto.isLocal              = isLocal;
proto.isUtcOffset          = isUtcOffset;
proto.isUtc                = isUtc;
proto.isUTC                = isUtc;

// Timezone
proto.zoneAbbr = getZoneAbbr;
proto.zoneName = getZoneName;

// Deprecations
proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

function createUnix (input) {
    return createLocal(input * 1000);
}

function createInZone () {
    return createLocal.apply(null, arguments).parseZone();
}

function preParsePostFormat (string) {
    return string;
}

var proto$1 = Locale.prototype;

proto$1.calendar        = calendar;
proto$1.longDateFormat  = longDateFormat;
proto$1.invalidDate     = invalidDate;
proto$1.ordinal         = ordinal;
proto$1.preparse        = preParsePostFormat;
proto$1.postformat      = preParsePostFormat;
proto$1.relativeTime    = relativeTime;
proto$1.pastFuture      = pastFuture;
proto$1.set             = set;

// Month
proto$1.months            =        localeMonths;
proto$1.monthsShort       =        localeMonthsShort;
proto$1.monthsParse       =        localeMonthsParse;
proto$1.monthsRegex       = monthsRegex;
proto$1.monthsShortRegex  = monthsShortRegex;

// Week
proto$1.week = localeWeek;
proto$1.firstDayOfYear = localeFirstDayOfYear;
proto$1.firstDayOfWeek = localeFirstDayOfWeek;

// Day of Week
proto$1.weekdays       =        localeWeekdays;
proto$1.weekdaysMin    =        localeWeekdaysMin;
proto$1.weekdaysShort  =        localeWeekdaysShort;
proto$1.weekdaysParse  =        localeWeekdaysParse;

proto$1.weekdaysRegex       =        weekdaysRegex;
proto$1.weekdaysShortRegex  =        weekdaysShortRegex;
proto$1.weekdaysMinRegex    =        weekdaysMinRegex;

// Hours
proto$1.isPM = localeIsPM;
proto$1.meridiem = localeMeridiem;

function get$1 (format, index, field, setter) {
    var locale = getLocale();
    var utc = createUTC().set(setter, index);
    return locale[field](utc, format);
}

function listMonthsImpl (format, index, field) {
    if (isNumber(format)) {
        index = format;
        format = undefined;
    }

    format = format || '';

    if (index != null) {
        return get$1(format, index, field, 'month');
    }

    var i;
    var out = [];
    for (i = 0; i < 12; i++) {
        out[i] = get$1(format, i, field, 'month');
    }
    return out;
}

// ()
// (5)
// (fmt, 5)
// (fmt)
// (true)
// (true, 5)
// (true, fmt, 5)
// (true, fmt)
function listWeekdaysImpl (localeSorted, format, index, field) {
    if (typeof localeSorted === 'boolean') {
        if (isNumber(format)) {
            index = format;
            format = undefined;
        }

        format = format || '';
    } else {
        format = localeSorted;
        index = format;
        localeSorted = false;

        if (isNumber(format)) {
            index = format;
            format = undefined;
        }

        format = format || '';
    }

    var locale = getLocale(),
        shift = localeSorted ? locale._week.dow : 0;

    if (index != null) {
        return get$1(format, (index + shift) % 7, field, 'day');
    }

    var i;
    var out = [];
    for (i = 0; i < 7; i++) {
        out[i] = get$1(format, (i + shift) % 7, field, 'day');
    }
    return out;
}

function listMonths (format, index) {
    return listMonthsImpl(format, index, 'months');
}

function listMonthsShort (format, index) {
    return listMonthsImpl(format, index, 'monthsShort');
}

function listWeekdays (localeSorted, format, index) {
    return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
}

function listWeekdaysShort (localeSorted, format, index) {
    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
}

function listWeekdaysMin (localeSorted, format, index) {
    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
}

getSetGlobalLocale('en', {
    ordinalParse: /\d{1,2}(th|st|nd|rd)/,
    ordinal : function (number) {
        var b = number % 10,
            output = (toInt(number % 100 / 10) === 1) ? 'th' :
            (b === 1) ? 'st' :
            (b === 2) ? 'nd' :
            (b === 3) ? 'rd' : 'th';
        return number + output;
    }
});

// Side effect imports
hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);

var mathAbs = Math.abs;

function abs () {
    var data           = this._data;

    this._milliseconds = mathAbs(this._milliseconds);
    this._days         = mathAbs(this._days);
    this._months       = mathAbs(this._months);

    data.milliseconds  = mathAbs(data.milliseconds);
    data.seconds       = mathAbs(data.seconds);
    data.minutes       = mathAbs(data.minutes);
    data.hours         = mathAbs(data.hours);
    data.months        = mathAbs(data.months);
    data.years         = mathAbs(data.years);

    return this;
}

function addSubtract$1 (duration, input, value, direction) {
    var other = createDuration(input, value);

    duration._milliseconds += direction * other._milliseconds;
    duration._days         += direction * other._days;
    duration._months       += direction * other._months;

    return duration._bubble();
}

// supports only 2.0-style add(1, 's') or add(duration)
function add$1 (input, value) {
    return addSubtract$1(this, input, value, 1);
}

// supports only 2.0-style subtract(1, 's') or subtract(duration)
function subtract$1 (input, value) {
    return addSubtract$1(this, input, value, -1);
}

function absCeil (number) {
    if (number < 0) {
        return Math.floor(number);
    } else {
        return Math.ceil(number);
    }
}

function bubble () {
    var milliseconds = this._milliseconds;
    var days         = this._days;
    var months       = this._months;
    var data         = this._data;
    var seconds, minutes, hours, years, monthsFromDays;

    // if we have a mix of positive and negative values, bubble down first
    // check: https://github.com/moment/moment/issues/2166
    if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
            (milliseconds <= 0 && days <= 0 && months <= 0))) {
        milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
        days = 0;
        months = 0;
    }

    // The following code bubbles up values, see the tests for
    // examples of what that means.
    data.milliseconds = milliseconds % 1000;

    seconds           = absFloor(milliseconds / 1000);
    data.seconds      = seconds % 60;

    minutes           = absFloor(seconds / 60);
    data.minutes      = minutes % 60;

    hours             = absFloor(minutes / 60);
    data.hours        = hours % 24;

    days += absFloor(hours / 24);

    // convert days to months
    monthsFromDays = absFloor(daysToMonths(days));
    months += monthsFromDays;
    days -= absCeil(monthsToDays(monthsFromDays));

    // 12 months -> 1 year
    years = absFloor(months / 12);
    months %= 12;

    data.days   = days;
    data.months = months;
    data.years  = years;

    return this;
}

function daysToMonths (days) {
    // 400 years have 146097 days (taking into account leap year rules)
    // 400 years have 12 months === 4800
    return days * 4800 / 146097;
}

function monthsToDays (months) {
    // the reverse of daysToMonths
    return months * 146097 / 4800;
}

function as (units) {
    var days;
    var months;
    var milliseconds = this._milliseconds;

    units = normalizeUnits(units);

    if (units === 'month' || units === 'year') {
        days   = this._days   + milliseconds / 864e5;
        months = this._months + daysToMonths(days);
        return units === 'month' ? months : months / 12;
    } else {
        // handle milliseconds separately because of floating point math errors (issue #1867)
        days = this._days + Math.round(monthsToDays(this._months));
        switch (units) {
            case 'week'   : return days / 7     + milliseconds / 6048e5;
            case 'day'    : return days         + milliseconds / 864e5;
            case 'hour'   : return days * 24    + milliseconds / 36e5;
            case 'minute' : return days * 1440  + milliseconds / 6e4;
            case 'second' : return days * 86400 + milliseconds / 1000;
            // Math.floor prevents floating point math errors here
            case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
            default: throw new Error('Unknown unit ' + units);
        }
    }
}

// TODO: Use this.as('ms')?
function valueOf$1 () {
    return (
        this._milliseconds +
        this._days * 864e5 +
        (this._months % 12) * 2592e6 +
        toInt(this._months / 12) * 31536e6
    );
}

function makeAs (alias) {
    return function () {
        return this.as(alias);
    };
}

var asMilliseconds = makeAs('ms');
var asSeconds      = makeAs('s');
var asMinutes      = makeAs('m');
var asHours        = makeAs('h');
var asDays         = makeAs('d');
var asWeeks        = makeAs('w');
var asMonths       = makeAs('M');
var asYears        = makeAs('y');

function get$2 (units) {
    units = normalizeUnits(units);
    return this[units + 's']();
}

function makeGetter(name) {
    return function () {
        return this._data[name];
    };
}

var milliseconds = makeGetter('milliseconds');
var seconds      = makeGetter('seconds');
var minutes      = makeGetter('minutes');
var hours        = makeGetter('hours');
var days         = makeGetter('days');
var months       = makeGetter('months');
var years        = makeGetter('years');

function weeks () {
    return absFloor(this.days() / 7);
}

var round = Math.round;
var thresholds = {
    s: 45,  // seconds to minute
    m: 45,  // minutes to hour
    h: 22,  // hours to day
    d: 26,  // days to month
    M: 11   // months to year
};

// helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
    return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
}

function relativeTime$1 (posNegDuration, withoutSuffix, locale) {
    var duration = createDuration(posNegDuration).abs();
    var seconds  = round(duration.as('s'));
    var minutes  = round(duration.as('m'));
    var hours    = round(duration.as('h'));
    var days     = round(duration.as('d'));
    var months   = round(duration.as('M'));
    var years    = round(duration.as('y'));

    var a = seconds < thresholds.s && ['s', seconds]  ||
            minutes <= 1           && ['m']           ||
            minutes < thresholds.m && ['mm', minutes] ||
            hours   <= 1           && ['h']           ||
            hours   < thresholds.h && ['hh', hours]   ||
            days    <= 1           && ['d']           ||
            days    < thresholds.d && ['dd', days]    ||
            months  <= 1           && ['M']           ||
            months  < thresholds.M && ['MM', months]  ||
            years   <= 1           && ['y']           || ['yy', years];

    a[2] = withoutSuffix;
    a[3] = +posNegDuration > 0;
    a[4] = locale;
    return substituteTimeAgo.apply(null, a);
}

// This function allows you to set the rounding function for relative time strings
function getSetRelativeTimeRounding (roundingFunction) {
    if (roundingFunction === undefined) {
        return round;
    }
    if (typeof(roundingFunction) === 'function') {
        round = roundingFunction;
        return true;
    }
    return false;
}

// This function allows you to set a threshold for relative time strings
function getSetRelativeTimeThreshold (threshold, limit) {
    if (thresholds[threshold] === undefined) {
        return false;
    }
    if (limit === undefined) {
        return thresholds[threshold];
    }
    thresholds[threshold] = limit;
    return true;
}

function humanize (withSuffix) {
    var locale = this.localeData();
    var output = relativeTime$1(this, !withSuffix, locale);

    if (withSuffix) {
        output = locale.pastFuture(+this, output);
    }

    return locale.postformat(output);
}

var abs$1 = Math.abs;

function toISOString$1() {
    // for ISO strings we do not use the normal bubbling rules:
    //  * milliseconds bubble up until they become hours
    //  * days do not bubble at all
    //  * months bubble up until they become years
    // This is because there is no context-free conversion between hours and days
    // (think of clock changes)
    // and also not between days and months (28-31 days per month)
    var seconds = abs$1(this._milliseconds) / 1000;
    var days         = abs$1(this._days);
    var months       = abs$1(this._months);
    var minutes, hours, years;

    // 3600 seconds -> 60 minutes -> 1 hour
    minutes           = absFloor(seconds / 60);
    hours             = absFloor(minutes / 60);
    seconds %= 60;
    minutes %= 60;

    // 12 months -> 1 year
    years  = absFloor(months / 12);
    months %= 12;


    // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
    var Y = years;
    var M = months;
    var D = days;
    var h = hours;
    var m = minutes;
    var s = seconds;
    var total = this.asSeconds();

    if (!total) {
        // this is the same as C#'s (Noda) and python (isodate)...
        // but not other JS (goog.date)
        return 'P0D';
    }

    return (total < 0 ? '-' : '') +
        'P' +
        (Y ? Y + 'Y' : '') +
        (M ? M + 'M' : '') +
        (D ? D + 'D' : '') +
        ((h || m || s) ? 'T' : '') +
        (h ? h + 'H' : '') +
        (m ? m + 'M' : '') +
        (s ? s + 'S' : '');
}

var proto$2 = Duration.prototype;

proto$2.abs            = abs;
proto$2.add            = add$1;
proto$2.subtract       = subtract$1;
proto$2.as             = as;
proto$2.asMilliseconds = asMilliseconds;
proto$2.asSeconds      = asSeconds;
proto$2.asMinutes      = asMinutes;
proto$2.asHours        = asHours;
proto$2.asDays         = asDays;
proto$2.asWeeks        = asWeeks;
proto$2.asMonths       = asMonths;
proto$2.asYears        = asYears;
proto$2.valueOf        = valueOf$1;
proto$2._bubble        = bubble;
proto$2.get            = get$2;
proto$2.milliseconds   = milliseconds;
proto$2.seconds        = seconds;
proto$2.minutes        = minutes;
proto$2.hours          = hours;
proto$2.days           = days;
proto$2.weeks          = weeks;
proto$2.months         = months;
proto$2.years          = years;
proto$2.humanize       = humanize;
proto$2.toISOString    = toISOString$1;
proto$2.toString       = toISOString$1;
proto$2.toJSON         = toISOString$1;
proto$2.locale         = locale;
proto$2.localeData     = localeData;

// Deprecations
proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
proto$2.lang = lang;

// Side effect imports

// FORMATTING

addFormatToken('X', 0, 0, 'unix');
addFormatToken('x', 0, 0, 'valueOf');

// PARSING

addRegexToken('x', matchSigned);
addRegexToken('X', matchTimestamp);
addParseToken('X', function (input, array, config) {
    config._d = new Date(parseFloat(input, 10) * 1000);
});
addParseToken('x', function (input, array, config) {
    config._d = new Date(toInt(input));
});

// Side effect imports

//! moment.js
//! version : 2.17.1
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com

hooks.version = '2.17.1';

setHookCallback(createLocal);

hooks.fn                    = proto;
hooks.min                   = min;
hooks.max                   = max;
hooks.now                   = now;
hooks.utc                   = createUTC;
hooks.unix                  = createUnix;
hooks.months                = listMonths;
hooks.isDate                = isDate;
hooks.locale                = getSetGlobalLocale;
hooks.invalid               = createInvalid;
hooks.duration              = createDuration;
hooks.isMoment              = isMoment;
hooks.weekdays              = listWeekdays;
hooks.parseZone             = createInZone;
hooks.localeData            = getLocale;
hooks.isDuration            = isDuration;
hooks.monthsShort           = listMonthsShort;
hooks.weekdaysMin           = listWeekdaysMin;
hooks.defineLocale          = defineLocale;
hooks.updateLocale          = updateLocale;
hooks.locales               = listLocales;
hooks.weekdaysShort         = listWeekdaysShort;
hooks.normalizeUnits        = normalizeUnits;
hooks.relativeTimeRounding = getSetRelativeTimeRounding;
hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
hooks.calendarFormat        = getCalendarFormat;
hooks.prototype             = proto;

//! moment.js locale configuration
//! locale : Afrikaans [af]
//! author : Werner Mollentze : https://github.com/wernerm

hooks.defineLocale('af', {
    months : 'Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember'.split('_'),
    monthsShort : 'Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des'.split('_'),
    weekdays : 'Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag'.split('_'),
    weekdaysShort : 'Son_Maa_Din_Woe_Don_Vry_Sat'.split('_'),
    weekdaysMin : 'So_Ma_Di_Wo_Do_Vr_Sa'.split('_'),
    meridiemParse: /vm|nm/i,
    isPM : function (input) {
        return /^nm$/i.test(input);
    },
    meridiem : function (hours, minutes, isLower) {
        if (hours < 12) {
            return isLower ? 'vm' : 'VM';
        } else {
            return isLower ? 'nm' : 'NM';
        }
    },
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[Vandag om] LT',
        nextDay : '[MÃ´re om] LT',
        nextWeek : 'dddd [om] LT',
        lastDay : '[Gister om] LT',
        lastWeek : '[Laas] dddd [om] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'oor %s',
        past : '%s gelede',
        s : '\'n paar sekondes',
        m : '\'n minuut',
        mm : '%d minute',
        h : '\'n uur',
        hh : '%d ure',
        d : '\'n dag',
        dd : '%d dae',
        M : '\'n maand',
        MM : '%d maande',
        y : '\'n jaar',
        yy : '%d jaar'
    },
    ordinalParse: /\d{1,2}(ste|de)/,
    ordinal : function (number) {
        return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de'); // Thanks to Joris RÃ¶ling : https://github.com/jjupiter
    },
    week : {
        dow : 1, // Maandag is die eerste dag van die week.
        doy : 4  // Die week wat die 4de Januarie bevat is die eerste week van die jaar.
    }
});

//! moment.js locale configuration
//! locale : Arabic (Algeria) [ar-dz]
//! author : Noureddine LOUAHEDJ : https://github.com/noureddineme

hooks.defineLocale('ar-dz', {
    months : 'Ø¬Ø§ÙÙÙ_ÙÙÙØ±Ù_ÙØ§Ø±Ø³_Ø£ÙØ±ÙÙ_ÙØ§Ù_Ø¬ÙØ§Ù_Ø¬ÙÙÙÙØ©_Ø£ÙØª_Ø³Ø¨ØªÙØ¨Ø±_Ø£ÙØªÙØ¨Ø±_ÙÙÙÙØ¨Ø±_Ø¯ÙØ³ÙØ¨Ø±'.split('_'),
    monthsShort : 'Ø¬Ø§ÙÙÙ_ÙÙÙØ±Ù_ÙØ§Ø±Ø³_Ø£ÙØ±ÙÙ_ÙØ§Ù_Ø¬ÙØ§Ù_Ø¬ÙÙÙÙØ©_Ø£ÙØª_Ø³Ø¨ØªÙØ¨Ø±_Ø£ÙØªÙØ¨Ø±_ÙÙÙÙØ¨Ø±_Ø¯ÙØ³ÙØ¨Ø±'.split('_'),
    weekdays : 'Ø§ÙØ£Ø­Ø¯_Ø§ÙØ¥Ø«ÙÙÙ_Ø§ÙØ«ÙØ§Ø«Ø§Ø¡_Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡_Ø§ÙØ®ÙÙØ³_Ø§ÙØ¬ÙØ¹Ø©_Ø§ÙØ³Ø¨Øª'.split('_'),
    weekdaysShort : 'Ø§Ø­Ø¯_Ø§Ø«ÙÙÙ_Ø«ÙØ§Ø«Ø§Ø¡_Ø§Ø±Ø¨Ø¹Ø§Ø¡_Ø®ÙÙØ³_Ø¬ÙØ¹Ø©_Ø³Ø¨Øª'.split('_'),
    weekdaysMin : 'Ø£Ø­_Ø¥Ø«_Ø«ÙØ§_Ø£Ø±_Ø®Ù_Ø¬Ù_Ø³Ø¨'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[Ø§ÙÙÙÙ Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT',
        nextDay: '[ØºØ¯Ø§ Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT',
        nextWeek: 'dddd [Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT',
        lastDay: '[Ø£ÙØ³ Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT',
        lastWeek: 'dddd [Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'ÙÙ %s',
        past : 'ÙÙØ° %s',
        s : 'Ø«ÙØ§Ù',
        m : 'Ø¯ÙÙÙØ©',
        mm : '%d Ø¯ÙØ§Ø¦Ù',
        h : 'Ø³Ø§Ø¹Ø©',
        hh : '%d Ø³Ø§Ø¹Ø§Øª',
        d : 'ÙÙÙ',
        dd : '%d Ø£ÙØ§Ù',
        M : 'Ø´ÙØ±',
        MM : '%d Ø£Ø´ÙØ±',
        y : 'Ø³ÙØ©',
        yy : '%d Ø³ÙÙØ§Øª'
    },
    week : {
        dow : 0, // Sunday is the first day of the week.
        doy : 4  // The week that contains Jan 1st is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Arabic (Lybia) [ar-ly]
//! author : Ali Hmer: https://github.com/kikoanis

var symbolMap = {
    '1': '1',
    '2': '2',
    '3': '3',
    '4': '4',
    '5': '5',
    '6': '6',
    '7': '7',
    '8': '8',
    '9': '9',
    '0': '0'
};
var pluralForm = function (n) {
    return n === 0 ? 0 : n === 1 ? 1 : n === 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5;
};
var plurals = {
    s : ['Ø£ÙÙ ÙÙ Ø«Ø§ÙÙØ©', 'Ø«Ø§ÙÙØ© ÙØ§Ø­Ø¯Ø©', ['Ø«Ø§ÙÙØªØ§Ù', 'Ø«Ø§ÙÙØªÙÙ'], '%d Ø«ÙØ§Ù', '%d Ø«Ø§ÙÙØ©', '%d Ø«Ø§ÙÙØ©'],
    m : ['Ø£ÙÙ ÙÙ Ø¯ÙÙÙØ©', 'Ø¯ÙÙÙØ© ÙØ§Ø­Ø¯Ø©', ['Ø¯ÙÙÙØªØ§Ù', 'Ø¯ÙÙÙØªÙÙ'], '%d Ø¯ÙØ§Ø¦Ù', '%d Ø¯ÙÙÙØ©', '%d Ø¯ÙÙÙØ©'],
    h : ['Ø£ÙÙ ÙÙ Ø³Ø§Ø¹Ø©', 'Ø³Ø§Ø¹Ø© ÙØ§Ø­Ø¯Ø©', ['Ø³Ø§Ø¹ØªØ§Ù', 'Ø³Ø§Ø¹ØªÙÙ'], '%d Ø³Ø§Ø¹Ø§Øª', '%d Ø³Ø§Ø¹Ø©', '%d Ø³Ø§Ø¹Ø©'],
    d : ['Ø£ÙÙ ÙÙ ÙÙÙ', 'ÙÙÙ ÙØ§Ø­Ø¯', ['ÙÙÙØ§Ù', 'ÙÙÙÙÙ'], '%d Ø£ÙØ§Ù', '%d ÙÙÙÙØ§', '%d ÙÙÙ'],
    M : ['Ø£ÙÙ ÙÙ Ø´ÙØ±', 'Ø´ÙØ± ÙØ§Ø­Ø¯', ['Ø´ÙØ±Ø§Ù', 'Ø´ÙØ±ÙÙ'], '%d Ø£Ø´ÙØ±', '%d Ø´ÙØ±Ø§', '%d Ø´ÙØ±'],
    y : ['Ø£ÙÙ ÙÙ Ø¹Ø§Ù', 'Ø¹Ø§Ù ÙØ§Ø­Ø¯', ['Ø¹Ø§ÙØ§Ù', 'Ø¹Ø§ÙÙÙ'], '%d Ø£Ø¹ÙØ§Ù', '%d Ø¹Ø§ÙÙØ§', '%d Ø¹Ø§Ù']
};
var pluralize = function (u) {
    return function (number, withoutSuffix, string, isFuture) {
        var f = pluralForm(number),
            str = plurals[u][pluralForm(number)];
        if (f === 2) {
            str = str[withoutSuffix ? 0 : 1];
        }
        return str.replace(/%d/i, number);
    };
};
var months$1 = [
    'ÙÙØ§ÙØ±',
    'ÙØ¨Ø±Ø§ÙØ±',
    'ÙØ§Ø±Ø³',
    'Ø£Ø¨Ø±ÙÙ',
    'ÙØ§ÙÙ',
    'ÙÙÙÙÙ',
    'ÙÙÙÙÙ',
    'Ø£ØºØ³Ø·Ø³',
    'Ø³Ø¨ØªÙØ¨Ø±',
    'Ø£ÙØªÙØ¨Ø±',
    'ÙÙÙÙØ¨Ø±',
    'Ø¯ÙØ³ÙØ¨Ø±'
];

hooks.defineLocale('ar-ly', {
    months : months$1,
    monthsShort : months$1,
    weekdays : 'Ø§ÙØ£Ø­Ø¯_Ø§ÙØ¥Ø«ÙÙÙ_Ø§ÙØ«ÙØ§Ø«Ø§Ø¡_Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡_Ø§ÙØ®ÙÙØ³_Ø§ÙØ¬ÙØ¹Ø©_Ø§ÙØ³Ø¨Øª'.split('_'),
    weekdaysShort : 'Ø£Ø­Ø¯_Ø¥Ø«ÙÙÙ_Ø«ÙØ§Ø«Ø§Ø¡_Ø£Ø±Ø¨Ø¹Ø§Ø¡_Ø®ÙÙØ³_Ø¬ÙØ¹Ø©_Ø³Ø¨Øª'.split('_'),
    weekdaysMin : 'Ø­_Ù_Ø«_Ø±_Ø®_Ø¬_Ø³'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'D/\u200FM/\u200FYYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    meridiemParse: /Øµ|Ù/,
    isPM : function (input) {
        return 'Ù' === input;
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 12) {
            return 'Øµ';
        } else {
            return 'Ù';
        }
    },
    calendar : {
        sameDay: '[Ø§ÙÙÙÙ Ø¹ÙØ¯ Ø§ÙØ³Ø§Ø¹Ø©] LT',
        nextDay: '[ØºØ¯ÙØ§ Ø¹ÙØ¯ Ø§ÙØ³Ø§Ø¹Ø©] LT',
        nextWeek: 'dddd [Ø¹ÙØ¯ Ø§ÙØ³Ø§Ø¹Ø©] LT',
        lastDay: '[Ø£ÙØ³ Ø¹ÙØ¯ Ø§ÙØ³Ø§Ø¹Ø©] LT',
        lastWeek: 'dddd [Ø¹ÙØ¯ Ø§ÙØ³Ø§Ø¹Ø©] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'Ø¨Ø¹Ø¯ %s',
        past : 'ÙÙØ° %s',
        s : pluralize('s'),
        m : pluralize('m'),
        mm : pluralize('m'),
        h : pluralize('h'),
        hh : pluralize('h'),
        d : pluralize('d'),
        dd : pluralize('d'),
        M : pluralize('M'),
        MM : pluralize('M'),
        y : pluralize('y'),
        yy : pluralize('y')
    },
    preparse: function (string) {
        return string.replace(/\u200f/g, '').replace(/Ø/g, ',');
    },
    postformat: function (string) {
        return string.replace(/\d/g, function (match) {
            return symbolMap[match];
        }).replace(/,/g, 'Ø');
    },
    week : {
        dow : 6, // Saturday is the first day of the week.
        doy : 12  // The week that contains Jan 1st is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Arabic (Morocco) [ar-ma]
//! author : ElFadili Yassine : https://github.com/ElFadiliY
//! author : Abdel Said : https://github.com/abdelsaid

hooks.defineLocale('ar-ma', {
    months : 'ÙÙØ§ÙØ±_ÙØ¨Ø±Ø§ÙØ±_ÙØ§Ø±Ø³_Ø£Ø¨Ø±ÙÙ_ÙØ§Ù_ÙÙÙÙÙ_ÙÙÙÙÙØ²_ØºØ´Øª_Ø´ØªÙØ¨Ø±_Ø£ÙØªÙØ¨Ø±_ÙÙÙØ¨Ø±_Ø¯Ø¬ÙØ¨Ø±'.split('_'),
    monthsShort : 'ÙÙØ§ÙØ±_ÙØ¨Ø±Ø§ÙØ±_ÙØ§Ø±Ø³_Ø£Ø¨Ø±ÙÙ_ÙØ§Ù_ÙÙÙÙÙ_ÙÙÙÙÙØ²_ØºØ´Øª_Ø´ØªÙØ¨Ø±_Ø£ÙØªÙØ¨Ø±_ÙÙÙØ¨Ø±_Ø¯Ø¬ÙØ¨Ø±'.split('_'),
    weekdays : 'Ø§ÙØ£Ø­Ø¯_Ø§ÙØ¥ØªÙÙÙ_Ø§ÙØ«ÙØ§Ø«Ø§Ø¡_Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡_Ø§ÙØ®ÙÙØ³_Ø§ÙØ¬ÙØ¹Ø©_Ø§ÙØ³Ø¨Øª'.split('_'),
    weekdaysShort : 'Ø§Ø­Ø¯_Ø§ØªÙÙÙ_Ø«ÙØ§Ø«Ø§Ø¡_Ø§Ø±Ø¨Ø¹Ø§Ø¡_Ø®ÙÙØ³_Ø¬ÙØ¹Ø©_Ø³Ø¨Øª'.split('_'),
    weekdaysMin : 'Ø­_Ù_Ø«_Ø±_Ø®_Ø¬_Ø³'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[Ø§ÙÙÙÙ Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT',
        nextDay: '[ØºØ¯Ø§ Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT',
        nextWeek: 'dddd [Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT',
        lastDay: '[Ø£ÙØ³ Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT',
        lastWeek: 'dddd [Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'ÙÙ %s',
        past : 'ÙÙØ° %s',
        s : 'Ø«ÙØ§Ù',
        m : 'Ø¯ÙÙÙØ©',
        mm : '%d Ø¯ÙØ§Ø¦Ù',
        h : 'Ø³Ø§Ø¹Ø©',
        hh : '%d Ø³Ø§Ø¹Ø§Øª',
        d : 'ÙÙÙ',
        dd : '%d Ø£ÙØ§Ù',
        M : 'Ø´ÙØ±',
        MM : '%d Ø£Ø´ÙØ±',
        y : 'Ø³ÙØ©',
        yy : '%d Ø³ÙÙØ§Øª'
    },
    week : {
        dow : 6, // Saturday is the first day of the week.
        doy : 12  // The week that contains Jan 1st is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Arabic (Saudi Arabia) [ar-sa]
//! author : Suhail Alkowaileet : https://github.com/xsoh

var symbolMap$1 = {
    '1': 'Ù¡',
    '2': 'Ù¢',
    '3': 'Ù£',
    '4': 'Ù¤',
    '5': 'Ù¥',
    '6': 'Ù¦',
    '7': 'Ù§',
    '8': 'Ù¨',
    '9': 'Ù©',
    '0': 'Ù '
};
var numberMap = {
    'Ù¡': '1',
    'Ù¢': '2',
    'Ù£': '3',
    'Ù¤': '4',
    'Ù¥': '5',
    'Ù¦': '6',
    'Ù§': '7',
    'Ù¨': '8',
    'Ù©': '9',
    'Ù ': '0'
};

hooks.defineLocale('ar-sa', {
    months : 'ÙÙØ§ÙØ±_ÙØ¨Ø±Ø§ÙØ±_ÙØ§Ø±Ø³_Ø£Ø¨Ø±ÙÙ_ÙØ§ÙÙ_ÙÙÙÙÙ_ÙÙÙÙÙ_Ø£ØºØ³Ø·Ø³_Ø³Ø¨ØªÙØ¨Ø±_Ø£ÙØªÙØ¨Ø±_ÙÙÙÙØ¨Ø±_Ø¯ÙØ³ÙØ¨Ø±'.split('_'),
    monthsShort : 'ÙÙØ§ÙØ±_ÙØ¨Ø±Ø§ÙØ±_ÙØ§Ø±Ø³_Ø£Ø¨Ø±ÙÙ_ÙØ§ÙÙ_ÙÙÙÙÙ_ÙÙÙÙÙ_Ø£ØºØ³Ø·Ø³_Ø³Ø¨ØªÙØ¨Ø±_Ø£ÙØªÙØ¨Ø±_ÙÙÙÙØ¨Ø±_Ø¯ÙØ³ÙØ¨Ø±'.split('_'),
    weekdays : 'Ø§ÙØ£Ø­Ø¯_Ø§ÙØ¥Ø«ÙÙÙ_Ø§ÙØ«ÙØ§Ø«Ø§Ø¡_Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡_Ø§ÙØ®ÙÙØ³_Ø§ÙØ¬ÙØ¹Ø©_Ø§ÙØ³Ø¨Øª'.split('_'),
    weekdaysShort : 'Ø£Ø­Ø¯_Ø¥Ø«ÙÙÙ_Ø«ÙØ§Ø«Ø§Ø¡_Ø£Ø±Ø¨Ø¹Ø§Ø¡_Ø®ÙÙØ³_Ø¬ÙØ¹Ø©_Ø³Ø¨Øª'.split('_'),
    weekdaysMin : 'Ø­_Ù_Ø«_Ø±_Ø®_Ø¬_Ø³'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    meridiemParse: /Øµ|Ù/,
    isPM : function (input) {
        return 'Ù' === input;
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 12) {
            return 'Øµ';
        } else {
            return 'Ù';
        }
    },
    calendar : {
        sameDay: '[Ø§ÙÙÙÙ Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT',
        nextDay: '[ØºØ¯Ø§ Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT',
        nextWeek: 'dddd [Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT',
        lastDay: '[Ø£ÙØ³ Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT',
        lastWeek: 'dddd [Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'ÙÙ %s',
        past : 'ÙÙØ° %s',
        s : 'Ø«ÙØ§Ù',
        m : 'Ø¯ÙÙÙØ©',
        mm : '%d Ø¯ÙØ§Ø¦Ù',
        h : 'Ø³Ø§Ø¹Ø©',
        hh : '%d Ø³Ø§Ø¹Ø§Øª',
        d : 'ÙÙÙ',
        dd : '%d Ø£ÙØ§Ù',
        M : 'Ø´ÙØ±',
        MM : '%d Ø£Ø´ÙØ±',
        y : 'Ø³ÙØ©',
        yy : '%d Ø³ÙÙØ§Øª'
    },
    preparse: function (string) {
        return string.replace(/[Ù¡Ù¢Ù£Ù¤Ù¥Ù¦Ù§Ù¨Ù©Ù ]/g, function (match) {
            return numberMap[match];
        }).replace(/Ø/g, ',');
    },
    postformat: function (string) {
        return string.replace(/\d/g, function (match) {
            return symbolMap$1[match];
        }).replace(/,/g, 'Ø');
    },
    week : {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 1st is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale  :  Arabic (Tunisia) [ar-tn]
//! author : Nader Toukabri : https://github.com/naderio

hooks.defineLocale('ar-tn', {
    months: 'Ø¬Ø§ÙÙÙ_ÙÙÙØ±Ù_ÙØ§Ø±Ø³_Ø£ÙØ±ÙÙ_ÙØ§Ù_Ø¬ÙØ§Ù_Ø¬ÙÙÙÙØ©_Ø£ÙØª_Ø³Ø¨ØªÙØ¨Ø±_Ø£ÙØªÙØ¨Ø±_ÙÙÙÙØ¨Ø±_Ø¯ÙØ³ÙØ¨Ø±'.split('_'),
    monthsShort: 'Ø¬Ø§ÙÙÙ_ÙÙÙØ±Ù_ÙØ§Ø±Ø³_Ø£ÙØ±ÙÙ_ÙØ§Ù_Ø¬ÙØ§Ù_Ø¬ÙÙÙÙØ©_Ø£ÙØª_Ø³Ø¨ØªÙØ¨Ø±_Ø£ÙØªÙØ¨Ø±_ÙÙÙÙØ¨Ø±_Ø¯ÙØ³ÙØ¨Ø±'.split('_'),
    weekdays: 'Ø§ÙØ£Ø­Ø¯_Ø§ÙØ¥Ø«ÙÙÙ_Ø§ÙØ«ÙØ§Ø«Ø§Ø¡_Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡_Ø§ÙØ®ÙÙØ³_Ø§ÙØ¬ÙØ¹Ø©_Ø§ÙØ³Ø¨Øª'.split('_'),
    weekdaysShort: 'Ø£Ø­Ø¯_Ø¥Ø«ÙÙÙ_Ø«ÙØ§Ø«Ø§Ø¡_Ø£Ø±Ø¨Ø¹Ø§Ø¡_Ø®ÙÙØ³_Ø¬ÙØ¹Ø©_Ø³Ø¨Øª'.split('_'),
    weekdaysMin: 'Ø­_Ù_Ø«_Ø±_Ø®_Ø¬_Ø³'.split('_'),
    weekdaysParseExact : true,
    longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY HH:mm',
        LLLL: 'dddd D MMMM YYYY HH:mm'
    },
    calendar: {
        sameDay: '[Ø§ÙÙÙÙ Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT',
        nextDay: '[ØºØ¯Ø§ Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT',
        nextWeek: 'dddd [Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT',
        lastDay: '[Ø£ÙØ³ Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT',
        lastWeek: 'dddd [Ø¹ÙÙ Ø§ÙØ³Ø§Ø¹Ø©] LT',
        sameElse: 'L'
    },
    relativeTime: {
        future: 'ÙÙ %s',
        past: 'ÙÙØ° %s',
        s: 'Ø«ÙØ§Ù',
        m: 'Ø¯ÙÙÙØ©',
        mm: '%d Ø¯ÙØ§Ø¦Ù',
        h: 'Ø³Ø§Ø¹Ø©',
        hh: '%d Ø³Ø§Ø¹Ø§Øª',
        d: 'ÙÙÙ',
        dd: '%d Ø£ÙØ§Ù',
        M: 'Ø´ÙØ±',
        MM: '%d Ø£Ø´ÙØ±',
        y: 'Ø³ÙØ©',
        yy: '%d Ø³ÙÙØ§Øª'
    },
    week: {
        dow: 1, // Monday is the first day of the week.
        doy: 4 // The week that contains Jan 4th is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Arabic [ar]
//! author : Abdel Said: https://github.com/abdelsaid
//! author : Ahmed Elkhatib
//! author : forabi https://github.com/forabi

var symbolMap$2 = {
    '1': 'Ù¡',
    '2': 'Ù¢',
    '3': 'Ù£',
    '4': 'Ù¤',
    '5': 'Ù¥',
    '6': 'Ù¦',
    '7': 'Ù§',
    '8': 'Ù¨',
    '9': 'Ù©',
    '0': 'Ù '
};
var numberMap$1 = {
    'Ù¡': '1',
    'Ù¢': '2',
    'Ù£': '3',
    'Ù¤': '4',
    'Ù¥': '5',
    'Ù¦': '6',
    'Ù§': '7',
    'Ù¨': '8',
    'Ù©': '9',
    'Ù ': '0'
};
var pluralForm$1 = function (n) {
    return n === 0 ? 0 : n === 1 ? 1 : n === 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5;
};
var plurals$1 = {
    s : ['Ø£ÙÙ ÙÙ Ø«Ø§ÙÙØ©', 'Ø«Ø§ÙÙØ© ÙØ§Ø­Ø¯Ø©', ['Ø«Ø§ÙÙØªØ§Ù', 'Ø«Ø§ÙÙØªÙÙ'], '%d Ø«ÙØ§Ù', '%d Ø«Ø§ÙÙØ©', '%d Ø«Ø§ÙÙØ©'],
    m : ['Ø£ÙÙ ÙÙ Ø¯ÙÙÙØ©', 'Ø¯ÙÙÙØ© ÙØ§Ø­Ø¯Ø©', ['Ø¯ÙÙÙØªØ§Ù', 'Ø¯ÙÙÙØªÙÙ'], '%d Ø¯ÙØ§Ø¦Ù', '%d Ø¯ÙÙÙØ©', '%d Ø¯ÙÙÙØ©'],
    h : ['Ø£ÙÙ ÙÙ Ø³Ø§Ø¹Ø©', 'Ø³Ø§Ø¹Ø© ÙØ§Ø­Ø¯Ø©', ['Ø³Ø§Ø¹ØªØ§Ù', 'Ø³Ø§Ø¹ØªÙÙ'], '%d Ø³Ø§Ø¹Ø§Øª', '%d Ø³Ø§Ø¹Ø©', '%d Ø³Ø§Ø¹Ø©'],
    d : ['Ø£ÙÙ ÙÙ ÙÙÙ', 'ÙÙÙ ÙØ§Ø­Ø¯', ['ÙÙÙØ§Ù', 'ÙÙÙÙÙ'], '%d Ø£ÙØ§Ù', '%d ÙÙÙÙØ§', '%d ÙÙÙ'],
    M : ['Ø£ÙÙ ÙÙ Ø´ÙØ±', 'Ø´ÙØ± ÙØ§Ø­Ø¯', ['Ø´ÙØ±Ø§Ù', 'Ø´ÙØ±ÙÙ'], '%d Ø£Ø´ÙØ±', '%d Ø´ÙØ±Ø§', '%d Ø´ÙØ±'],
    y : ['Ø£ÙÙ ÙÙ Ø¹Ø§Ù', 'Ø¹Ø§Ù ÙØ§Ø­Ø¯', ['Ø¹Ø§ÙØ§Ù', 'Ø¹Ø§ÙÙÙ'], '%d Ø£Ø¹ÙØ§Ù', '%d Ø¹Ø§ÙÙØ§', '%d Ø¹Ø§Ù']
};
var pluralize$1 = function (u) {
    return function (number, withoutSuffix, string, isFuture) {
        var f = pluralForm$1(number),
            str = plurals$1[u][pluralForm$1(number)];
        if (f === 2) {
            str = str[withoutSuffix ? 0 : 1];
        }
        return str.replace(/%d/i, number);
    };
};
var months$2 = [
    'ÙØ§ÙÙÙ Ø§ÙØ«Ø§ÙÙ ÙÙØ§ÙØ±',
    'Ø´Ø¨Ø§Ø· ÙØ¨Ø±Ø§ÙØ±',
    'Ø¢Ø°Ø§Ø± ÙØ§Ø±Ø³',
    'ÙÙØ³Ø§Ù Ø£Ø¨Ø±ÙÙ',
    'Ø£ÙØ§Ø± ÙØ§ÙÙ',
    'Ø­Ø²ÙØ±Ø§Ù ÙÙÙÙÙ',
    'ØªÙÙØ² ÙÙÙÙÙ',
    'Ø¢Ø¨ Ø£ØºØ³Ø·Ø³',
    'Ø£ÙÙÙÙ Ø³Ø¨ØªÙØ¨Ø±',
    'ØªØ´Ø±ÙÙ Ø§ÙØ£ÙÙ Ø£ÙØªÙØ¨Ø±',
    'ØªØ´Ø±ÙÙ Ø§ÙØ«Ø§ÙÙ ÙÙÙÙØ¨Ø±',
    'ÙØ§ÙÙÙ Ø§ÙØ£ÙÙ Ø¯ÙØ³ÙØ¨Ø±'
];

hooks.defineLocale('ar', {
    months : months$2,
    monthsShort : months$2,
    weekdays : 'Ø§ÙØ£Ø­Ø¯_Ø§ÙØ¥Ø«ÙÙÙ_Ø§ÙØ«ÙØ§Ø«Ø§Ø¡_Ø§ÙØ£Ø±Ø¨Ø¹Ø§Ø¡_Ø§ÙØ®ÙÙØ³_Ø§ÙØ¬ÙØ¹Ø©_Ø§ÙØ³Ø¨Øª'.split('_'),
    weekdaysShort : 'Ø£Ø­Ø¯_Ø¥Ø«ÙÙÙ_Ø«ÙØ§Ø«Ø§Ø¡_Ø£Ø±Ø¨Ø¹Ø§Ø¡_Ø®ÙÙØ³_Ø¬ÙØ¹Ø©_Ø³Ø¨Øª'.split('_'),
    weekdaysMin : 'Ø­_Ù_Ø«_Ø±_Ø®_Ø¬_Ø³'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'D/\u200FM/\u200FYYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    meridiemParse: /Øµ|Ù/,
    isPM : function (input) {
        return 'Ù' === input;
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 12) {
            return 'Øµ';
        } else {
            return 'Ù';
        }
    },
    calendar : {
        sameDay: '[Ø§ÙÙÙÙ Ø¹ÙØ¯ Ø§ÙØ³Ø§Ø¹Ø©] LT',
        nextDay: '[ØºØ¯ÙØ§ Ø¹ÙØ¯ Ø§ÙØ³Ø§Ø¹Ø©] LT',
        nextWeek: 'dddd [Ø¹ÙØ¯ Ø§ÙØ³Ø§Ø¹Ø©] LT',
        lastDay: '[Ø£ÙØ³ Ø¹ÙØ¯ Ø§ÙØ³Ø§Ø¹Ø©] LT',
        lastWeek: 'dddd [Ø¹ÙØ¯ Ø§ÙØ³Ø§Ø¹Ø©] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'Ø¨Ø¹Ø¯ %s',
        past : 'ÙÙØ° %s',
        s : pluralize$1('s'),
        m : pluralize$1('m'),
        mm : pluralize$1('m'),
        h : pluralize$1('h'),
        hh : pluralize$1('h'),
        d : pluralize$1('d'),
        dd : pluralize$1('d'),
        M : pluralize$1('M'),
        MM : pluralize$1('M'),
        y : pluralize$1('y'),
        yy : pluralize$1('y')
    },
    preparse: function (string) {
        return string.replace(/\u200f/g, '').replace(/[Ù¡Ù¢Ù£Ù¤Ù¥Ù¦Ù§Ù¨Ù©Ù ]/g, function (match) {
            return numberMap$1[match];
        }).replace(/Ø/g, ',');
    },
    postformat: function (string) {
        return string.replace(/\d/g, function (match) {
            return symbolMap$2[match];
        }).replace(/,/g, 'Ø');
    },
    week : {
        dow : 6, // Saturday is the first day of the week.
        doy : 12  // The week that contains Jan 1st is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Azerbaijani [az]
//! author : topchiyev : https://github.com/topchiyev

var suffixes = {
    1: '-inci',
    5: '-inci',
    8: '-inci',
    70: '-inci',
    80: '-inci',
    2: '-nci',
    7: '-nci',
    20: '-nci',
    50: '-nci',
    3: '-Ã¼ncÃ¼',
    4: '-Ã¼ncÃ¼',
    100: '-Ã¼ncÃ¼',
    6: '-ncÄ±',
    9: '-uncu',
    10: '-uncu',
    30: '-uncu',
    60: '-Ä±ncÄ±',
    90: '-Ä±ncÄ±'
};

hooks.defineLocale('az', {
    months : 'yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr'.split('_'),
    monthsShort : 'yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek'.split('_'),
    weekdays : 'Bazar_Bazar ertÉsi_ÃÉrÅÉnbÉ axÅamÄ±_ÃÉrÅÉnbÉ_CÃ¼mÉ axÅamÄ±_CÃ¼mÉ_ÅÉnbÉ'.split('_'),
    weekdaysShort : 'Baz_BzE_ÃAx_ÃÉr_CAx_CÃ¼m_ÅÉn'.split('_'),
    weekdaysMin : 'Bz_BE_ÃA_ÃÉ_CA_CÃ¼_ÅÉ'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[bugÃ¼n saat] LT',
        nextDay : '[sabah saat] LT',
        nextWeek : '[gÉlÉn hÉftÉ] dddd [saat] LT',
        lastDay : '[dÃ¼nÉn] LT',
        lastWeek : '[keÃ§Én hÉftÉ] dddd [saat] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s sonra',
        past : '%s ÉvvÉl',
        s : 'birneÃ§É saniyyÉ',
        m : 'bir dÉqiqÉ',
        mm : '%d dÉqiqÉ',
        h : 'bir saat',
        hh : '%d saat',
        d : 'bir gÃ¼n',
        dd : '%d gÃ¼n',
        M : 'bir ay',
        MM : '%d ay',
        y : 'bir il',
        yy : '%d il'
    },
    meridiemParse: /gecÉ|sÉhÉr|gÃ¼ndÃ¼z|axÅam/,
    isPM : function (input) {
        return /^(gÃ¼ndÃ¼z|axÅam)$/.test(input);
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 4) {
            return 'gecÉ';
        } else if (hour < 12) {
            return 'sÉhÉr';
        } else if (hour < 17) {
            return 'gÃ¼ndÃ¼z';
        } else {
            return 'axÅam';
        }
    },
    ordinalParse: /\d{1,2}-(Ä±ncÄ±|inci|nci|Ã¼ncÃ¼|ncÄ±|uncu)/,
    ordinal : function (number) {
        if (number === 0) {  // special case for zero
            return number + '-Ä±ncÄ±';
        }
        var a = number % 10,
            b = number % 100 - a,
            c = number >= 100 ? 100 : null;
        return number + (suffixes[a] || suffixes[b] || suffixes[c]);
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Belarusian [be]
//! author : Dmitry Demidov : https://github.com/demidov91
//! author: Praleska: http://praleska.pro/
//! Author : Menelion ElensÃºle : https://github.com/Oire

function plural(word, num) {
    var forms = word.split('_');
    return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
}
function relativeTimeWithPlural(number, withoutSuffix, key) {
    var format = {
        'mm': withoutSuffix ? 'ÑÐ²ÑÐ»ÑÐ½Ð°_ÑÐ²ÑÐ»ÑÐ½Ñ_ÑÐ²ÑÐ»ÑÐ½' : 'ÑÐ²ÑÐ»ÑÐ½Ñ_ÑÐ²ÑÐ»ÑÐ½Ñ_ÑÐ²ÑÐ»ÑÐ½',
        'hh': withoutSuffix ? 'Ð³Ð°Ð´Ð·ÑÐ½Ð°_Ð³Ð°Ð´Ð·ÑÐ½Ñ_Ð³Ð°Ð´Ð·ÑÐ½' : 'Ð³Ð°Ð´Ð·ÑÐ½Ñ_Ð³Ð°Ð´Ð·ÑÐ½Ñ_Ð³Ð°Ð´Ð·ÑÐ½',
        'dd': 'Ð´Ð·ÐµÐ½Ñ_Ð´Ð½Ñ_Ð´Ð·ÑÐ½',
        'MM': 'Ð¼ÐµÑÑÑ_Ð¼ÐµÑÑÑÑ_Ð¼ÐµÑÑÑÐ°Ñ',
        'yy': 'Ð³Ð¾Ð´_Ð³Ð°Ð´Ñ_Ð³Ð°Ð´Ð¾Ñ'
    };
    if (key === 'm') {
        return withoutSuffix ? 'ÑÐ²ÑÐ»ÑÐ½Ð°' : 'ÑÐ²ÑÐ»ÑÐ½Ñ';
    }
    else if (key === 'h') {
        return withoutSuffix ? 'Ð³Ð°Ð´Ð·ÑÐ½Ð°' : 'Ð³Ð°Ð´Ð·ÑÐ½Ñ';
    }
    else {
        return number + ' ' + plural(format[key], +number);
    }
}

hooks.defineLocale('be', {
    months : {
        format: 'ÑÑÑÐ´Ð·ÐµÐ½Ñ_Ð»ÑÑÐ°Ð³Ð°_ÑÐ°ÐºÐ°Ð²ÑÐºÐ°_ÐºÑÐ°ÑÐ°Ð²ÑÐºÐ°_ÑÑÐ°ÑÐ½Ñ_ÑÑÑÐ²ÐµÐ½Ñ_Ð»ÑÐ¿ÐµÐ½Ñ_Ð¶Ð½ÑÑÐ½Ñ_Ð²ÐµÑÐ°ÑÐ½Ñ_ÐºÐ°ÑÑÑÑÑÐ½ÑÐºÐ°_Ð»ÑÑÑÐ°Ð¿Ð°Ð´Ð°_ÑÐ½ÐµÐ¶Ð½Ñ'.split('_'),
        standalone: 'ÑÑÑÐ´Ð·ÐµÐ½Ñ_Ð»ÑÑÑ_ÑÐ°ÐºÐ°Ð²ÑÐº_ÐºÑÐ°ÑÐ°Ð²ÑÐº_ÑÑÐ°Ð²ÐµÐ½Ñ_ÑÑÑÐ²ÐµÐ½Ñ_Ð»ÑÐ¿ÐµÐ½Ñ_Ð¶Ð½ÑÐ²ÐµÐ½Ñ_Ð²ÐµÑÐ°ÑÐµÐ½Ñ_ÐºÐ°ÑÑÑÑÑÐ½ÑÐº_Ð»ÑÑÑÐ°Ð¿Ð°Ð´_ÑÐ½ÐµÐ¶Ð°Ð½Ñ'.split('_')
    },
    monthsShort : 'ÑÑÑÐ´_Ð»ÑÑ_ÑÐ°Ðº_ÐºÑÐ°Ñ_ÑÑÐ°Ð²_ÑÑÑÐ²_Ð»ÑÐ¿_Ð¶Ð½ÑÐ²_Ð²ÐµÑ_ÐºÐ°ÑÑ_Ð»ÑÑÑ_ÑÐ½ÐµÐ¶'.split('_'),
    weekdays : {
        format: 'Ð½ÑÐ´Ð·ÐµÐ»Ñ_Ð¿Ð°Ð½ÑÐ´Ð·ÐµÐ»Ð°Ðº_Ð°ÑÑÐ¾ÑÐ°Ðº_ÑÐµÑÐ°Ð´Ñ_ÑÐ°ÑÐ²ÐµÑ_Ð¿ÑÑÐ½ÑÑÑ_ÑÑÐ±Ð¾ÑÑ'.split('_'),
        standalone: 'Ð½ÑÐ´Ð·ÐµÐ»Ñ_Ð¿Ð°Ð½ÑÐ´Ð·ÐµÐ»Ð°Ðº_Ð°ÑÑÐ¾ÑÐ°Ðº_ÑÐµÑÐ°Ð´Ð°_ÑÐ°ÑÐ²ÐµÑ_Ð¿ÑÑÐ½ÑÑÐ°_ÑÑÐ±Ð¾ÑÐ°'.split('_'),
        isFormat: /\[ ?[ÐÐ²] ?(?:Ð¼ÑÐ½ÑÐ»ÑÑ|Ð½Ð°ÑÑÑÐ¿Ð½ÑÑ)? ?\] ?dddd/
    },
    weekdaysShort : 'Ð½Ð´_Ð¿Ð½_Ð°Ñ_ÑÑ_ÑÑ_Ð¿Ñ_ÑÐ±'.split('_'),
    weekdaysMin : 'Ð½Ð´_Ð¿Ð½_Ð°Ñ_ÑÑ_ÑÑ_Ð¿Ñ_ÑÐ±'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D MMMM YYYY Ð³.',
        LLL : 'D MMMM YYYY Ð³., HH:mm',
        LLLL : 'dddd, D MMMM YYYY Ð³., HH:mm'
    },
    calendar : {
        sameDay: '[Ð¡ÑÐ½Ð½Ñ Ñ] LT',
        nextDay: '[ÐÐ°ÑÑÑÐ° Ñ] LT',
        lastDay: '[Ð£ÑÐ¾ÑÐ° Ñ] LT',
        nextWeek: function () {
            return '[Ð£] dddd [Ñ] LT';
        },
        lastWeek: function () {
            switch (this.day()) {
                case 0:
                case 3:
                case 5:
                case 6:
                    return '[Ð£ Ð¼ÑÐ½ÑÐ»ÑÑ] dddd [Ñ] LT';
                case 1:
                case 2:
                case 4:
                    return '[Ð£ Ð¼ÑÐ½ÑÐ»Ñ] dddd [Ñ] LT';
            }
        },
        sameElse: 'L'
    },
    relativeTime : {
        future : 'Ð¿ÑÐ°Ð· %s',
        past : '%s ÑÐ°Ð¼Ñ',
        s : 'Ð½ÐµÐºÐ°Ð»ÑÐºÑ ÑÐµÐºÑÐ½Ð´',
        m : relativeTimeWithPlural,
        mm : relativeTimeWithPlural,
        h : relativeTimeWithPlural,
        hh : relativeTimeWithPlural,
        d : 'Ð´Ð·ÐµÐ½Ñ',
        dd : relativeTimeWithPlural,
        M : 'Ð¼ÐµÑÑÑ',
        MM : relativeTimeWithPlural,
        y : 'Ð³Ð¾Ð´',
        yy : relativeTimeWithPlural
    },
    meridiemParse: /Ð½Ð¾ÑÑ|ÑÐ°Ð½ÑÑÑ|Ð´Ð½Ñ|Ð²ÐµÑÐ°ÑÐ°/,
    isPM : function (input) {
        return /^(Ð´Ð½Ñ|Ð²ÐµÑÐ°ÑÐ°)$/.test(input);
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 4) {
            return 'Ð½Ð¾ÑÑ';
        } else if (hour < 12) {
            return 'ÑÐ°Ð½ÑÑÑ';
        } else if (hour < 17) {
            return 'Ð´Ð½Ñ';
        } else {
            return 'Ð²ÐµÑÐ°ÑÐ°';
        }
    },
    ordinalParse: /\d{1,2}-(Ñ|Ñ|Ð³Ð°)/,
    ordinal: function (number, period) {
        switch (period) {
            case 'M':
            case 'd':
            case 'DDD':
            case 'w':
            case 'W':
                return (number % 10 === 2 || number % 10 === 3) && (number % 100 !== 12 && number % 100 !== 13) ? number + '-Ñ' : number + '-Ñ';
            case 'D':
                return number + '-Ð³Ð°';
            default:
                return number;
        }
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Bulgarian [bg]
//! author : Krasen Borisov : https://github.com/kraz

hooks.defineLocale('bg', {
    months : 'ÑÐ½ÑÐ°ÑÐ¸_ÑÐµÐ²ÑÑÐ°ÑÐ¸_Ð¼Ð°ÑÑ_Ð°Ð¿ÑÐ¸Ð»_Ð¼Ð°Ð¹_ÑÐ½Ð¸_ÑÐ»Ð¸_Ð°Ð²Ð³ÑÑÑ_ÑÐµÐ¿ÑÐµÐ¼Ð²ÑÐ¸_Ð¾ÐºÑÐ¾Ð¼Ð²ÑÐ¸_Ð½Ð¾ÐµÐ¼Ð²ÑÐ¸_Ð´ÐµÐºÐµÐ¼Ð²ÑÐ¸'.split('_'),
    monthsShort : 'ÑÐ½Ñ_ÑÐµÐ²_Ð¼Ð°Ñ_Ð°Ð¿Ñ_Ð¼Ð°Ð¹_ÑÐ½Ð¸_ÑÐ»Ð¸_Ð°Ð²Ð³_ÑÐµÐ¿_Ð¾ÐºÑ_Ð½Ð¾Ðµ_Ð´ÐµÐº'.split('_'),
    weekdays : 'Ð½ÐµÐ´ÐµÐ»Ñ_Ð¿Ð¾Ð½ÐµÐ´ÐµÐ»Ð½Ð¸Ðº_Ð²ÑÐ¾ÑÐ½Ð¸Ðº_ÑÑÑÐ´Ð°_ÑÐµÑÐ²ÑÑÑÑÐº_Ð¿ÐµÑÑÐº_ÑÑÐ±Ð¾ÑÐ°'.split('_'),
    weekdaysShort : 'Ð½ÐµÐ´_Ð¿Ð¾Ð½_Ð²ÑÐ¾_ÑÑÑ_ÑÐµÑ_Ð¿ÐµÑ_ÑÑÐ±'.split('_'),
    weekdaysMin : 'Ð½Ð´_Ð¿Ð½_Ð²Ñ_ÑÑ_ÑÑ_Ð¿Ñ_ÑÐ±'.split('_'),
    longDateFormat : {
        LT : 'H:mm',
        LTS : 'H:mm:ss',
        L : 'D.MM.YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY H:mm',
        LLLL : 'dddd, D MMMM YYYY H:mm'
    },
    calendar : {
        sameDay : '[ÐÐ½ÐµÑ Ð²] LT',
        nextDay : '[Ð£ÑÑÐµ Ð²] LT',
        nextWeek : 'dddd [Ð²] LT',
        lastDay : '[ÐÑÐµÑÐ° Ð²] LT',
        lastWeek : function () {
            switch (this.day()) {
                case 0:
                case 3:
                case 6:
                    return '[Ð Ð¸Ð·Ð¼Ð¸Ð½Ð°Ð»Ð°ÑÐ°] dddd [Ð²] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[Ð Ð¸Ð·Ð¼Ð¸Ð½Ð°Ð»Ð¸Ñ] dddd [Ð²] LT';
            }
        },
        sameElse : 'L'
    },
    relativeTime : {
        future : 'ÑÐ»ÐµÐ´ %s',
        past : 'Ð¿ÑÐµÐ´Ð¸ %s',
        s : 'Ð½ÑÐºÐ¾Ð»ÐºÐ¾ ÑÐµÐºÑÐ½Ð´Ð¸',
        m : 'Ð¼Ð¸Ð½ÑÑÐ°',
        mm : '%d Ð¼Ð¸Ð½ÑÑÐ¸',
        h : 'ÑÐ°Ñ',
        hh : '%d ÑÐ°ÑÐ°',
        d : 'Ð´ÐµÐ½',
        dd : '%d Ð´Ð½Ð¸',
        M : 'Ð¼ÐµÑÐµÑ',
        MM : '%d Ð¼ÐµÑÐµÑÐ°',
        y : 'Ð³Ð¾Ð´Ð¸Ð½Ð°',
        yy : '%d Ð³Ð¾Ð´Ð¸Ð½Ð¸'
    },
    ordinalParse: /\d{1,2}-(ÐµÐ²|ÐµÐ½|ÑÐ¸|Ð²Ð¸|ÑÐ¸|Ð¼Ð¸)/,
    ordinal : function (number) {
        var lastDigit = number % 10,
            last2Digits = number % 100;
        if (number === 0) {
            return number + '-ÐµÐ²';
        } else if (last2Digits === 0) {
            return number + '-ÐµÐ½';
        } else if (last2Digits > 10 && last2Digits < 20) {
            return number + '-ÑÐ¸';
        } else if (lastDigit === 1) {
            return number + '-Ð²Ð¸';
        } else if (lastDigit === 2) {
            return number + '-ÑÐ¸';
        } else if (lastDigit === 7 || lastDigit === 8) {
            return number + '-Ð¼Ð¸';
        } else {
            return number + '-ÑÐ¸';
        }
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Bengali [bn]
//! author : Kaushik Gandhi : https://github.com/kaushikgandhi

var symbolMap$3 = {
    '1': 'à§§',
    '2': 'à§¨',
    '3': 'à§©',
    '4': 'à§ª',
    '5': 'à§«',
    '6': 'à§¬',
    '7': 'à§­',
    '8': 'à§®',
    '9': 'à§¯',
    '0': 'à§¦'
};
var numberMap$2 = {
    'à§§': '1',
    'à§¨': '2',
    'à§©': '3',
    'à§ª': '4',
    'à§«': '5',
    'à§¬': '6',
    'à§­': '7',
    'à§®': '8',
    'à§¯': '9',
    'à§¦': '0'
};

hooks.defineLocale('bn', {
    months : 'à¦à¦¾à¦¨à§à§à¦¾à¦°à§_à¦«à§à¦¬à§à¦°à§à§à¦¾à¦°à¦¿_à¦®à¦¾à¦°à§à¦_à¦à¦ªà§à¦°à¦¿à¦²_à¦®à§_à¦à§à¦¨_à¦à§à¦²à¦¾à¦_à¦à¦à¦¸à§à¦_à¦¸à§à¦ªà§à¦à§à¦®à§à¦¬à¦°_à¦à¦à§à¦à§à¦¬à¦°_à¦¨à¦­à§à¦®à§à¦¬à¦°_à¦¡à¦¿à¦¸à§à¦®à§à¦¬à¦°'.split('_'),
    monthsShort : 'à¦à¦¾à¦¨à§_à¦«à§à¦¬_à¦®à¦¾à¦°à§à¦_à¦à¦ªà§à¦°_à¦®à§_à¦à§à¦¨_à¦à§à¦²_à¦à¦_à¦¸à§à¦ªà§à¦_à¦à¦à§à¦à§_à¦¨à¦­à§_à¦¡à¦¿à¦¸à§'.split('_'),
    weekdays : 'à¦°à¦¬à¦¿à¦¬à¦¾à¦°_à¦¸à§à¦®à¦¬à¦¾à¦°_à¦®à¦à§à¦à¦²à¦¬à¦¾à¦°_à¦¬à§à¦§à¦¬à¦¾à¦°_à¦¬à§à¦¹à¦¸à§à¦ªà¦¤à¦¿à¦¬à¦¾à¦°_à¦¶à§à¦à§à¦°à¦¬à¦¾à¦°_à¦¶à¦¨à¦¿à¦¬à¦¾à¦°'.split('_'),
    weekdaysShort : 'à¦°à¦¬à¦¿_à¦¸à§à¦®_à¦®à¦à§à¦à¦²_à¦¬à§à¦§_à¦¬à§à¦¹à¦¸à§à¦ªà¦¤à¦¿_à¦¶à§à¦à§à¦°_à¦¶à¦¨à¦¿'.split('_'),
    weekdaysMin : 'à¦°à¦¬à¦¿_à¦¸à§à¦®_à¦®à¦à§à¦_à¦¬à§à¦§_à¦¬à§à¦¹à¦_à¦¶à§à¦à§à¦°_à¦¶à¦¨à¦¿'.split('_'),
    longDateFormat : {
        LT : 'A h:mm à¦¸à¦®à§',
        LTS : 'A h:mm:ss à¦¸à¦®à§',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY, A h:mm à¦¸à¦®à§',
        LLLL : 'dddd, D MMMM YYYY, A h:mm à¦¸à¦®à§'
    },
    calendar : {
        sameDay : '[à¦à¦] LT',
        nextDay : '[à¦à¦à¦¾à¦®à§à¦à¦¾à¦²] LT',
        nextWeek : 'dddd, LT',
        lastDay : '[à¦à¦¤à¦à¦¾à¦²] LT',
        lastWeek : '[à¦à¦¤] dddd, LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s à¦ªà¦°à§',
        past : '%s à¦à¦à§',
        s : 'à¦à§à§à¦ à¦¸à§à¦à§à¦¨à§à¦¡',
        m : 'à¦à¦ à¦®à¦¿à¦¨à¦¿à¦',
        mm : '%d à¦®à¦¿à¦¨à¦¿à¦',
        h : 'à¦à¦ à¦à¦¨à§à¦à¦¾',
        hh : '%d à¦à¦¨à§à¦à¦¾',
        d : 'à¦à¦ à¦¦à¦¿à¦¨',
        dd : '%d à¦¦à¦¿à¦¨',
        M : 'à¦à¦ à¦®à¦¾à¦¸',
        MM : '%d à¦®à¦¾à¦¸',
        y : 'à¦à¦ à¦¬à¦à¦°',
        yy : '%d à¦¬à¦à¦°'
    },
    preparse: function (string) {
        return string.replace(/[à§§à§¨à§©à§ªà§«à§¬à§­à§®à§¯à§¦]/g, function (match) {
            return numberMap$2[match];
        });
    },
    postformat: function (string) {
        return string.replace(/\d/g, function (match) {
            return symbolMap$3[match];
        });
    },
    meridiemParse: /à¦°à¦¾à¦¤|à¦¸à¦à¦¾à¦²|à¦¦à§à¦ªà§à¦°|à¦¬à¦¿à¦à¦¾à¦²|à¦°à¦¾à¦¤/,
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if ((meridiem === 'à¦°à¦¾à¦¤' && hour >= 4) ||
                (meridiem === 'à¦¦à§à¦ªà§à¦°' && hour < 5) ||
                meridiem === 'à¦¬à¦¿à¦à¦¾à¦²') {
            return hour + 12;
        } else {
            return hour;
        }
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 4) {
            return 'à¦°à¦¾à¦¤';
        } else if (hour < 10) {
            return 'à¦¸à¦à¦¾à¦²';
        } else if (hour < 17) {
            return 'à¦¦à§à¦ªà§à¦°';
        } else if (hour < 20) {
            return 'à¦¬à¦¿à¦à¦¾à¦²';
        } else {
            return 'à¦°à¦¾à¦¤';
        }
    },
    week : {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 1st is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Tibetan [bo]
//! author : Thupten N. Chakrishar : https://github.com/vajradog

var symbolMap$4 = {
    '1': 'à¼¡',
    '2': 'à¼¢',
    '3': 'à¼£',
    '4': 'à¼¤',
    '5': 'à¼¥',
    '6': 'à¼¦',
    '7': 'à¼§',
    '8': 'à¼¨',
    '9': 'à¼©',
    '0': 'à¼ '
};
var numberMap$3 = {
    'à¼¡': '1',
    'à¼¢': '2',
    'à¼£': '3',
    'à¼¤': '4',
    'à¼¥': '5',
    'à¼¦': '6',
    'à¼§': '7',
    'à¼¨': '8',
    'à¼©': '9',
    'à¼ ': '0'
};

hooks.defineLocale('bo', {
    months : 'à½à¾³à¼à½à¼à½à½à¼à½à½¼_à½à¾³à¼à½à¼à½à½à½²à½¦à¼à½_à½à¾³à¼à½à¼à½à½¦à½´à½à¼à½_à½à¾³à¼à½à¼à½à½à½²à¼à½_à½à¾³à¼à½à¼à½£à¾à¼à½_à½à¾³à¼à½à¼à½à¾²à½´à½à¼à½_à½à¾³à¼à½à¼à½à½à½´à½à¼à½_à½à¾³à¼à½à¼à½à½¢à¾à¾±à½à¼à½_à½à¾³à¼à½à¼à½à½à½´à¼à½_à½à¾³à¼à½à¼à½à½à½´à¼à½_à½à¾³à¼à½à¼à½à½à½´à¼à½à½à½²à½à¼à½_à½à¾³à¼à½à¼à½à½à½´à¼à½à½à½²à½¦à¼à½'.split('_'),
    monthsShort : 'à½à¾³à¼à½à¼à½à½à¼à½à½¼_à½à¾³à¼à½à¼à½à½à½²à½¦à¼à½_à½à¾³à¼à½à¼à½à½¦à½´à½à¼à½_à½à¾³à¼à½à¼à½à½à½²à¼à½_à½à¾³à¼à½à¼à½£à¾à¼à½_à½à¾³à¼à½à¼à½à¾²à½´à½à¼à½_à½à¾³à¼à½à¼à½à½à½´à½à¼à½_à½à¾³à¼à½à¼à½à½¢à¾à¾±à½à¼à½_à½à¾³à¼à½à¼à½à½à½´à¼à½_à½à¾³à¼à½à¼à½à½à½´à¼à½_à½à¾³à¼à½à¼à½à½à½´à¼à½à½à½²à½à¼à½_à½à¾³à¼à½à¼à½à½à½´à¼à½à½à½²à½¦à¼à½'.split('_'),
    weekdays : 'à½à½à½ à¼à½à½²à¼à½à¼_à½à½à½ à¼à½à¾³à¼à½à¼_à½à½à½ à¼à½à½²à½à¼à½à½à½¢à¼_à½à½à½ à¼à½£à¾·à½à¼à½à¼_à½à½à½ à¼à½à½´à½¢à¼à½à½´_à½à½à½ à¼à½à¼à½¦à½à½¦à¼_à½à½à½ à¼à½¦à¾¤à½ºà½à¼à½à¼'.split('_'),
    weekdaysShort : 'à½à½²à¼à½à¼_à½à¾³à¼à½à¼_à½à½²à½à¼à½à½à½¢à¼_à½£à¾·à½à¼à½à¼_à½à½´à½¢à¼à½à½´_à½à¼à½¦à½à½¦à¼_à½¦à¾¤à½ºà½à¼à½à¼'.split('_'),
    weekdaysMin : 'à½à½²à¼à½à¼_à½à¾³à¼à½à¼_à½à½²à½à¼à½à½à½¢à¼_à½£à¾·à½à¼à½à¼_à½à½´à½¢à¼à½à½´_à½à¼à½¦à½à½¦à¼_à½¦à¾¤à½ºà½à¼à½à¼'.split('_'),
    longDateFormat : {
        LT : 'A h:mm',
        LTS : 'A h:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY, A h:mm',
        LLLL : 'dddd, D MMMM YYYY, A h:mm'
    },
    calendar : {
        sameDay : '[à½à½²à¼à½¢à½²à½] LT',
        nextDay : '[à½¦à½à¼à½à½²à½] LT',
        nextWeek : '[à½à½à½´à½à¼à½à¾²à½à¼à½¢à¾à½ºà½¦à¼à½], LT',
        lastDay : '[à½à¼à½¦à½] LT',
        lastWeek : '[à½à½à½´à½à¼à½à¾²à½à¼à½à½à½ à¼à½] dddd, LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s à½£à¼',
        past : '%s à½¦à¾à½à¼à½£',
        s : 'à½£à½à¼à½¦à½',
        m : 'à½¦à¾à½¢à¼à½à¼à½à½à½²à½',
        mm : '%d à½¦à¾à½¢à¼à½',
        h : 'à½à½´à¼à½à½¼à½à¼à½à½à½²à½',
        hh : '%d à½à½´à¼à½à½¼à½',
        d : 'à½à½²à½à¼à½à½à½²à½',
        dd : '%d à½à½²à½à¼',
        M : 'à½à¾³à¼à½à¼à½à½à½²à½',
        MM : '%d à½à¾³à¼à½',
        y : 'à½£à½¼à¼à½à½à½²à½',
        yy : '%d à½£à½¼'
    },
    preparse: function (string) {
        return string.replace(/[à¼¡à¼¢à¼£à¼¤à¼¥à¼¦à¼§à¼¨à¼©à¼ ]/g, function (match) {
            return numberMap$3[match];
        });
    },
    postformat: function (string) {
        return string.replace(/\d/g, function (match) {
            return symbolMap$4[match];
        });
    },
    meridiemParse: /à½à½à½à¼à½à½¼|à½à½¼à½à½¦à¼à½à½¦|à½à½²à½à¼à½à½´à½|à½à½à½¼à½à¼à½à½|à½à½à½à¼à½à½¼/,
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if ((meridiem === 'à½à½à½à¼à½à½¼' && hour >= 4) ||
                (meridiem === 'à½à½²à½à¼à½à½´à½' && hour < 5) ||
                meridiem === 'à½à½à½¼à½à¼à½à½') {
            return hour + 12;
        } else {
            return hour;
        }
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 4) {
            return 'à½à½à½à¼à½à½¼';
        } else if (hour < 10) {
            return 'à½à½¼à½à½¦à¼à½à½¦';
        } else if (hour < 17) {
            return 'à½à½²à½à¼à½à½´à½';
        } else if (hour < 20) {
            return 'à½à½à½¼à½à¼à½à½';
        } else {
            return 'à½à½à½à¼à½à½¼';
        }
    },
    week : {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 1st is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Breton [br]
//! author : Jean-Baptiste Le Duigou : https://github.com/jbleduigou

function relativeTimeWithMutation(number, withoutSuffix, key) {
    var format = {
        'mm': 'munutenn',
        'MM': 'miz',
        'dd': 'devezh'
    };
    return number + ' ' + mutation(format[key], number);
}
function specialMutationForYears(number) {
    switch (lastNumber(number)) {
        case 1:
        case 3:
        case 4:
        case 5:
        case 9:
            return number + ' bloaz';
        default:
            return number + ' vloaz';
    }
}
function lastNumber(number) {
    if (number > 9) {
        return lastNumber(number % 10);
    }
    return number;
}
function mutation(text, number) {
    if (number === 2) {
        return softMutation(text);
    }
    return text;
}
function softMutation(text) {
    var mutationTable = {
        'm': 'v',
        'b': 'v',
        'd': 'z'
    };
    if (mutationTable[text.charAt(0)] === undefined) {
        return text;
    }
    return mutationTable[text.charAt(0)] + text.substring(1);
}

hooks.defineLocale('br', {
    months : 'Genver_C\'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu'.split('_'),
    monthsShort : 'Gen_C\'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker'.split('_'),
    weekdays : 'Sul_Lun_Meurzh_Merc\'her_Yaou_Gwener_Sadorn'.split('_'),
    weekdaysShort : 'Sul_Lun_Meu_Mer_Yao_Gwe_Sad'.split('_'),
    weekdaysMin : 'Su_Lu_Me_Mer_Ya_Gw_Sa'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'h[e]mm A',
        LTS : 'h[e]mm:ss A',
        L : 'DD/MM/YYYY',
        LL : 'D [a viz] MMMM YYYY',
        LLL : 'D [a viz] MMMM YYYY h[e]mm A',
        LLLL : 'dddd, D [a viz] MMMM YYYY h[e]mm A'
    },
    calendar : {
        sameDay : '[Hiziv da] LT',
        nextDay : '[Warc\'hoazh da] LT',
        nextWeek : 'dddd [da] LT',
        lastDay : '[Dec\'h da] LT',
        lastWeek : 'dddd [paset da] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'a-benn %s',
        past : '%s \'zo',
        s : 'un nebeud segondennoÃ¹',
        m : 'ur vunutenn',
        mm : relativeTimeWithMutation,
        h : 'un eur',
        hh : '%d eur',
        d : 'un devezh',
        dd : relativeTimeWithMutation,
        M : 'ur miz',
        MM : relativeTimeWithMutation,
        y : 'ur bloaz',
        yy : specialMutationForYears
    },
    ordinalParse: /\d{1,2}(aÃ±|vet)/,
    ordinal : function (number) {
        var output = (number === 1) ? 'aÃ±' : 'vet';
        return number + output;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Bosnian [bs]
//! author : Nedim Cholich : https://github.com/frontyard
//! based on (hr) translation by Bojan MarkoviÄ

function translate(number, withoutSuffix, key) {
    var result = number + ' ';
    switch (key) {
        case 'm':
            return withoutSuffix ? 'jedna minuta' : 'jedne minute';
        case 'mm':
            if (number === 1) {
                result += 'minuta';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'minute';
            } else {
                result += 'minuta';
            }
            return result;
        case 'h':
            return withoutSuffix ? 'jedan sat' : 'jednog sata';
        case 'hh':
            if (number === 1) {
                result += 'sat';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'sata';
            } else {
                result += 'sati';
            }
            return result;
        case 'dd':
            if (number === 1) {
                result += 'dan';
            } else {
                result += 'dana';
            }
            return result;
        case 'MM':
            if (number === 1) {
                result += 'mjesec';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'mjeseca';
            } else {
                result += 'mjeseci';
            }
            return result;
        case 'yy':
            if (number === 1) {
                result += 'godina';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'godine';
            } else {
                result += 'godina';
            }
            return result;
    }
}

hooks.defineLocale('bs', {
    months : 'januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar'.split('_'),
    monthsShort : 'jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.'.split('_'),
    monthsParseExact: true,
    weekdays : 'nedjelja_ponedjeljak_utorak_srijeda_Äetvrtak_petak_subota'.split('_'),
    weekdaysShort : 'ned._pon._uto._sri._Äet._pet._sub.'.split('_'),
    weekdaysMin : 'ne_po_ut_sr_Äe_pe_su'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'H:mm',
        LTS : 'H:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D. MMMM YYYY',
        LLL : 'D. MMMM YYYY H:mm',
        LLLL : 'dddd, D. MMMM YYYY H:mm'
    },
    calendar : {
        sameDay  : '[danas u] LT',
        nextDay  : '[sutra u] LT',
        nextWeek : function () {
            switch (this.day()) {
                case 0:
                    return '[u] [nedjelju] [u] LT';
                case 3:
                    return '[u] [srijedu] [u] LT';
                case 6:
                    return '[u] [subotu] [u] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[u] dddd [u] LT';
            }
        },
        lastDay  : '[juÄer u] LT',
        lastWeek : function () {
            switch (this.day()) {
                case 0:
                case 3:
                    return '[proÅ¡lu] dddd [u] LT';
                case 6:
                    return '[proÅ¡le] [subote] [u] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[proÅ¡li] dddd [u] LT';
            }
        },
        sameElse : 'L'
    },
    relativeTime : {
        future : 'za %s',
        past   : 'prije %s',
        s      : 'par sekundi',
        m      : translate,
        mm     : translate,
        h      : translate,
        hh     : translate,
        d      : 'dan',
        dd     : translate,
        M      : 'mjesec',
        MM     : translate,
        y      : 'godinu',
        yy     : translate
    },
    ordinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Catalan [ca]
//! author : Juan G. Hurtado : https://github.com/juanghurtado

hooks.defineLocale('ca', {
    months : 'gener_febrer_marÃ§_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre'.split('_'),
    monthsShort : 'gen._febr._mar._abr._mai._jun._jul._ag._set._oct._nov._des.'.split('_'),
    monthsParseExact : true,
    weekdays : 'diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte'.split('_'),
    weekdaysShort : 'dg._dl._dt._dc._dj._dv._ds.'.split('_'),
    weekdaysMin : 'Dg_Dl_Dt_Dc_Dj_Dv_Ds'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'H:mm',
        LTS : 'H:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY H:mm',
        LLLL : 'dddd D MMMM YYYY H:mm'
    },
    calendar : {
        sameDay : function () {
            return '[avui a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
        },
        nextDay : function () {
            return '[demÃ  a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
        },
        nextWeek : function () {
            return 'dddd [a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
        },
        lastDay : function () {
            return '[ahir a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
        },
        lastWeek : function () {
            return '[el] dddd [passat a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
        },
        sameElse : 'L'
    },
    relativeTime : {
        future : 'd\'aquÃ­ %s',
        past : 'fa %s',
        s : 'uns segons',
        m : 'un minut',
        mm : '%d minuts',
        h : 'una hora',
        hh : '%d hores',
        d : 'un dia',
        dd : '%d dies',
        M : 'un mes',
        MM : '%d mesos',
        y : 'un any',
        yy : '%d anys'
    },
    ordinalParse: /\d{1,2}(r|n|t|Ã¨|a)/,
    ordinal : function (number, period) {
        var output = (number === 1) ? 'r' :
            (number === 2) ? 'n' :
            (number === 3) ? 'r' :
            (number === 4) ? 't' : 'Ã¨';
        if (period === 'w' || period === 'W') {
            output = 'a';
        }
        return number + output;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Czech [cs]
//! author : petrbela : https://github.com/petrbela

var months$3 = 'leden_Ãºnor_bÅezen_duben_kvÄten_Äerven_Äervenec_srpen_zÃ¡ÅÃ­_ÅÃ­jen_listopad_prosinec'.split('_');
var monthsShort = 'led_Ãºno_bÅe_dub_kvÄ_Ävn_Ävc_srp_zÃ¡Å_ÅÃ­j_lis_pro'.split('_');
function plural$1(n) {
    return (n > 1) && (n < 5) && (~~(n / 10) !== 1);
}
function translate$1(number, withoutSuffix, key, isFuture) {
    var result = number + ' ';
    switch (key) {
        case 's':  // a few seconds / in a few seconds / a few seconds ago
            return (withoutSuffix || isFuture) ? 'pÃ¡r sekund' : 'pÃ¡r sekundami';
        case 'm':  // a minute / in a minute / a minute ago
            return withoutSuffix ? 'minuta' : (isFuture ? 'minutu' : 'minutou');
        case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
            if (withoutSuffix || isFuture) {
                return result + (plural$1(number) ? 'minuty' : 'minut');
            } else {
                return result + 'minutami';
            }
            break;
        case 'h':  // an hour / in an hour / an hour ago
            return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');
        case 'hh': // 9 hours / in 9 hours / 9 hours ago
            if (withoutSuffix || isFuture) {
                return result + (plural$1(number) ? 'hodiny' : 'hodin');
            } else {
                return result + 'hodinami';
            }
            break;
        case 'd':  // a day / in a day / a day ago
            return (withoutSuffix || isFuture) ? 'den' : 'dnem';
        case 'dd': // 9 days / in 9 days / 9 days ago
            if (withoutSuffix || isFuture) {
                return result + (plural$1(number) ? 'dny' : 'dnÃ­');
            } else {
                return result + 'dny';
            }
            break;
        case 'M':  // a month / in a month / a month ago
            return (withoutSuffix || isFuture) ? 'mÄsÃ­c' : 'mÄsÃ­cem';
        case 'MM': // 9 months / in 9 months / 9 months ago
            if (withoutSuffix || isFuture) {
                return result + (plural$1(number) ? 'mÄsÃ­ce' : 'mÄsÃ­cÅ¯');
            } else {
                return result + 'mÄsÃ­ci';
            }
            break;
        case 'y':  // a year / in a year / a year ago
            return (withoutSuffix || isFuture) ? 'rok' : 'rokem';
        case 'yy': // 9 years / in 9 years / 9 years ago
            if (withoutSuffix || isFuture) {
                return result + (plural$1(number) ? 'roky' : 'let');
            } else {
                return result + 'lety';
            }
            break;
    }
}

hooks.defineLocale('cs', {
    months : months$3,
    monthsShort : monthsShort,
    monthsParse : (function (months, monthsShort) {
        var i, _monthsParse = [];
        for (i = 0; i < 12; i++) {
            // use custom parser to solve problem with July (Äervenec)
            _monthsParse[i] = new RegExp('^' + months[i] + '$|^' + monthsShort[i] + '$', 'i');
        }
        return _monthsParse;
    }(months$3, monthsShort)),
    shortMonthsParse : (function (monthsShort) {
        var i, _shortMonthsParse = [];
        for (i = 0; i < 12; i++) {
            _shortMonthsParse[i] = new RegExp('^' + monthsShort[i] + '$', 'i');
        }
        return _shortMonthsParse;
    }(monthsShort)),
    longMonthsParse : (function (months) {
        var i, _longMonthsParse = [];
        for (i = 0; i < 12; i++) {
            _longMonthsParse[i] = new RegExp('^' + months[i] + '$', 'i');
        }
        return _longMonthsParse;
    }(months$3)),
    weekdays : 'nedÄle_pondÄlÃ­_ÃºterÃ½_stÅeda_Ätvrtek_pÃ¡tek_sobota'.split('_'),
    weekdaysShort : 'ne_po_Ãºt_st_Ät_pÃ¡_so'.split('_'),
    weekdaysMin : 'ne_po_Ãºt_st_Ät_pÃ¡_so'.split('_'),
    longDateFormat : {
        LT: 'H:mm',
        LTS : 'H:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D. MMMM YYYY',
        LLL : 'D. MMMM YYYY H:mm',
        LLLL : 'dddd D. MMMM YYYY H:mm',
        l : 'D. M. YYYY'
    },
    calendar : {
        sameDay: '[dnes v] LT',
        nextDay: '[zÃ­tra v] LT',
        nextWeek: function () {
            switch (this.day()) {
                case 0:
                    return '[v nedÄli v] LT';
                case 1:
                case 2:
                    return '[v] dddd [v] LT';
                case 3:
                    return '[ve stÅedu v] LT';
                case 4:
                    return '[ve Ätvrtek v] LT';
                case 5:
                    return '[v pÃ¡tek v] LT';
                case 6:
                    return '[v sobotu v] LT';
            }
        },
        lastDay: '[vÄera v] LT',
        lastWeek: function () {
            switch (this.day()) {
                case 0:
                    return '[minulou nedÄli v] LT';
                case 1:
                case 2:
                    return '[minulÃ©] dddd [v] LT';
                case 3:
                    return '[minulou stÅedu v] LT';
                case 4:
                case 5:
                    return '[minulÃ½] dddd [v] LT';
                case 6:
                    return '[minulou sobotu v] LT';
            }
        },
        sameElse: 'L'
    },
    relativeTime : {
        future : 'za %s',
        past : 'pÅed %s',
        s : translate$1,
        m : translate$1,
        mm : translate$1,
        h : translate$1,
        hh : translate$1,
        d : translate$1,
        dd : translate$1,
        M : translate$1,
        MM : translate$1,
        y : translate$1,
        yy : translate$1
    },
    ordinalParse : /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Chuvash [cv]
//! author : Anatoly Mironov : https://github.com/mirontoli

hooks.defineLocale('cv', {
    months : 'ÐºÓÑÐ»Ð°Ñ_Ð½Ð°ÑÓÑ_Ð¿ÑÑ_Ð°ÐºÐ°_Ð¼Ð°Ð¹_Ò«ÓÑÑÐ¼Ðµ_ÑÑÓ_Ò«ÑÑÐ»Ð°_Ð°Ð²ÓÐ½_ÑÐ¿Ð°_ÑÓ³Ðº_ÑÐ°ÑÑÐ°Ð²'.split('_'),
    monthsShort : 'ÐºÓÑ_Ð½Ð°Ñ_Ð¿ÑÑ_Ð°ÐºÐ°_Ð¼Ð°Ð¹_Ò«ÓÑ_ÑÑÓ_Ò«ÑÑ_Ð°Ð²Ð½_ÑÐ¿Ð°_ÑÓ³Ðº_ÑÐ°Ñ'.split('_'),
    weekdays : 'Ð²ÑÑÑÐ°ÑÐ½Ð¸ÐºÑÐ½_ÑÑÐ½ÑÐ¸ÐºÑÐ½_ÑÑÐ»Ð°ÑÐ¸ÐºÑÐ½_ÑÐ½ÐºÑÐ½_ÐºÓÒ«Ð½ÐµÑÐ½Ð¸ÐºÑÐ½_ÑÑÐ½ÐµÐºÑÐ½_ÑÓÐ¼Ð°ÑÐºÑÐ½'.split('_'),
    weekdaysShort : 'Ð²ÑÑ_ÑÑÐ½_ÑÑÐ»_ÑÐ½_ÐºÓÒ«_ÑÑÐ½_ÑÓÐ¼'.split('_'),
    weekdaysMin : 'Ð²Ñ_ÑÐ½_ÑÑ_ÑÐ½_ÐºÒ«_ÑÑ_ÑÐ¼'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD-MM-YYYY',
        LL : 'YYYY [Ò«ÑÐ»ÑÐ¸] MMMM [ÑÐ¹ÓÑÓÐ½] D[-Ð¼ÓÑÓ]',
        LLL : 'YYYY [Ò«ÑÐ»ÑÐ¸] MMMM [ÑÐ¹ÓÑÓÐ½] D[-Ð¼ÓÑÓ], HH:mm',
        LLLL : 'dddd, YYYY [Ò«ÑÐ»ÑÐ¸] MMMM [ÑÐ¹ÓÑÓÐ½] D[-Ð¼ÓÑÓ], HH:mm'
    },
    calendar : {
        sameDay: '[ÐÐ°ÑÐ½] LT [ÑÐµÑÐµÑÑÐµ]',
        nextDay: '[Ð«ÑÐ°Ð½] LT [ÑÐµÑÐµÑÑÐµ]',
        lastDay: '[ÓÐ½ÐµÑ] LT [ÑÐµÑÐµÑÑÐµ]',
        nextWeek: '[ÒªÐ¸ÑÐµÑ] dddd LT [ÑÐµÑÐµÑÑÐµ]',
        lastWeek: '[ÐÑÑÐ½Ó] dddd LT [ÑÐµÑÐµÑÑÐµ]',
        sameElse: 'L'
    },
    relativeTime : {
        future : function (output) {
            var affix = /ÑÐµÑÐµÑ$/i.exec(output) ? 'ÑÐµÐ½' : /Ò«ÑÐ»$/i.exec(output) ? 'ÑÐ°Ð½' : 'ÑÐ°Ð½';
            return output + affix;
        },
        past : '%s ÐºÐ°ÑÐ»Ð»Ð°',
        s : 'Ð¿ÓÑ-Ð¸Ðº Ò«ÐµÐºÐºÑÐ½Ñ',
        m : 'Ð¿ÓÑ Ð¼Ð¸Ð½ÑÑ',
        mm : '%d Ð¼Ð¸Ð½ÑÑ',
        h : 'Ð¿ÓÑ ÑÐµÑÐµÑ',
        hh : '%d ÑÐµÑÐµÑ',
        d : 'Ð¿ÓÑ ÐºÑÐ½',
        dd : '%d ÐºÑÐ½',
        M : 'Ð¿ÓÑ ÑÐ¹ÓÑ',
        MM : '%d ÑÐ¹ÓÑ',
        y : 'Ð¿ÓÑ Ò«ÑÐ»',
        yy : '%d Ò«ÑÐ»'
    },
    ordinalParse: /\d{1,2}-Ð¼ÓÑ/,
    ordinal : '%d-Ð¼ÓÑ',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Welsh [cy]
//! author : Robert Allen : https://github.com/robgallen
//! author : https://github.com/ryangreaves

hooks.defineLocale('cy', {
    months: 'Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr'.split('_'),
    monthsShort: 'Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag'.split('_'),
    weekdays: 'Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn'.split('_'),
    weekdaysShort: 'Sul_Llun_Maw_Mer_Iau_Gwe_Sad'.split('_'),
    weekdaysMin: 'Su_Ll_Ma_Me_Ia_Gw_Sa'.split('_'),
    weekdaysParseExact : true,
    // time formats are the same as en-gb
    longDateFormat: {
        LT: 'HH:mm',
        LTS : 'HH:mm:ss',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY HH:mm',
        LLLL: 'dddd, D MMMM YYYY HH:mm'
    },
    calendar: {
        sameDay: '[Heddiw am] LT',
        nextDay: '[Yfory am] LT',
        nextWeek: 'dddd [am] LT',
        lastDay: '[Ddoe am] LT',
        lastWeek: 'dddd [diwethaf am] LT',
        sameElse: 'L'
    },
    relativeTime: {
        future: 'mewn %s',
        past: '%s yn Ã´l',
        s: 'ychydig eiliadau',
        m: 'munud',
        mm: '%d munud',
        h: 'awr',
        hh: '%d awr',
        d: 'diwrnod',
        dd: '%d diwrnod',
        M: 'mis',
        MM: '%d mis',
        y: 'blwyddyn',
        yy: '%d flynedd'
    },
    ordinalParse: /\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,
    // traditional ordinal numbers above 31 are not commonly used in colloquial Welsh
    ordinal: function (number) {
        var b = number,
            output = '',
            lookup = [
                '', 'af', 'il', 'ydd', 'ydd', 'ed', 'ed', 'ed', 'fed', 'fed', 'fed', // 1af to 10fed
                'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'fed' // 11eg to 20fed
            ];
        if (b > 20) {
            if (b === 40 || b === 50 || b === 60 || b === 80 || b === 100) {
                output = 'fed'; // not 30ain, 70ain or 90ain
            } else {
                output = 'ain';
            }
        } else if (b > 0) {
            output = lookup[b];
        }
        return number + output;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Danish [da]
//! author : Ulrik Nielsen : https://github.com/mrbase

hooks.defineLocale('da', {
    months : 'januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december'.split('_'),
    monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
    weekdays : 'sÃ¸ndag_mandag_tirsdag_onsdag_torsdag_fredag_lÃ¸rdag'.split('_'),
    weekdaysShort : 'sÃ¸n_man_tir_ons_tor_fre_lÃ¸r'.split('_'),
    weekdaysMin : 'sÃ¸_ma_ti_on_to_fr_lÃ¸'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D. MMMM YYYY',
        LLL : 'D. MMMM YYYY HH:mm',
        LLLL : 'dddd [d.] D. MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[I dag kl.] LT',
        nextDay : '[I morgen kl.] LT',
        nextWeek : 'dddd [kl.] LT',
        lastDay : '[I gÃ¥r kl.] LT',
        lastWeek : '[sidste] dddd [kl] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'om %s',
        past : '%s siden',
        s : 'fÃ¥ sekunder',
        m : 'et minut',
        mm : '%d minutter',
        h : 'en time',
        hh : '%d timer',
        d : 'en dag',
        dd : '%d dage',
        M : 'en mÃ¥ned',
        MM : '%d mÃ¥neder',
        y : 'et Ã¥r',
        yy : '%d Ã¥r'
    },
    ordinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : German (Austria) [de-at]
//! author : lluchs : https://github.com/lluchs
//! author: Menelion ElensÃºle: https://github.com/Oire
//! author : Martin Groller : https://github.com/MadMG
//! author : Mikolaj Dadela : https://github.com/mik01aj

function processRelativeTime(number, withoutSuffix, key, isFuture) {
    var format = {
        'm': ['eine Minute', 'einer Minute'],
        'h': ['eine Stunde', 'einer Stunde'],
        'd': ['ein Tag', 'einem Tag'],
        'dd': [number + ' Tage', number + ' Tagen'],
        'M': ['ein Monat', 'einem Monat'],
        'MM': [number + ' Monate', number + ' Monaten'],
        'y': ['ein Jahr', 'einem Jahr'],
        'yy': [number + ' Jahre', number + ' Jahren']
    };
    return withoutSuffix ? format[key][0] : format[key][1];
}

hooks.defineLocale('de-at', {
    months : 'JÃ¤nner_Februar_MÃ¤rz_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
    monthsShort : 'JÃ¤n._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
    monthsParseExact : true,
    weekdays : 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
    weekdaysShort : 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
    weekdaysMin : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D. MMMM YYYY',
        LLL : 'D. MMMM YYYY HH:mm',
        LLLL : 'dddd, D. MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[heute um] LT [Uhr]',
        sameElse: 'L',
        nextDay: '[morgen um] LT [Uhr]',
        nextWeek: 'dddd [um] LT [Uhr]',
        lastDay: '[gestern um] LT [Uhr]',
        lastWeek: '[letzten] dddd [um] LT [Uhr]'
    },
    relativeTime : {
        future : 'in %s',
        past : 'vor %s',
        s : 'ein paar Sekunden',
        m : processRelativeTime,
        mm : '%d Minuten',
        h : processRelativeTime,
        hh : '%d Stunden',
        d : processRelativeTime,
        dd : processRelativeTime,
        M : processRelativeTime,
        MM : processRelativeTime,
        y : processRelativeTime,
        yy : processRelativeTime
    },
    ordinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : German [de]
//! author : lluchs : https://github.com/lluchs
//! author: Menelion ElensÃºle: https://github.com/Oire
//! author : Mikolaj Dadela : https://github.com/mik01aj

function processRelativeTime$1(number, withoutSuffix, key, isFuture) {
    var format = {
        'm': ['eine Minute', 'einer Minute'],
        'h': ['eine Stunde', 'einer Stunde'],
        'd': ['ein Tag', 'einem Tag'],
        'dd': [number + ' Tage', number + ' Tagen'],
        'M': ['ein Monat', 'einem Monat'],
        'MM': [number + ' Monate', number + ' Monaten'],
        'y': ['ein Jahr', 'einem Jahr'],
        'yy': [number + ' Jahre', number + ' Jahren']
    };
    return withoutSuffix ? format[key][0] : format[key][1];
}

hooks.defineLocale('de', {
    months : 'Januar_Februar_MÃ¤rz_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
    monthsShort : 'Jan._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
    monthsParseExact : true,
    weekdays : 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
    weekdaysShort : 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
    weekdaysMin : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D. MMMM YYYY',
        LLL : 'D. MMMM YYYY HH:mm',
        LLLL : 'dddd, D. MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[heute um] LT [Uhr]',
        sameElse: 'L',
        nextDay: '[morgen um] LT [Uhr]',
        nextWeek: 'dddd [um] LT [Uhr]',
        lastDay: '[gestern um] LT [Uhr]',
        lastWeek: '[letzten] dddd [um] LT [Uhr]'
    },
    relativeTime : {
        future : 'in %s',
        past : 'vor %s',
        s : 'ein paar Sekunden',
        m : processRelativeTime$1,
        mm : '%d Minuten',
        h : processRelativeTime$1,
        hh : '%d Stunden',
        d : processRelativeTime$1,
        dd : processRelativeTime$1,
        M : processRelativeTime$1,
        MM : processRelativeTime$1,
        y : processRelativeTime$1,
        yy : processRelativeTime$1
    },
    ordinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Maldivian [dv]
//! author : Jawish Hameed : https://github.com/jawish

var months$4 = [
    'ÞÞ¬ÞÞªÞÞ¦ÞÞ©',
    'ÞÞ¬ÞÞ°ÞÞªÞÞ¦ÞÞ©',
    'ÞÞ§ÞÞ¨ÞÞª',
    'ÞÞ­ÞÞ°ÞÞ©ÞÞª',
    'ÞÞ­',
    'ÞÞ«ÞÞ°',
    'ÞÞªÞÞ¦ÞÞ¨',
    'ÞÞ¯ÞÞ¦ÞÞ°ÞÞª',
    'ÞÞ¬ÞÞ°ÞÞ¬ÞÞ°ÞÞ¦ÞÞª',
    'ÞÞ®ÞÞ°ÞÞ¯ÞÞ¦ÞÞª',
    'ÞÞ®ÞÞ¬ÞÞ°ÞÞ¦ÞÞª',
    'ÞÞ¨ÞÞ¬ÞÞ°ÞÞ¦ÞÞª'
];
var weekdays = [
    'ÞÞ§ÞÞ¨ÞÞ°ÞÞ¦',
    'ÞÞ¯ÞÞ¦',
    'ÞÞ¦ÞÞ°ÞÞ§ÞÞ¦',
    'ÞÞªÞÞ¦',
    'ÞÞªÞÞ§ÞÞ°ÞÞ¦ÞÞ¨',
    'ÞÞªÞÞªÞÞª',
    'ÞÞ®ÞÞ¨ÞÞ¨ÞÞª'
];

hooks.defineLocale('dv', {
    months : months$4,
    monthsShort : months$4,
    weekdays : weekdays,
    weekdaysShort : weekdays,
    weekdaysMin : 'ÞÞ§ÞÞ¨_ÞÞ¯ÞÞ¦_ÞÞ¦ÞÞ°_ÞÞªÞÞ¦_ÞÞªÞÞ§_ÞÞªÞÞª_ÞÞ®ÞÞ¨'.split('_'),
    longDateFormat : {

        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'D/M/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    meridiemParse: /ÞÞ|ÞÞ/,
    isPM : function (input) {
        return 'ÞÞ' === input;
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 12) {
            return 'ÞÞ';
        } else {
            return 'ÞÞ';
        }
    },
    calendar : {
        sameDay : '[ÞÞ¨ÞÞ¦ÞÞª] LT',
        nextDay : '[ÞÞ§ÞÞ¦ÞÞ§] LT',
        nextWeek : 'dddd LT',
        lastDay : '[ÞÞ¨ÞÞ°ÞÞ¬] LT',
        lastWeek : '[ÞÞ§ÞÞ¨ÞÞªÞÞ¨] dddd LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'ÞÞ¬ÞÞ­ÞÞ¦ÞÞ¨ %s',
        past : 'ÞÞªÞÞ¨ÞÞ° %s',
        s : 'ÞÞ¨ÞÞªÞÞ°ÞÞªÞÞ®ÞÞ¬ÞÞ°',
        m : 'ÞÞ¨ÞÞ¨ÞÞ¬ÞÞ°',
        mm : 'ÞÞ¨ÞÞ¨ÞÞª %d',
        h : 'ÞÞ¦ÞÞ¨ÞÞ¨ÞÞ¬ÞÞ°',
        hh : 'ÞÞ¦ÞÞ¨ÞÞ¨ÞÞª %d',
        d : 'ÞÞªÞÞ¦ÞÞ¬ÞÞ°',
        dd : 'ÞÞªÞÞ¦ÞÞ° %d',
        M : 'ÞÞ¦ÞÞ¬ÞÞ°',
        MM : 'ÞÞ¦ÞÞ° %d',
        y : 'ÞÞ¦ÞÞ¦ÞÞ¬ÞÞ°',
        yy : 'ÞÞ¦ÞÞ¦ÞÞª %d'
    },
    preparse: function (string) {
        return string.replace(/Ø/g, ',');
    },
    postformat: function (string) {
        return string.replace(/,/g, 'Ø');
    },
    week : {
        dow : 7,  // Sunday is the first day of the week.
        doy : 12  // The week that contains Jan 1st is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Greek [el]
//! author : Aggelos Karalias : https://github.com/mehiel

hooks.defineLocale('el', {
    monthsNominativeEl : 'ÎÎ±Î½Î¿ÏÎ¬ÏÎ¹Î¿Ï_Î¦ÎµÎ²ÏÎ¿ÏÎ¬ÏÎ¹Î¿Ï_ÎÎ¬ÏÏÎ¹Î¿Ï_ÎÏÏÎ¯Î»Î¹Î¿Ï_ÎÎ¬Î¹Î¿Ï_ÎÎ¿ÏÎ½Î¹Î¿Ï_ÎÎ¿ÏÎ»Î¹Î¿Ï_ÎÏÎ³Î¿ÏÏÏÎ¿Ï_Î£ÎµÏÏÎ­Î¼Î²ÏÎ¹Î¿Ï_ÎÎºÏÏÎ²ÏÎ¹Î¿Ï_ÎÎ¿Î­Î¼Î²ÏÎ¹Î¿Ï_ÎÎµÎºÎ­Î¼Î²ÏÎ¹Î¿Ï'.split('_'),
    monthsGenitiveEl : 'ÎÎ±Î½Î¿ÏÎ±ÏÎ¯Î¿Ï_Î¦ÎµÎ²ÏÎ¿ÏÎ±ÏÎ¯Î¿Ï_ÎÎ±ÏÏÎ¯Î¿Ï_ÎÏÏÎ¹Î»Î¯Î¿Ï_ÎÎ±ÎÎ¿Ï_ÎÎ¿ÏÎ½Î¯Î¿Ï_ÎÎ¿ÏÎ»Î¯Î¿Ï_ÎÏÎ³Î¿ÏÏÏÎ¿Ï_Î£ÎµÏÏÎµÎ¼Î²ÏÎ¯Î¿Ï_ÎÎºÏÏÎ²ÏÎ¯Î¿Ï_ÎÎ¿ÎµÎ¼Î²ÏÎ¯Î¿Ï_ÎÎµÎºÎµÎ¼Î²ÏÎ¯Î¿Ï'.split('_'),
    months : function (momentToFormat, format) {
        if (/D/.test(format.substring(0, format.indexOf('MMMM')))) { // if there is a day number before 'MMMM'
            return this._monthsGenitiveEl[momentToFormat.month()];
        } else {
            return this._monthsNominativeEl[momentToFormat.month()];
        }
    },
    monthsShort : 'ÎÎ±Î½_Î¦ÎµÎ²_ÎÎ±Ï_ÎÏÏ_ÎÎ±Ï_ÎÎ¿ÏÎ½_ÎÎ¿ÏÎ»_ÎÏÎ³_Î£ÎµÏ_ÎÎºÏ_ÎÎ¿Îµ_ÎÎµÎº'.split('_'),
    weekdays : 'ÎÏÏÎ¹Î±ÎºÎ®_ÎÎµÏÏÎ­ÏÎ±_Î¤ÏÎ¯ÏÎ·_Î¤ÎµÏÎ¬ÏÏÎ·_Î Î­Î¼ÏÏÎ·_Î Î±ÏÎ±ÏÎºÎµÏÎ®_Î£Î¬Î²Î²Î±ÏÎ¿'.split('_'),
    weekdaysShort : 'ÎÏÏ_ÎÎµÏ_Î¤ÏÎ¹_Î¤ÎµÏ_Î ÎµÎ¼_Î Î±Ï_Î£Î±Î²'.split('_'),
    weekdaysMin : 'ÎÏ_ÎÎµ_Î¤Ï_Î¤Îµ_Î Îµ_Î Î±_Î£Î±'.split('_'),
    meridiem : function (hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'Î¼Î¼' : 'ÎÎ';
        } else {
            return isLower ? 'ÏÎ¼' : 'Î Î';
        }
    },
    isPM : function (input) {
        return ((input + '').toLowerCase()[0] === 'Î¼');
    },
    meridiemParse : /[Î Î]\.?Î?\.?/i,
    longDateFormat : {
        LT : 'h:mm A',
        LTS : 'h:mm:ss A',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY h:mm A',
        LLLL : 'dddd, D MMMM YYYY h:mm A'
    },
    calendarEl : {
        sameDay : '[Î£Î®Î¼ÎµÏÎ± {}] LT',
        nextDay : '[ÎÏÏÎ¹Î¿ {}] LT',
        nextWeek : 'dddd [{}] LT',
        lastDay : '[Î§Î¸ÎµÏ {}] LT',
        lastWeek : function () {
            switch (this.day()) {
                case 6:
                    return '[ÏÎ¿ ÏÏÎ¿Î·Î³Î¿ÏÎ¼ÎµÎ½Î¿] dddd [{}] LT';
                default:
                    return '[ÏÎ·Î½ ÏÏÎ¿Î·Î³Î¿ÏÎ¼ÎµÎ½Î·] dddd [{}] LT';
            }
        },
        sameElse : 'L'
    },
    calendar : function (key, mom) {
        var output = this._calendarEl[key],
            hours = mom && mom.hours();
        if (isFunction(output)) {
            output = output.apply(mom);
        }
        return output.replace('{}', (hours % 12 === 1 ? 'ÏÏÎ·' : 'ÏÏÎ¹Ï'));
    },
    relativeTime : {
        future : 'ÏÎµ %s',
        past : '%s ÏÏÎ¹Î½',
        s : 'Î»Î¯Î³Î± Î´ÎµÏÏÎµÏÏÎ»ÎµÏÏÎ±',
        m : 'Î­Î½Î± Î»ÎµÏÏÏ',
        mm : '%d Î»ÎµÏÏÎ¬',
        h : 'Î¼Î¯Î± ÏÏÎ±',
        hh : '%d ÏÏÎµÏ',
        d : 'Î¼Î¯Î± Î¼Î­ÏÎ±',
        dd : '%d Î¼Î­ÏÎµÏ',
        M : 'Î­Î½Î±Ï Î¼Î®Î½Î±Ï',
        MM : '%d Î¼Î®Î½ÎµÏ',
        y : 'Î­Î½Î±Ï ÏÏÏÎ½Î¿Ï',
        yy : '%d ÏÏÏÎ½Î¹Î±'
    },
    ordinalParse: /\d{1,2}Î·/,
    ordinal: '%dÎ·',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4st is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : English (Australia) [en-au]
//! author : Jared Morse : https://github.com/jarcoal

hooks.defineLocale('en-au', {
    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
    longDateFormat : {
        LT : 'h:mm A',
        LTS : 'h:mm:ss A',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY h:mm A',
        LLLL : 'dddd, D MMMM YYYY h:mm A'
    },
    calendar : {
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        nextWeek : 'dddd [at] LT',
        lastDay : '[Yesterday at] LT',
        lastWeek : '[Last] dddd [at] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'in %s',
        past : '%s ago',
        s : 'a few seconds',
        m : 'a minute',
        mm : '%d minutes',
        h : 'an hour',
        hh : '%d hours',
        d : 'a day',
        dd : '%d days',
        M : 'a month',
        MM : '%d months',
        y : 'a year',
        yy : '%d years'
    },
    ordinalParse: /\d{1,2}(st|nd|rd|th)/,
    ordinal : function (number) {
        var b = number % 10,
            output = (~~(number % 100 / 10) === 1) ? 'th' :
            (b === 1) ? 'st' :
            (b === 2) ? 'nd' :
            (b === 3) ? 'rd' : 'th';
        return number + output;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : English (Canada) [en-ca]
//! author : Jonathan Abourbih : https://github.com/jonbca

hooks.defineLocale('en-ca', {
    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
    longDateFormat : {
        LT : 'h:mm A',
        LTS : 'h:mm:ss A',
        L : 'YYYY-MM-DD',
        LL : 'MMMM D, YYYY',
        LLL : 'MMMM D, YYYY h:mm A',
        LLLL : 'dddd, MMMM D, YYYY h:mm A'
    },
    calendar : {
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        nextWeek : 'dddd [at] LT',
        lastDay : '[Yesterday at] LT',
        lastWeek : '[Last] dddd [at] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'in %s',
        past : '%s ago',
        s : 'a few seconds',
        m : 'a minute',
        mm : '%d minutes',
        h : 'an hour',
        hh : '%d hours',
        d : 'a day',
        dd : '%d days',
        M : 'a month',
        MM : '%d months',
        y : 'a year',
        yy : '%d years'
    },
    ordinalParse: /\d{1,2}(st|nd|rd|th)/,
    ordinal : function (number) {
        var b = number % 10,
            output = (~~(number % 100 / 10) === 1) ? 'th' :
            (b === 1) ? 'st' :
            (b === 2) ? 'nd' :
            (b === 3) ? 'rd' : 'th';
        return number + output;
    }
});

//! moment.js locale configuration
//! locale : English (United Kingdom) [en-gb]
//! author : Chris Gedrim : https://github.com/chrisgedrim

hooks.defineLocale('en-gb', {
    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        nextWeek : 'dddd [at] LT',
        lastDay : '[Yesterday at] LT',
        lastWeek : '[Last] dddd [at] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'in %s',
        past : '%s ago',
        s : 'a few seconds',
        m : 'a minute',
        mm : '%d minutes',
        h : 'an hour',
        hh : '%d hours',
        d : 'a day',
        dd : '%d days',
        M : 'a month',
        MM : '%d months',
        y : 'a year',
        yy : '%d years'
    },
    ordinalParse: /\d{1,2}(st|nd|rd|th)/,
    ordinal : function (number) {
        var b = number % 10,
            output = (~~(number % 100 / 10) === 1) ? 'th' :
            (b === 1) ? 'st' :
            (b === 2) ? 'nd' :
            (b === 3) ? 'rd' : 'th';
        return number + output;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : English (Ireland) [en-ie]
//! author : Chris Cartlidge : https://github.com/chriscartlidge

hooks.defineLocale('en-ie', {
    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD-MM-YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        nextWeek : 'dddd [at] LT',
        lastDay : '[Yesterday at] LT',
        lastWeek : '[Last] dddd [at] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'in %s',
        past : '%s ago',
        s : 'a few seconds',
        m : 'a minute',
        mm : '%d minutes',
        h : 'an hour',
        hh : '%d hours',
        d : 'a day',
        dd : '%d days',
        M : 'a month',
        MM : '%d months',
        y : 'a year',
        yy : '%d years'
    },
    ordinalParse: /\d{1,2}(st|nd|rd|th)/,
    ordinal : function (number) {
        var b = number % 10,
            output = (~~(number % 100 / 10) === 1) ? 'th' :
            (b === 1) ? 'st' :
            (b === 2) ? 'nd' :
            (b === 3) ? 'rd' : 'th';
        return number + output;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : English (New Zealand) [en-nz]
//! author : Luke McGregor : https://github.com/lukemcgregor

hooks.defineLocale('en-nz', {
    months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
    monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
    weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
    weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
    weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
    longDateFormat : {
        LT : 'h:mm A',
        LTS : 'h:mm:ss A',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY h:mm A',
        LLLL : 'dddd, D MMMM YYYY h:mm A'
    },
    calendar : {
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        nextWeek : 'dddd [at] LT',
        lastDay : '[Yesterday at] LT',
        lastWeek : '[Last] dddd [at] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'in %s',
        past : '%s ago',
        s : 'a few seconds',
        m : 'a minute',
        mm : '%d minutes',
        h : 'an hour',
        hh : '%d hours',
        d : 'a day',
        dd : '%d days',
        M : 'a month',
        MM : '%d months',
        y : 'a year',
        yy : '%d years'
    },
    ordinalParse: /\d{1,2}(st|nd|rd|th)/,
    ordinal : function (number) {
        var b = number % 10,
            output = (~~(number % 100 / 10) === 1) ? 'th' :
            (b === 1) ? 'st' :
            (b === 2) ? 'nd' :
            (b === 3) ? 'rd' : 'th';
        return number + output;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Esperanto [eo]
//! author : Colin Dean : https://github.com/colindean
//! komento: Mi estas malcerta se mi korekte traktis akuzativojn en tiu traduko.
//!          Se ne, bonvolu korekti kaj avizi min por ke mi povas lerni!

hooks.defineLocale('eo', {
    months : 'januaro_februaro_marto_aprilo_majo_junio_julio_aÅ­gusto_septembro_oktobro_novembro_decembro'.split('_'),
    monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aÅ­g_sep_okt_nov_dec'.split('_'),
    weekdays : 'DimanÄo_Lundo_Mardo_Merkredo_Ä´aÅ­do_Vendredo_Sabato'.split('_'),
    weekdaysShort : 'Dim_Lun_Mard_Merk_Ä´aÅ­_Ven_Sab'.split('_'),
    weekdaysMin : 'Di_Lu_Ma_Me_Ä´a_Ve_Sa'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'YYYY-MM-DD',
        LL : 'D[-an de] MMMM, YYYY',
        LLL : 'D[-an de] MMMM, YYYY HH:mm',
        LLLL : 'dddd, [la] D[-an de] MMMM, YYYY HH:mm'
    },
    meridiemParse: /[ap]\.t\.m/i,
    isPM: function (input) {
        return input.charAt(0).toLowerCase() === 'p';
    },
    meridiem : function (hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'p.t.m.' : 'P.T.M.';
        } else {
            return isLower ? 'a.t.m.' : 'A.T.M.';
        }
    },
    calendar : {
        sameDay : '[HodiaÅ­ je] LT',
        nextDay : '[MorgaÅ­ je] LT',
        nextWeek : 'dddd [je] LT',
        lastDay : '[HieraÅ­ je] LT',
        lastWeek : '[pasinta] dddd [je] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'je %s',
        past : 'antaÅ­ %s',
        s : 'sekundoj',
        m : 'minuto',
        mm : '%d minutoj',
        h : 'horo',
        hh : '%d horoj',
        d : 'tago',//ne 'diurno', Äar estas uzita por proksimumo
        dd : '%d tagoj',
        M : 'monato',
        MM : '%d monatoj',
        y : 'jaro',
        yy : '%d jaroj'
    },
    ordinalParse: /\d{1,2}a/,
    ordinal : '%da',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Spanish (Dominican Republic) [es-do]

var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_');
var monthsShort$1 = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');

hooks.defineLocale('es-do', {
    months : 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
    monthsShort : function (m, format) {
        if (/-MMM-/.test(format)) {
            return monthsShort$1[m.month()];
        } else {
            return monthsShortDot[m.month()];
        }
    },
    monthsParseExact : true,
    weekdays : 'domingo_lunes_martes_miÃ©rcoles_jueves_viernes_sÃ¡bado'.split('_'),
    weekdaysShort : 'dom._lun._mar._miÃ©._jue._vie._sÃ¡b.'.split('_'),
    weekdaysMin : 'do_lu_ma_mi_ju_vi_sÃ¡'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'h:mm A',
        LTS : 'h:mm:ss A',
        L : 'DD/MM/YYYY',
        LL : 'D [de] MMMM [de] YYYY',
        LLL : 'D [de] MMMM [de] YYYY h:mm A',
        LLLL : 'dddd, D [de] MMMM [de] YYYY h:mm A'
    },
    calendar : {
        sameDay : function () {
            return '[hoy a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
        },
        nextDay : function () {
            return '[maÃ±ana a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
        },
        nextWeek : function () {
            return 'dddd [a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
        },
        lastDay : function () {
            return '[ayer a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
        },
        lastWeek : function () {
            return '[el] dddd [pasado a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
        },
        sameElse : 'L'
    },
    relativeTime : {
        future : 'en %s',
        past : 'hace %s',
        s : 'unos segundos',
        m : 'un minuto',
        mm : '%d minutos',
        h : 'una hora',
        hh : '%d horas',
        d : 'un dÃ­a',
        dd : '%d dÃ­as',
        M : 'un mes',
        MM : '%d meses',
        y : 'un aÃ±o',
        yy : '%d aÃ±os'
    },
    ordinalParse : /\d{1,2}Âº/,
    ordinal : '%dÂº',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Spanish [es]
//! author : Julio NapurÃ­ : https://github.com/julionc

var monthsShortDot$1 = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_');
var monthsShort$2 = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');

hooks.defineLocale('es', {
    months : 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
    monthsShort : function (m, format) {
        if (/-MMM-/.test(format)) {
            return monthsShort$2[m.month()];
        } else {
            return monthsShortDot$1[m.month()];
        }
    },
    monthsParseExact : true,
    weekdays : 'domingo_lunes_martes_miÃ©rcoles_jueves_viernes_sÃ¡bado'.split('_'),
    weekdaysShort : 'dom._lun._mar._miÃ©._jue._vie._sÃ¡b.'.split('_'),
    weekdaysMin : 'do_lu_ma_mi_ju_vi_sÃ¡'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'H:mm',
        LTS : 'H:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D [de] MMMM [de] YYYY',
        LLL : 'D [de] MMMM [de] YYYY H:mm',
        LLLL : 'dddd, D [de] MMMM [de] YYYY H:mm'
    },
    calendar : {
        sameDay : function () {
            return '[hoy a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
        },
        nextDay : function () {
            return '[maÃ±ana a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
        },
        nextWeek : function () {
            return 'dddd [a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
        },
        lastDay : function () {
            return '[ayer a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
        },
        lastWeek : function () {
            return '[el] dddd [pasado a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
        },
        sameElse : 'L'
    },
    relativeTime : {
        future : 'en %s',
        past : 'hace %s',
        s : 'unos segundos',
        m : 'un minuto',
        mm : '%d minutos',
        h : 'una hora',
        hh : '%d horas',
        d : 'un dÃ­a',
        dd : '%d dÃ­as',
        M : 'un mes',
        MM : '%d meses',
        y : 'un aÃ±o',
        yy : '%d aÃ±os'
    },
    ordinalParse : /\d{1,2}Âº/,
    ordinal : '%dÂº',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Estonian [et]
//! author : Henry Kehlmann : https://github.com/madhenry
//! improvements : Illimar Tambek : https://github.com/ragulka

function processRelativeTime$2(number, withoutSuffix, key, isFuture) {
    var format = {
        's' : ['mÃµne sekundi', 'mÃµni sekund', 'paar sekundit'],
        'm' : ['Ã¼he minuti', 'Ã¼ks minut'],
        'mm': [number + ' minuti', number + ' minutit'],
        'h' : ['Ã¼he tunni', 'tund aega', 'Ã¼ks tund'],
        'hh': [number + ' tunni', number + ' tundi'],
        'd' : ['Ã¼he pÃ¤eva', 'Ã¼ks pÃ¤ev'],
        'M' : ['kuu aja', 'kuu aega', 'Ã¼ks kuu'],
        'MM': [number + ' kuu', number + ' kuud'],
        'y' : ['Ã¼he aasta', 'aasta', 'Ã¼ks aasta'],
        'yy': [number + ' aasta', number + ' aastat']
    };
    if (withoutSuffix) {
        return format[key][2] ? format[key][2] : format[key][1];
    }
    return isFuture ? format[key][0] : format[key][1];
}

hooks.defineLocale('et', {
    months        : 'jaanuar_veebruar_mÃ¤rts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember'.split('_'),
    monthsShort   : 'jaan_veebr_mÃ¤rts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets'.split('_'),
    weekdays      : 'pÃ¼hapÃ¤ev_esmaspÃ¤ev_teisipÃ¤ev_kolmapÃ¤ev_neljapÃ¤ev_reede_laupÃ¤ev'.split('_'),
    weekdaysShort : 'P_E_T_K_N_R_L'.split('_'),
    weekdaysMin   : 'P_E_T_K_N_R_L'.split('_'),
    longDateFormat : {
        LT   : 'H:mm',
        LTS : 'H:mm:ss',
        L    : 'DD.MM.YYYY',
        LL   : 'D. MMMM YYYY',
        LLL  : 'D. MMMM YYYY H:mm',
        LLLL : 'dddd, D. MMMM YYYY H:mm'
    },
    calendar : {
        sameDay  : '[TÃ¤na,] LT',
        nextDay  : '[Homme,] LT',
        nextWeek : '[JÃ¤rgmine] dddd LT',
        lastDay  : '[Eile,] LT',
        lastWeek : '[Eelmine] dddd LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s pÃ¤rast',
        past   : '%s tagasi',
        s      : processRelativeTime$2,
        m      : processRelativeTime$2,
        mm     : processRelativeTime$2,
        h      : processRelativeTime$2,
        hh     : processRelativeTime$2,
        d      : processRelativeTime$2,
        dd     : '%d pÃ¤eva',
        M      : processRelativeTime$2,
        MM     : processRelativeTime$2,
        y      : processRelativeTime$2,
        yy     : processRelativeTime$2
    },
    ordinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Basque [eu]
//! author : Eneko Illarramendi : https://github.com/eillarra

hooks.defineLocale('eu', {
    months : 'urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua'.split('_'),
    monthsShort : 'urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.'.split('_'),
    monthsParseExact : true,
    weekdays : 'igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata'.split('_'),
    weekdaysShort : 'ig._al._ar._az._og._ol._lr.'.split('_'),
    weekdaysMin : 'ig_al_ar_az_og_ol_lr'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'YYYY-MM-DD',
        LL : 'YYYY[ko] MMMM[ren] D[a]',
        LLL : 'YYYY[ko] MMMM[ren] D[a] HH:mm',
        LLLL : 'dddd, YYYY[ko] MMMM[ren] D[a] HH:mm',
        l : 'YYYY-M-D',
        ll : 'YYYY[ko] MMM D[a]',
        lll : 'YYYY[ko] MMM D[a] HH:mm',
        llll : 'ddd, YYYY[ko] MMM D[a] HH:mm'
    },
    calendar : {
        sameDay : '[gaur] LT[etan]',
        nextDay : '[bihar] LT[etan]',
        nextWeek : 'dddd LT[etan]',
        lastDay : '[atzo] LT[etan]',
        lastWeek : '[aurreko] dddd LT[etan]',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s barru',
        past : 'duela %s',
        s : 'segundo batzuk',
        m : 'minutu bat',
        mm : '%d minutu',
        h : 'ordu bat',
        hh : '%d ordu',
        d : 'egun bat',
        dd : '%d egun',
        M : 'hilabete bat',
        MM : '%d hilabete',
        y : 'urte bat',
        yy : '%d urte'
    },
    ordinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Persian [fa]
//! author : Ebrahim Byagowi : https://github.com/ebraminio

var symbolMap$5 = {
    '1': 'Û±',
    '2': 'Û²',
    '3': 'Û³',
    '4': 'Û´',
    '5': 'Ûµ',
    '6': 'Û¶',
    '7': 'Û·',
    '8': 'Û¸',
    '9': 'Û¹',
    '0': 'Û°'
};
var numberMap$4 = {
    'Û±': '1',
    'Û²': '2',
    'Û³': '3',
    'Û´': '4',
    'Ûµ': '5',
    'Û¶': '6',
    'Û·': '7',
    'Û¸': '8',
    'Û¹': '9',
    'Û°': '0'
};

hooks.defineLocale('fa', {
    months : 'ÚØ§ÙÙÛÙ_ÙÙØ±ÛÙ_ÙØ§Ø±Ø³_Ø¢ÙØ±ÛÙ_ÙÙ_ÚÙØ¦Ù_ÚÙØ¦ÛÙ_Ø§ÙØª_Ø³Ù¾ØªØ§ÙØ¨Ø±_Ø§Ú©ØªØ¨Ø±_ÙÙØ§ÙØ¨Ø±_Ø¯Ø³Ø§ÙØ¨Ø±'.split('_'),
    monthsShort : 'ÚØ§ÙÙÛÙ_ÙÙØ±ÛÙ_ÙØ§Ø±Ø³_Ø¢ÙØ±ÛÙ_ÙÙ_ÚÙØ¦Ù_ÚÙØ¦ÛÙ_Ø§ÙØª_Ø³Ù¾ØªØ§ÙØ¨Ø±_Ø§Ú©ØªØ¨Ø±_ÙÙØ§ÙØ¨Ø±_Ø¯Ø³Ø§ÙØ¨Ø±'.split('_'),
    weekdays : 'ÛÚ©\u200cØ´ÙØ¨Ù_Ø¯ÙØ´ÙØ¨Ù_Ø³Ù\u200cØ´ÙØ¨Ù_ÚÙØ§Ø±Ø´ÙØ¨Ù_Ù¾ÙØ¬\u200cØ´ÙØ¨Ù_Ø¬ÙØ¹Ù_Ø´ÙØ¨Ù'.split('_'),
    weekdaysShort : 'ÛÚ©\u200cØ´ÙØ¨Ù_Ø¯ÙØ´ÙØ¨Ù_Ø³Ù\u200cØ´ÙØ¨Ù_ÚÙØ§Ø±Ø´ÙØ¨Ù_Ù¾ÙØ¬\u200cØ´ÙØ¨Ù_Ø¬ÙØ¹Ù_Ø´ÙØ¨Ù'.split('_'),
    weekdaysMin : 'Û_Ø¯_Ø³_Ú_Ù¾_Ø¬_Ø´'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    meridiemParse: /ÙØ¨Ù Ø§Ø² Ø¸ÙØ±|Ø¨Ø¹Ø¯ Ø§Ø² Ø¸ÙØ±/,
    isPM: function (input) {
        return /Ø¨Ø¹Ø¯ Ø§Ø² Ø¸ÙØ±/.test(input);
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 12) {
            return 'ÙØ¨Ù Ø§Ø² Ø¸ÙØ±';
        } else {
            return 'Ø¨Ø¹Ø¯ Ø§Ø² Ø¸ÙØ±';
        }
    },
    calendar : {
        sameDay : '[Ø§ÙØ±ÙØ² Ø³Ø§Ø¹Øª] LT',
        nextDay : '[ÙØ±Ø¯Ø§ Ø³Ø§Ø¹Øª] LT',
        nextWeek : 'dddd [Ø³Ø§Ø¹Øª] LT',
        lastDay : '[Ø¯ÛØ±ÙØ² Ø³Ø§Ø¹Øª] LT',
        lastWeek : 'dddd [Ù¾ÛØ´] [Ø³Ø§Ø¹Øª] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'Ø¯Ø± %s',
        past : '%s Ù¾ÛØ´',
        s : 'ÚÙØ¯ÛÙ Ø«Ø§ÙÛÙ',
        m : 'ÛÚ© Ø¯ÙÛÙÙ',
        mm : '%d Ø¯ÙÛÙÙ',
        h : 'ÛÚ© Ø³Ø§Ø¹Øª',
        hh : '%d Ø³Ø§Ø¹Øª',
        d : 'ÛÚ© Ø±ÙØ²',
        dd : '%d Ø±ÙØ²',
        M : 'ÛÚ© ÙØ§Ù',
        MM : '%d ÙØ§Ù',
        y : 'ÛÚ© Ø³Ø§Ù',
        yy : '%d Ø³Ø§Ù'
    },
    preparse: function (string) {
        return string.replace(/[Û°-Û¹]/g, function (match) {
            return numberMap$4[match];
        }).replace(/Ø/g, ',');
    },
    postformat: function (string) {
        return string.replace(/\d/g, function (match) {
            return symbolMap$5[match];
        }).replace(/,/g, 'Ø');
    },
    ordinalParse: /\d{1,2}Ù/,
    ordinal : '%dÙ',
    week : {
        dow : 6, // Saturday is the first day of the week.
        doy : 12 // The week that contains Jan 1st is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Finnish [fi]
//! author : Tarmo Aidantausta : https://github.com/bleadof

var numbersPast = 'nolla yksi kaksi kolme neljÃ¤ viisi kuusi seitsemÃ¤n kahdeksan yhdeksÃ¤n'.split(' ');
var numbersFuture = [
        'nolla', 'yhden', 'kahden', 'kolmen', 'neljÃ¤n', 'viiden', 'kuuden',
        numbersPast[7], numbersPast[8], numbersPast[9]
    ];
function translate$2(number, withoutSuffix, key, isFuture) {
    var result = '';
    switch (key) {
        case 's':
            return isFuture ? 'muutaman sekunnin' : 'muutama sekunti';
        case 'm':
            return isFuture ? 'minuutin' : 'minuutti';
        case 'mm':
            result = isFuture ? 'minuutin' : 'minuuttia';
            break;
        case 'h':
            return isFuture ? 'tunnin' : 'tunti';
        case 'hh':
            result = isFuture ? 'tunnin' : 'tuntia';
            break;
        case 'd':
            return isFuture ? 'pÃ¤ivÃ¤n' : 'pÃ¤ivÃ¤';
        case 'dd':
            result = isFuture ? 'pÃ¤ivÃ¤n' : 'pÃ¤ivÃ¤Ã¤';
            break;
        case 'M':
            return isFuture ? 'kuukauden' : 'kuukausi';
        case 'MM':
            result = isFuture ? 'kuukauden' : 'kuukautta';
            break;
        case 'y':
            return isFuture ? 'vuoden' : 'vuosi';
        case 'yy':
            result = isFuture ? 'vuoden' : 'vuotta';
            break;
    }
    result = verbalNumber(number, isFuture) + ' ' + result;
    return result;
}
function verbalNumber(number, isFuture) {
    return number < 10 ? (isFuture ? numbersFuture[number] : numbersPast[number]) : number;
}

hooks.defineLocale('fi', {
    months : 'tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesÃ¤kuu_heinÃ¤kuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu'.split('_'),
    monthsShort : 'tammi_helmi_maalis_huhti_touko_kesÃ¤_heinÃ¤_elo_syys_loka_marras_joulu'.split('_'),
    weekdays : 'sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai'.split('_'),
    weekdaysShort : 'su_ma_ti_ke_to_pe_la'.split('_'),
    weekdaysMin : 'su_ma_ti_ke_to_pe_la'.split('_'),
    longDateFormat : {
        LT : 'HH.mm',
        LTS : 'HH.mm.ss',
        L : 'DD.MM.YYYY',
        LL : 'Do MMMM[ta] YYYY',
        LLL : 'Do MMMM[ta] YYYY, [klo] HH.mm',
        LLLL : 'dddd, Do MMMM[ta] YYYY, [klo] HH.mm',
        l : 'D.M.YYYY',
        ll : 'Do MMM YYYY',
        lll : 'Do MMM YYYY, [klo] HH.mm',
        llll : 'ddd, Do MMM YYYY, [klo] HH.mm'
    },
    calendar : {
        sameDay : '[tÃ¤nÃ¤Ã¤n] [klo] LT',
        nextDay : '[huomenna] [klo] LT',
        nextWeek : 'dddd [klo] LT',
        lastDay : '[eilen] [klo] LT',
        lastWeek : '[viime] dddd[na] [klo] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s pÃ¤Ã¤stÃ¤',
        past : '%s sitten',
        s : translate$2,
        m : translate$2,
        mm : translate$2,
        h : translate$2,
        hh : translate$2,
        d : translate$2,
        dd : translate$2,
        M : translate$2,
        MM : translate$2,
        y : translate$2,
        yy : translate$2
    },
    ordinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Faroese [fo]
//! author : Ragnar Johannesen : https://github.com/ragnar123

hooks.defineLocale('fo', {
    months : 'januar_februar_mars_aprÃ­l_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
    monthsShort : 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
    weekdays : 'sunnudagur_mÃ¡nadagur_tÃ½sdagur_mikudagur_hÃ³sdagur_frÃ­ggjadagur_leygardagur'.split('_'),
    weekdaysShort : 'sun_mÃ¡n_tÃ½s_mik_hÃ³s_frÃ­_ley'.split('_'),
    weekdaysMin : 'su_mÃ¡_tÃ½_mi_hÃ³_fr_le'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D. MMMM, YYYY HH:mm'
    },
    calendar : {
        sameDay : '[Ã dag kl.] LT',
        nextDay : '[Ã morgin kl.] LT',
        nextWeek : 'dddd [kl.] LT',
        lastDay : '[Ã gjÃ¡r kl.] LT',
        lastWeek : '[sÃ­Ã°stu] dddd [kl] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'um %s',
        past : '%s sÃ­Ã°ani',
        s : 'fÃ¡ sekund',
        m : 'ein minutt',
        mm : '%d minuttir',
        h : 'ein tÃ­mi',
        hh : '%d tÃ­mar',
        d : 'ein dagur',
        dd : '%d dagar',
        M : 'ein mÃ¡naÃ°i',
        MM : '%d mÃ¡naÃ°ir',
        y : 'eitt Ã¡r',
        yy : '%d Ã¡r'
    },
    ordinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : French (Canada) [fr-ca]
//! author : Jonathan Abourbih : https://github.com/jonbca

hooks.defineLocale('fr-ca', {
    months : 'janvier_fÃ©vrier_mars_avril_mai_juin_juillet_aoÃ»t_septembre_octobre_novembre_dÃ©cembre'.split('_'),
    monthsShort : 'janv._fÃ©vr._mars_avr._mai_juin_juil._aoÃ»t_sept._oct._nov._dÃ©c.'.split('_'),
    monthsParseExact : true,
    weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
    weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
    weekdaysMin : 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'YYYY-MM-DD',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[Aujourd\'hui Ã ] LT',
        nextDay: '[Demain Ã ] LT',
        nextWeek: 'dddd [Ã ] LT',
        lastDay: '[Hier Ã ] LT',
        lastWeek: 'dddd [dernier Ã ] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'dans %s',
        past : 'il y a %s',
        s : 'quelques secondes',
        m : 'une minute',
        mm : '%d minutes',
        h : 'une heure',
        hh : '%d heures',
        d : 'un jour',
        dd : '%d jours',
        M : 'un mois',
        MM : '%d mois',
        y : 'un an',
        yy : '%d ans'
    },
    ordinalParse: /\d{1,2}(er|e)/,
    ordinal : function (number) {
        return number + (number === 1 ? 'er' : 'e');
    }
});

//! moment.js locale configuration
//! locale : French (Switzerland) [fr-ch]
//! author : Gaspard Bucher : https://github.com/gaspard

hooks.defineLocale('fr-ch', {
    months : 'janvier_fÃ©vrier_mars_avril_mai_juin_juillet_aoÃ»t_septembre_octobre_novembre_dÃ©cembre'.split('_'),
    monthsShort : 'janv._fÃ©vr._mars_avr._mai_juin_juil._aoÃ»t_sept._oct._nov._dÃ©c.'.split('_'),
    monthsParseExact : true,
    weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
    weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
    weekdaysMin : 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[Aujourd\'hui Ã ] LT',
        nextDay: '[Demain Ã ] LT',
        nextWeek: 'dddd [Ã ] LT',
        lastDay: '[Hier Ã ] LT',
        lastWeek: 'dddd [dernier Ã ] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'dans %s',
        past : 'il y a %s',
        s : 'quelques secondes',
        m : 'une minute',
        mm : '%d minutes',
        h : 'une heure',
        hh : '%d heures',
        d : 'un jour',
        dd : '%d jours',
        M : 'un mois',
        MM : '%d mois',
        y : 'un an',
        yy : '%d ans'
    },
    ordinalParse: /\d{1,2}(er|e)/,
    ordinal : function (number) {
        return number + (number === 1 ? 'er' : 'e');
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : French [fr]
//! author : John Fischer : https://github.com/jfroffice

hooks.defineLocale('fr', {
    months : 'janvier_fÃ©vrier_mars_avril_mai_juin_juillet_aoÃ»t_septembre_octobre_novembre_dÃ©cembre'.split('_'),
    monthsShort : 'janv._fÃ©vr._mars_avr._mai_juin_juil._aoÃ»t_sept._oct._nov._dÃ©c.'.split('_'),
    monthsParseExact : true,
    weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
    weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
    weekdaysMin : 'Di_Lu_Ma_Me_Je_Ve_Sa'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[Aujourd\'hui Ã ] LT',
        nextDay: '[Demain Ã ] LT',
        nextWeek: 'dddd [Ã ] LT',
        lastDay: '[Hier Ã ] LT',
        lastWeek: 'dddd [dernier Ã ] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'dans %s',
        past : 'il y a %s',
        s : 'quelques secondes',
        m : 'une minute',
        mm : '%d minutes',
        h : 'une heure',
        hh : '%d heures',
        d : 'un jour',
        dd : '%d jours',
        M : 'un mois',
        MM : '%d mois',
        y : 'un an',
        yy : '%d ans'
    },
    ordinalParse: /\d{1,2}(er|)/,
    ordinal : function (number) {
        return number + (number === 1 ? 'er' : '');
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Frisian [fy]
//! author : Robin van der Vliet : https://github.com/robin0van0der0v

var monthsShortWithDots = 'jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.'.split('_');
var monthsShortWithoutDots = 'jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_');

hooks.defineLocale('fy', {
    months : 'jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber'.split('_'),
    monthsShort : function (m, format) {
        if (/-MMM-/.test(format)) {
            return monthsShortWithoutDots[m.month()];
        } else {
            return monthsShortWithDots[m.month()];
        }
    },
    monthsParseExact : true,
    weekdays : 'snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon'.split('_'),
    weekdaysShort : 'si._mo._ti._wo._to._fr._so.'.split('_'),
    weekdaysMin : 'Si_Mo_Ti_Wo_To_Fr_So'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD-MM-YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[hjoed om] LT',
        nextDay: '[moarn om] LT',
        nextWeek: 'dddd [om] LT',
        lastDay: '[juster om] LT',
        lastWeek: '[Ã´frÃ»ne] dddd [om] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'oer %s',
        past : '%s lyn',
        s : 'in pear sekonden',
        m : 'ien minÃºt',
        mm : '%d minuten',
        h : 'ien oere',
        hh : '%d oeren',
        d : 'ien dei',
        dd : '%d dagen',
        M : 'ien moanne',
        MM : '%d moannen',
        y : 'ien jier',
        yy : '%d jierren'
    },
    ordinalParse: /\d{1,2}(ste|de)/,
    ordinal : function (number) {
        return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Scottish Gaelic [gd]
//! author : Jon Ashdown : https://github.com/jonashdown

var months$5 = [
    'Am Faoilleach', 'An Gearran', 'Am MÃ rt', 'An Giblean', 'An CÃ¨itean', 'An t-Ãgmhios', 'An t-Iuchar', 'An LÃ¹nastal', 'An t-Sultain', 'An DÃ mhair', 'An t-Samhain', 'An DÃ¹bhlachd'
];

var monthsShort$3 = ['Faoi', 'Gear', 'MÃ rt', 'Gibl', 'CÃ¨it', 'Ãgmh', 'Iuch', 'LÃ¹n', 'Sult', 'DÃ mh', 'Samh', 'DÃ¹bh'];

var weekdays$1 = ['DidÃ²mhnaich', 'Diluain', 'DimÃ irt', 'Diciadain', 'Diardaoin', 'Dihaoine', 'Disathairne'];

var weekdaysShort = ['Did', 'Dil', 'Dim', 'Dic', 'Dia', 'Dih', 'Dis'];

var weekdaysMin = ['DÃ²', 'Lu', 'MÃ ', 'Ci', 'Ar', 'Ha', 'Sa'];

hooks.defineLocale('gd', {
    months : months$5,
    monthsShort : monthsShort$3,
    monthsParseExact : true,
    weekdays : weekdays$1,
    weekdaysShort : weekdaysShort,
    weekdaysMin : weekdaysMin,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[An-diugh aig] LT',
        nextDay : '[A-mÃ ireach aig] LT',
        nextWeek : 'dddd [aig] LT',
        lastDay : '[An-dÃ¨ aig] LT',
        lastWeek : 'dddd [seo chaidh] [aig] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'ann an %s',
        past : 'bho chionn %s',
        s : 'beagan diogan',
        m : 'mionaid',
        mm : '%d mionaidean',
        h : 'uair',
        hh : '%d uairean',
        d : 'latha',
        dd : '%d latha',
        M : 'mÃ¬os',
        MM : '%d mÃ¬osan',
        y : 'bliadhna',
        yy : '%d bliadhna'
    },
    ordinalParse : /\d{1,2}(d|na|mh)/,
    ordinal : function (number) {
        var output = number === 1 ? 'd' : number % 10 === 2 ? 'na' : 'mh';
        return number + output;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Galician [gl]
//! author : Juan G. Hurtado : https://github.com/juanghurtado

hooks.defineLocale('gl', {
    months : 'xaneiro_febreiro_marzo_abril_maio_xuÃ±o_xullo_agosto_setembro_outubro_novembro_decembro'.split('_'),
    monthsShort : 'xan._feb._mar._abr._mai._xuÃ±._xul._ago._set._out._nov._dec.'.split('_'),
    monthsParseExact: true,
    weekdays : 'domingo_luns_martes_mÃ©rcores_xoves_venres_sÃ¡bado'.split('_'),
    weekdaysShort : 'dom._lun._mar._mÃ©r._xov._ven._sÃ¡b.'.split('_'),
    weekdaysMin : 'do_lu_ma_mÃ©_xo_ve_sÃ¡'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'H:mm',
        LTS : 'H:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D [de] MMMM [de] YYYY',
        LLL : 'D [de] MMMM [de] YYYY H:mm',
        LLLL : 'dddd, D [de] MMMM [de] YYYY H:mm'
    },
    calendar : {
        sameDay : function () {
            return '[hoxe ' + ((this.hours() !== 1) ? 'Ã¡s' : 'Ã¡') + '] LT';
        },
        nextDay : function () {
            return '[maÃ±Ã¡ ' + ((this.hours() !== 1) ? 'Ã¡s' : 'Ã¡') + '] LT';
        },
        nextWeek : function () {
            return 'dddd [' + ((this.hours() !== 1) ? 'Ã¡s' : 'a') + '] LT';
        },
        lastDay : function () {
            return '[onte ' + ((this.hours() !== 1) ? 'Ã¡' : 'a') + '] LT';
        },
        lastWeek : function () {
            return '[o] dddd [pasado ' + ((this.hours() !== 1) ? 'Ã¡s' : 'a') + '] LT';
        },
        sameElse : 'L'
    },
    relativeTime : {
        future : function (str) {
            if (str.indexOf('un') === 0) {
                return 'n' + str;
            }
            return 'en ' + str;
        },
        past : 'hai %s',
        s : 'uns segundos',
        m : 'un minuto',
        mm : '%d minutos',
        h : 'unha hora',
        hh : '%d horas',
        d : 'un dÃ­a',
        dd : '%d dÃ­as',
        M : 'un mes',
        MM : '%d meses',
        y : 'un ano',
        yy : '%d anos'
    },
    ordinalParse : /\d{1,2}Âº/,
    ordinal : '%dÂº',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Hebrew [he]
//! author : Tomer Cohen : https://github.com/tomer
//! author : Moshe Simantov : https://github.com/DevelopmentIL
//! author : Tal Ater : https://github.com/TalAter

hooks.defineLocale('he', {
    months : '×× ×××¨_×¤××¨×××¨_××¨×¥_××¤×¨××_×××_××× ×_××××_×××××¡×_×¡×¤××××¨_×××§××××¨_× ×××××¨_××¦×××¨'.split('_'),
    monthsShort : '×× ××³_×¤××¨×³_××¨×¥_××¤×¨×³_×××_××× ×_××××_××××³_×¡×¤××³_×××§×³_× ×××³_××¦××³'.split('_'),
    weekdays : '×¨××©××_×©× ×_×©×××©×_×¨×××¢×_××××©×_×©××©×_×©××ª'.split('_'),
    weekdaysShort : '××³_××³_××³_××³_××³_××³_×©×³'.split('_'),
    weekdaysMin : '×_×_×_×_×_×_×©'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D [×]MMMM YYYY',
        LLL : 'D [×]MMMM YYYY HH:mm',
        LLLL : 'dddd, D [×]MMMM YYYY HH:mm',
        l : 'D/M/YYYY',
        ll : 'D MMM YYYY',
        lll : 'D MMM YYYY HH:mm',
        llll : 'ddd, D MMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[×××× ×Ö¾]LT',
        nextDay : '[×××¨ ×Ö¾]LT',
        nextWeek : 'dddd [××©×¢×] LT',
        lastDay : '[××ª××× ×Ö¾]LT',
        lastWeek : '[××××] dddd [××××¨×× ××©×¢×] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '××¢×× %s',
        past : '××¤× × %s',
        s : '××¡×¤×¨ ×©× ×××ª',
        m : '××§×',
        mm : '%d ××§××ª',
        h : '×©×¢×',
        hh : function (number) {
            if (number === 2) {
                return '×©×¢×ª×××';
            }
            return number + ' ×©×¢××ª';
        },
        d : '×××',
        dd : function (number) {
            if (number === 2) {
                return '××××××';
            }
            return number + ' ××××';
        },
        M : '××××©',
        MM : function (number) {
            if (number === 2) {
                return '××××©×××';
            }
            return number + ' ××××©××';
        },
        y : '×©× ×',
        yy : function (number) {
            if (number === 2) {
                return '×©× ×ª×××';
            } else if (number % 10 === 0 && number !== 10) {
                return number + ' ×©× ×';
            }
            return number + ' ×©× ××';
        }
    },
    meridiemParse: /×××"×¦|××¤× ×"×¦|×××¨× ××¦××¨×××|××¤× × ××¦××¨×××|××¤× ××ª ×××§×¨|××××§×¨|××¢×¨×/i,
    isPM : function (input) {
        return /^(×××"×¦|×××¨× ××¦××¨×××|××¢×¨×)$/.test(input);
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 5) {
            return '××¤× ××ª ×××§×¨';
        } else if (hour < 10) {
            return '××××§×¨';
        } else if (hour < 12) {
            return isLower ? '××¤× ×"×¦' : '××¤× × ××¦××¨×××';
        } else if (hour < 18) {
            return isLower ? '×××"×¦' : '×××¨× ××¦××¨×××';
        } else {
            return '××¢×¨×';
        }
    }
});

//! moment.js locale configuration
//! locale : Hindi [hi]
//! author : Mayank Singhal : https://github.com/mayanksinghal

var symbolMap$6 = {
    '1': 'à¥§',
    '2': 'à¥¨',
    '3': 'à¥©',
    '4': 'à¥ª',
    '5': 'à¥«',
    '6': 'à¥¬',
    '7': 'à¥­',
    '8': 'à¥®',
    '9': 'à¥¯',
    '0': 'à¥¦'
};
var numberMap$5 = {
    'à¥§': '1',
    'à¥¨': '2',
    'à¥©': '3',
    'à¥ª': '4',
    'à¥«': '5',
    'à¥¬': '6',
    'à¥­': '7',
    'à¥®': '8',
    'à¥¯': '9',
    'à¥¦': '0'
};

hooks.defineLocale('hi', {
    months : 'à¤à¤¨à¤µà¤°à¥_à¤«à¤¼à¤°à¤µà¤°à¥_à¤®à¤¾à¤°à¥à¤_à¤à¤ªà¥à¤°à¥à¤²_à¤®à¤_à¤à¥à¤¨_à¤à¥à¤²à¤¾à¤_à¤à¤à¤¸à¥à¤¤_à¤¸à¤¿à¤¤à¤®à¥à¤¬à¤°_à¤à¤à¥à¤à¥à¤¬à¤°_à¤¨à¤µà¤®à¥à¤¬à¤°_à¤¦à¤¿à¤¸à¤®à¥à¤¬à¤°'.split('_'),
    monthsShort : 'à¤à¤¨._à¤«à¤¼à¤°._à¤®à¤¾à¤°à¥à¤_à¤à¤ªà¥à¤°à¥._à¤®à¤_à¤à¥à¤¨_à¤à¥à¤²._à¤à¤._à¤¸à¤¿à¤¤._à¤à¤à¥à¤à¥._à¤¨à¤µ._à¤¦à¤¿à¤¸.'.split('_'),
    monthsParseExact: true,
    weekdays : 'à¤°à¤µà¤¿à¤µà¤¾à¤°_à¤¸à¥à¤®à¤µà¤¾à¤°_à¤®à¤à¤à¤²à¤µà¤¾à¤°_à¤¬à¥à¤§à¤µà¤¾à¤°_à¤à¥à¤°à¥à¤µà¤¾à¤°_à¤¶à¥à¤à¥à¤°à¤µà¤¾à¤°_à¤¶à¤¨à¤¿à¤µà¤¾à¤°'.split('_'),
    weekdaysShort : 'à¤°à¤µà¤¿_à¤¸à¥à¤®_à¤®à¤à¤à¤²_à¤¬à¥à¤§_à¤à¥à¤°à¥_à¤¶à¥à¤à¥à¤°_à¤¶à¤¨à¤¿'.split('_'),
    weekdaysMin : 'à¤°_à¤¸à¥_à¤®à¤_à¤¬à¥_à¤à¥_à¤¶à¥_à¤¶'.split('_'),
    longDateFormat : {
        LT : 'A h:mm à¤¬à¤à¥',
        LTS : 'A h:mm:ss à¤¬à¤à¥',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY, A h:mm à¤¬à¤à¥',
        LLLL : 'dddd, D MMMM YYYY, A h:mm à¤¬à¤à¥'
    },
    calendar : {
        sameDay : '[à¤à¤] LT',
        nextDay : '[à¤à¤²] LT',
        nextWeek : 'dddd, LT',
        lastDay : '[à¤à¤²] LT',
        lastWeek : '[à¤ªà¤¿à¤à¤²à¥] dddd, LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s à¤®à¥à¤',
        past : '%s à¤ªà¤¹à¤²à¥',
        s : 'à¤à¥à¤ à¤¹à¥ à¤à¥à¤·à¤£',
        m : 'à¤à¤ à¤®à¤¿à¤¨à¤',
        mm : '%d à¤®à¤¿à¤¨à¤',
        h : 'à¤à¤ à¤à¤à¤à¤¾',
        hh : '%d à¤à¤à¤à¥',
        d : 'à¤à¤ à¤¦à¤¿à¤¨',
        dd : '%d à¤¦à¤¿à¤¨',
        M : 'à¤à¤ à¤®à¤¹à¥à¤¨à¥',
        MM : '%d à¤®à¤¹à¥à¤¨à¥',
        y : 'à¤à¤ à¤µà¤°à¥à¤·',
        yy : '%d à¤µà¤°à¥à¤·'
    },
    preparse: function (string) {
        return string.replace(/[à¥§à¥¨à¥©à¥ªà¥«à¥¬à¥­à¥®à¥¯à¥¦]/g, function (match) {
            return numberMap$5[match];
        });
    },
    postformat: function (string) {
        return string.replace(/\d/g, function (match) {
            return symbolMap$6[match];
        });
    },
    // Hindi notation for meridiems are quite fuzzy in practice. While there exists
    // a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.
    meridiemParse: /à¤°à¤¾à¤¤|à¤¸à¥à¤¬à¤¹|à¤¦à¥à¤ªà¤¹à¤°|à¤¶à¤¾à¤®/,
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === 'à¤°à¤¾à¤¤') {
            return hour < 4 ? hour : hour + 12;
        } else if (meridiem === 'à¤¸à¥à¤¬à¤¹') {
            return hour;
        } else if (meridiem === 'à¤¦à¥à¤ªà¤¹à¤°') {
            return hour >= 10 ? hour : hour + 12;
        } else if (meridiem === 'à¤¶à¤¾à¤®') {
            return hour + 12;
        }
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 4) {
            return 'à¤°à¤¾à¤¤';
        } else if (hour < 10) {
            return 'à¤¸à¥à¤¬à¤¹';
        } else if (hour < 17) {
            return 'à¤¦à¥à¤ªà¤¹à¤°';
        } else if (hour < 20) {
            return 'à¤¶à¤¾à¤®';
        } else {
            return 'à¤°à¤¾à¤¤';
        }
    },
    week : {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 1st is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Croatian [hr]
//! author : Bojan MarkoviÄ : https://github.com/bmarkovic

function translate$3(number, withoutSuffix, key) {
    var result = number + ' ';
    switch (key) {
        case 'm':
            return withoutSuffix ? 'jedna minuta' : 'jedne minute';
        case 'mm':
            if (number === 1) {
                result += 'minuta';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'minute';
            } else {
                result += 'minuta';
            }
            return result;
        case 'h':
            return withoutSuffix ? 'jedan sat' : 'jednog sata';
        case 'hh':
            if (number === 1) {
                result += 'sat';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'sata';
            } else {
                result += 'sati';
            }
            return result;
        case 'dd':
            if (number === 1) {
                result += 'dan';
            } else {
                result += 'dana';
            }
            return result;
        case 'MM':
            if (number === 1) {
                result += 'mjesec';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'mjeseca';
            } else {
                result += 'mjeseci';
            }
            return result;
        case 'yy':
            if (number === 1) {
                result += 'godina';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'godine';
            } else {
                result += 'godina';
            }
            return result;
    }
}

hooks.defineLocale('hr', {
    months : {
        format: 'sijeÄnja_veljaÄe_oÅ¾ujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca'.split('_'),
        standalone: 'sijeÄanj_veljaÄa_oÅ¾ujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac'.split('_')
    },
    monthsShort : 'sij._velj._oÅ¾u._tra._svi._lip._srp._kol._ruj._lis._stu._pro.'.split('_'),
    monthsParseExact: true,
    weekdays : 'nedjelja_ponedjeljak_utorak_srijeda_Äetvrtak_petak_subota'.split('_'),
    weekdaysShort : 'ned._pon._uto._sri._Äet._pet._sub.'.split('_'),
    weekdaysMin : 'ne_po_ut_sr_Äe_pe_su'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'H:mm',
        LTS : 'H:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D. MMMM YYYY',
        LLL : 'D. MMMM YYYY H:mm',
        LLLL : 'dddd, D. MMMM YYYY H:mm'
    },
    calendar : {
        sameDay  : '[danas u] LT',
        nextDay  : '[sutra u] LT',
        nextWeek : function () {
            switch (this.day()) {
                case 0:
                    return '[u] [nedjelju] [u] LT';
                case 3:
                    return '[u] [srijedu] [u] LT';
                case 6:
                    return '[u] [subotu] [u] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[u] dddd [u] LT';
            }
        },
        lastDay  : '[juÄer u] LT',
        lastWeek : function () {
            switch (this.day()) {
                case 0:
                case 3:
                    return '[proÅ¡lu] dddd [u] LT';
                case 6:
                    return '[proÅ¡le] [subote] [u] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[proÅ¡li] dddd [u] LT';
            }
        },
        sameElse : 'L'
    },
    relativeTime : {
        future : 'za %s',
        past   : 'prije %s',
        s      : 'par sekundi',
        m      : translate$3,
        mm     : translate$3,
        h      : translate$3,
        hh     : translate$3,
        d      : 'dan',
        dd     : translate$3,
        M      : 'mjesec',
        MM     : translate$3,
        y      : 'godinu',
        yy     : translate$3
    },
    ordinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Hungarian [hu]
//! author : Adam Brunner : https://github.com/adambrunner

var weekEndings = 'vasÃ¡rnap hÃ©tfÅn kedden szerdÃ¡n csÃ¼tÃ¶rtÃ¶kÃ¶n pÃ©nteken szombaton'.split(' ');
function translate$4(number, withoutSuffix, key, isFuture) {
    var num = number,
        suffix;
    switch (key) {
        case 's':
            return (isFuture || withoutSuffix) ? 'nÃ©hÃ¡ny mÃ¡sodperc' : 'nÃ©hÃ¡ny mÃ¡sodperce';
        case 'm':
            return 'egy' + (isFuture || withoutSuffix ? ' perc' : ' perce');
        case 'mm':
            return num + (isFuture || withoutSuffix ? ' perc' : ' perce');
        case 'h':
            return 'egy' + (isFuture || withoutSuffix ? ' Ã³ra' : ' Ã³rÃ¡ja');
        case 'hh':
            return num + (isFuture || withoutSuffix ? ' Ã³ra' : ' Ã³rÃ¡ja');
        case 'd':
            return 'egy' + (isFuture || withoutSuffix ? ' nap' : ' napja');
        case 'dd':
            return num + (isFuture || withoutSuffix ? ' nap' : ' napja');
        case 'M':
            return 'egy' + (isFuture || withoutSuffix ? ' hÃ³nap' : ' hÃ³napja');
        case 'MM':
            return num + (isFuture || withoutSuffix ? ' hÃ³nap' : ' hÃ³napja');
        case 'y':
            return 'egy' + (isFuture || withoutSuffix ? ' Ã©v' : ' Ã©ve');
        case 'yy':
            return num + (isFuture || withoutSuffix ? ' Ã©v' : ' Ã©ve');
    }
    return '';
}
function week(isFuture) {
    return (isFuture ? '' : '[mÃºlt] ') + '[' + weekEndings[this.day()] + '] LT[-kor]';
}

hooks.defineLocale('hu', {
    months : 'januÃ¡r_februÃ¡r_mÃ¡rcius_Ã¡prilis_mÃ¡jus_jÃºnius_jÃºlius_augusztus_szeptember_oktÃ³ber_november_december'.split('_'),
    monthsShort : 'jan_feb_mÃ¡rc_Ã¡pr_mÃ¡j_jÃºn_jÃºl_aug_szept_okt_nov_dec'.split('_'),
    weekdays : 'vasÃ¡rnap_hÃ©tfÅ_kedd_szerda_csÃ¼tÃ¶rtÃ¶k_pÃ©ntek_szombat'.split('_'),
    weekdaysShort : 'vas_hÃ©t_kedd_sze_csÃ¼t_pÃ©n_szo'.split('_'),
    weekdaysMin : 'v_h_k_sze_cs_p_szo'.split('_'),
    longDateFormat : {
        LT : 'H:mm',
        LTS : 'H:mm:ss',
        L : 'YYYY.MM.DD.',
        LL : 'YYYY. MMMM D.',
        LLL : 'YYYY. MMMM D. H:mm',
        LLLL : 'YYYY. MMMM D., dddd H:mm'
    },
    meridiemParse: /de|du/i,
    isPM: function (input) {
        return input.charAt(1).toLowerCase() === 'u';
    },
    meridiem : function (hours, minutes, isLower) {
        if (hours < 12) {
            return isLower === true ? 'de' : 'DE';
        } else {
            return isLower === true ? 'du' : 'DU';
        }
    },
    calendar : {
        sameDay : '[ma] LT[-kor]',
        nextDay : '[holnap] LT[-kor]',
        nextWeek : function () {
            return week.call(this, true);
        },
        lastDay : '[tegnap] LT[-kor]',
        lastWeek : function () {
            return week.call(this, false);
        },
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s mÃºlva',
        past : '%s',
        s : translate$4,
        m : translate$4,
        mm : translate$4,
        h : translate$4,
        hh : translate$4,
        d : translate$4,
        dd : translate$4,
        M : translate$4,
        MM : translate$4,
        y : translate$4,
        yy : translate$4
    },
    ordinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Armenian [hy-am]
//! author : Armendarabyan : https://github.com/armendarabyan

hooks.defineLocale('hy-am', {
    months : {
        format: 'Õ°Õ¸ÖÕ¶Õ¾Õ¡ÖÕ«_ÖÕ¥Õ¿ÖÕ¾Õ¡ÖÕ«_Õ´Õ¡ÖÕ¿Õ«_Õ¡ÕºÖÕ«Õ¬Õ«_Õ´Õ¡ÕµÕ«Õ½Õ«_Õ°Õ¸ÖÕ¶Õ«Õ½Õ«_Õ°Õ¸ÖÕ¬Õ«Õ½Õ«_ÖÕ£Õ¸Õ½Õ¿Õ¸Õ½Õ«_Õ½Õ¥ÕºÕ¿Õ¥Õ´Õ¢Õ¥ÖÕ«_Õ°Õ¸Õ¯Õ¿Õ¥Õ´Õ¢Õ¥ÖÕ«_Õ¶Õ¸ÕµÕ¥Õ´Õ¢Õ¥ÖÕ«_Õ¤Õ¥Õ¯Õ¿Õ¥Õ´Õ¢Õ¥ÖÕ«'.split('_'),
        standalone: 'Õ°Õ¸ÖÕ¶Õ¾Õ¡Ö_ÖÕ¥Õ¿ÖÕ¾Õ¡Ö_Õ´Õ¡ÖÕ¿_Õ¡ÕºÖÕ«Õ¬_Õ´Õ¡ÕµÕ«Õ½_Õ°Õ¸ÖÕ¶Õ«Õ½_Õ°Õ¸ÖÕ¬Õ«Õ½_ÖÕ£Õ¸Õ½Õ¿Õ¸Õ½_Õ½Õ¥ÕºÕ¿Õ¥Õ´Õ¢Õ¥Ö_Õ°Õ¸Õ¯Õ¿Õ¥Õ´Õ¢Õ¥Ö_Õ¶Õ¸ÕµÕ¥Õ´Õ¢Õ¥Ö_Õ¤Õ¥Õ¯Õ¿Õ¥Õ´Õ¢Õ¥Ö'.split('_')
    },
    monthsShort : 'Õ°Õ¶Õ¾_ÖÕ¿Ö_Õ´ÖÕ¿_Õ¡ÕºÖ_Õ´ÕµÕ½_Õ°Õ¶Õ½_Õ°Õ¬Õ½_ÖÕ£Õ½_Õ½ÕºÕ¿_Õ°Õ¯Õ¿_Õ¶Õ´Õ¢_Õ¤Õ¯Õ¿'.split('_'),
    weekdays : 'Õ¯Õ«ÖÕ¡Õ¯Õ«_Õ¥ÖÕ¯Õ¸ÖÕ·Õ¡Õ¢Õ©Õ«_Õ¥ÖÕ¥ÖÕ·Õ¡Õ¢Õ©Õ«_Õ¹Õ¸ÖÕ¥ÖÕ·Õ¡Õ¢Õ©Õ«_Õ°Õ«Õ¶Õ£Õ·Õ¡Õ¢Õ©Õ«_Õ¸ÖÖÕ¢Õ¡Õ©_Õ·Õ¡Õ¢Õ¡Õ©'.split('_'),
    weekdaysShort : 'Õ¯ÖÕ¯_Õ¥ÖÕ¯_Õ¥ÖÖ_Õ¹ÖÖ_Õ°Õ¶Õ£_Õ¸ÖÖÕ¢_Õ·Õ¢Õ©'.split('_'),
    weekdaysMin : 'Õ¯ÖÕ¯_Õ¥ÖÕ¯_Õ¥ÖÖ_Õ¹ÖÖ_Õ°Õ¶Õ£_Õ¸ÖÖÕ¢_Õ·Õ¢Õ©'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D MMMM YYYY Õ©.',
        LLL : 'D MMMM YYYY Õ©., HH:mm',
        LLLL : 'dddd, D MMMM YYYY Õ©., HH:mm'
    },
    calendar : {
        sameDay: '[Õ¡ÕµÕ½ÖÖ] LT',
        nextDay: '[Õ¾Õ¡Õ²Õ¨] LT',
        lastDay: '[Õ¥ÖÕ¥Õ¯] LT',
        nextWeek: function () {
            return 'dddd [ÖÖÕ¨ ÕªÕ¡Õ´Õ¨] LT';
        },
        lastWeek: function () {
            return '[Õ¡Õ¶ÖÕ¡Õ®] dddd [ÖÖÕ¨ ÕªÕ¡Õ´Õ¨] LT';
        },
        sameElse: 'L'
    },
    relativeTime : {
        future : '%s Õ°Õ¥Õ¿Õ¸',
        past : '%s Õ¡Õ¼Õ¡Õ»',
        s : 'Õ´Õ« ÖÕ¡Õ¶Õ« Õ¾Õ¡ÕµÖÕ¯ÕµÕ¡Õ¶',
        m : 'ÖÕ¸ÕºÕ¥',
        mm : '%d ÖÕ¸ÕºÕ¥',
        h : 'ÕªÕ¡Õ´',
        hh : '%d ÕªÕ¡Õ´',
        d : 'ÖÖ',
        dd : '%d ÖÖ',
        M : 'Õ¡Õ´Õ«Õ½',
        MM : '%d Õ¡Õ´Õ«Õ½',
        y : 'Õ¿Õ¡ÖÕ«',
        yy : '%d Õ¿Õ¡ÖÕ«'
    },
    meridiemParse: /Õ£Õ«Õ·Õ¥ÖÕ¾Õ¡|Õ¡Õ¼Õ¡Õ¾Õ¸Õ¿Õ¾Õ¡|ÖÕ¥ÖÕ¥Õ¯Õ¾Õ¡|Õ¥ÖÕ¥Õ¯Õ¸ÕµÕ¡Õ¶/,
    isPM: function (input) {
        return /^(ÖÕ¥ÖÕ¥Õ¯Õ¾Õ¡|Õ¥ÖÕ¥Õ¯Õ¸ÕµÕ¡Õ¶)$/.test(input);
    },
    meridiem : function (hour) {
        if (hour < 4) {
            return 'Õ£Õ«Õ·Õ¥ÖÕ¾Õ¡';
        } else if (hour < 12) {
            return 'Õ¡Õ¼Õ¡Õ¾Õ¸Õ¿Õ¾Õ¡';
        } else if (hour < 17) {
            return 'ÖÕ¥ÖÕ¥Õ¯Õ¾Õ¡';
        } else {
            return 'Õ¥ÖÕ¥Õ¯Õ¸ÕµÕ¡Õ¶';
        }
    },
    ordinalParse: /\d{1,2}|\d{1,2}-(Õ«Õ¶|ÖÕ¤)/,
    ordinal: function (number, period) {
        switch (period) {
            case 'DDD':
            case 'w':
            case 'W':
            case 'DDDo':
                if (number === 1) {
                    return number + '-Õ«Õ¶';
                }
                return number + '-ÖÕ¤';
            default:
                return number;
        }
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Indonesian [id]
//! author : Mohammad Satrio Utomo : https://github.com/tyok
//! reference: http://id.wikisource.org/wiki/Pedoman_Umum_Ejaan_Bahasa_Indonesia_yang_Disempurnakan

hooks.defineLocale('id', {
    months : 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember'.split('_'),
    monthsShort : 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des'.split('_'),
    weekdays : 'Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu'.split('_'),
    weekdaysShort : 'Min_Sen_Sel_Rab_Kam_Jum_Sab'.split('_'),
    weekdaysMin : 'Mg_Sn_Sl_Rb_Km_Jm_Sb'.split('_'),
    longDateFormat : {
        LT : 'HH.mm',
        LTS : 'HH.mm.ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY [pukul] HH.mm',
        LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
    },
    meridiemParse: /pagi|siang|sore|malam/,
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === 'pagi') {
            return hour;
        } else if (meridiem === 'siang') {
            return hour >= 11 ? hour : hour + 12;
        } else if (meridiem === 'sore' || meridiem === 'malam') {
            return hour + 12;
        }
    },
    meridiem : function (hours, minutes, isLower) {
        if (hours < 11) {
            return 'pagi';
        } else if (hours < 15) {
            return 'siang';
        } else if (hours < 19) {
            return 'sore';
        } else {
            return 'malam';
        }
    },
    calendar : {
        sameDay : '[Hari ini pukul] LT',
        nextDay : '[Besok pukul] LT',
        nextWeek : 'dddd [pukul] LT',
        lastDay : '[Kemarin pukul] LT',
        lastWeek : 'dddd [lalu pukul] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'dalam %s',
        past : '%s yang lalu',
        s : 'beberapa detik',
        m : 'semenit',
        mm : '%d menit',
        h : 'sejam',
        hh : '%d jam',
        d : 'sehari',
        dd : '%d hari',
        M : 'sebulan',
        MM : '%d bulan',
        y : 'setahun',
        yy : '%d tahun'
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Icelandic [is]
//! author : Hinrik Ãrn SigurÃ°sson : https://github.com/hinrik

function plural$2(n) {
    if (n % 100 === 11) {
        return true;
    } else if (n % 10 === 1) {
        return false;
    }
    return true;
}
function translate$5(number, withoutSuffix, key, isFuture) {
    var result = number + ' ';
    switch (key) {
        case 's':
            return withoutSuffix || isFuture ? 'nokkrar sekÃºndur' : 'nokkrum sekÃºndum';
        case 'm':
            return withoutSuffix ? 'mÃ­nÃºta' : 'mÃ­nÃºtu';
        case 'mm':
            if (plural$2(number)) {
                return result + (withoutSuffix || isFuture ? 'mÃ­nÃºtur' : 'mÃ­nÃºtum');
            } else if (withoutSuffix) {
                return result + 'mÃ­nÃºta';
            }
            return result + 'mÃ­nÃºtu';
        case 'hh':
            if (plural$2(number)) {
                return result + (withoutSuffix || isFuture ? 'klukkustundir' : 'klukkustundum');
            }
            return result + 'klukkustund';
        case 'd':
            if (withoutSuffix) {
                return 'dagur';
            }
            return isFuture ? 'dag' : 'degi';
        case 'dd':
            if (plural$2(number)) {
                if (withoutSuffix) {
                    return result + 'dagar';
                }
                return result + (isFuture ? 'daga' : 'dÃ¶gum');
            } else if (withoutSuffix) {
                return result + 'dagur';
            }
            return result + (isFuture ? 'dag' : 'degi');
        case 'M':
            if (withoutSuffix) {
                return 'mÃ¡nuÃ°ur';
            }
            return isFuture ? 'mÃ¡nuÃ°' : 'mÃ¡nuÃ°i';
        case 'MM':
            if (plural$2(number)) {
                if (withoutSuffix) {
                    return result + 'mÃ¡nuÃ°ir';
                }
                return result + (isFuture ? 'mÃ¡nuÃ°i' : 'mÃ¡nuÃ°um');
            } else if (withoutSuffix) {
                return result + 'mÃ¡nuÃ°ur';
            }
            return result + (isFuture ? 'mÃ¡nuÃ°' : 'mÃ¡nuÃ°i');
        case 'y':
            return withoutSuffix || isFuture ? 'Ã¡r' : 'Ã¡ri';
        case 'yy':
            if (plural$2(number)) {
                return result + (withoutSuffix || isFuture ? 'Ã¡r' : 'Ã¡rum');
            }
            return result + (withoutSuffix || isFuture ? 'Ã¡r' : 'Ã¡ri');
    }
}

hooks.defineLocale('is', {
    months : 'janÃºar_febrÃºar_mars_aprÃ­l_maÃ­_jÃºnÃ­_jÃºlÃ­_Ã¡gÃºst_september_oktÃ³ber_nÃ³vember_desember'.split('_'),
    monthsShort : 'jan_feb_mar_apr_maÃ­_jÃºn_jÃºl_Ã¡gÃº_sep_okt_nÃ³v_des'.split('_'),
    weekdays : 'sunnudagur_mÃ¡nudagur_Ã¾riÃ°judagur_miÃ°vikudagur_fimmtudagur_fÃ¶studagur_laugardagur'.split('_'),
    weekdaysShort : 'sun_mÃ¡n_Ã¾ri_miÃ°_fim_fÃ¶s_lau'.split('_'),
    weekdaysMin : 'Su_MÃ¡_Ãr_Mi_Fi_FÃ¶_La'.split('_'),
    longDateFormat : {
        LT : 'H:mm',
        LTS : 'H:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D. MMMM YYYY',
        LLL : 'D. MMMM YYYY [kl.] H:mm',
        LLLL : 'dddd, D. MMMM YYYY [kl.] H:mm'
    },
    calendar : {
        sameDay : '[Ã­ dag kl.] LT',
        nextDay : '[Ã¡ morgun kl.] LT',
        nextWeek : 'dddd [kl.] LT',
        lastDay : '[Ã­ gÃ¦r kl.] LT',
        lastWeek : '[sÃ­Ã°asta] dddd [kl.] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'eftir %s',
        past : 'fyrir %s sÃ­Ã°an',
        s : translate$5,
        m : translate$5,
        mm : translate$5,
        h : 'klukkustund',
        hh : translate$5,
        d : translate$5,
        dd : translate$5,
        M : translate$5,
        MM : translate$5,
        y : translate$5,
        yy : translate$5
    },
    ordinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Italian [it]
//! author : Lorenzo : https://github.com/aliem
//! author: Mattia Larentis: https://github.com/nostalgiaz

hooks.defineLocale('it', {
    months : 'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split('_'),
    monthsShort : 'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),
    weekdays : 'Domenica_LunedÃ¬_MartedÃ¬_MercoledÃ¬_GiovedÃ¬_VenerdÃ¬_Sabato'.split('_'),
    weekdaysShort : 'Dom_Lun_Mar_Mer_Gio_Ven_Sab'.split('_'),
    weekdaysMin : 'Do_Lu_Ma_Me_Gi_Ve_Sa'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[Oggi alle] LT',
        nextDay: '[Domani alle] LT',
        nextWeek: 'dddd [alle] LT',
        lastDay: '[Ieri alle] LT',
        lastWeek: function () {
            switch (this.day()) {
                case 0:
                    return '[la scorsa] dddd [alle] LT';
                default:
                    return '[lo scorso] dddd [alle] LT';
            }
        },
        sameElse: 'L'
    },
    relativeTime : {
        future : function (s) {
            return ((/^[0-9].+$/).test(s) ? 'tra' : 'in') + ' ' + s;
        },
        past : '%s fa',
        s : 'alcuni secondi',
        m : 'un minuto',
        mm : '%d minuti',
        h : 'un\'ora',
        hh : '%d ore',
        d : 'un giorno',
        dd : '%d giorni',
        M : 'un mese',
        MM : '%d mesi',
        y : 'un anno',
        yy : '%d anni'
    },
    ordinalParse : /\d{1,2}Âº/,
    ordinal: '%dÂº',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Japanese [ja]
//! author : LI Long : https://github.com/baryon

hooks.defineLocale('ja', {
    months : '1æ_2æ_3æ_4æ_5æ_6æ_7æ_8æ_9æ_10æ_11æ_12æ'.split('_'),
    monthsShort : '1æ_2æ_3æ_4æ_5æ_6æ_7æ_8æ_9æ_10æ_11æ_12æ'.split('_'),
    weekdays : 'æ¥ææ¥_æææ¥_ç«ææ¥_æ°´ææ¥_æ¨ææ¥_éææ¥_åææ¥'.split('_'),
    weekdaysShort : 'æ¥_æ_ç«_æ°´_æ¨_é_å'.split('_'),
    weekdaysMin : 'æ¥_æ_ç«_æ°´_æ¨_é_å'.split('_'),
    longDateFormat : {
        LT : 'Ahæmå',
        LTS : 'Ahæmåsç§',
        L : 'YYYY/MM/DD',
        LL : 'YYYYå¹´MæDæ¥',
        LLL : 'YYYYå¹´MæDæ¥Ahæmå',
        LLLL : 'YYYYå¹´MæDæ¥Ahæmå dddd'
    },
    meridiemParse: /åå|åå¾/i,
    isPM : function (input) {
        return input === 'åå¾';
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 12) {
            return 'åå';
        } else {
            return 'åå¾';
        }
    },
    calendar : {
        sameDay : '[ä»æ¥] LT',
        nextDay : '[ææ¥] LT',
        nextWeek : '[æ¥é±]dddd LT',
        lastDay : '[æ¨æ¥] LT',
        lastWeek : '[åé±]dddd LT',
        sameElse : 'L'
    },
    ordinalParse : /\d{1,2}æ¥/,
    ordinal : function (number, period) {
        switch (period) {
            case 'd':
            case 'D':
            case 'DDD':
                return number + 'æ¥';
            default:
                return number;
        }
    },
    relativeTime : {
        future : '%så¾',
        past : '%så',
        s : 'æ°ç§',
        m : '1å',
        mm : '%då',
        h : '1æé',
        hh : '%dæé',
        d : '1æ¥',
        dd : '%dæ¥',
        M : '1ã¶æ',
        MM : '%dã¶æ',
        y : '1å¹´',
        yy : '%då¹´'
    }
});

//! moment.js locale configuration
//! locale : Javanese [jv]
//! author : Rony Lantip : https://github.com/lantip
//! reference: http://jv.wikipedia.org/wiki/Basa_Jawa

hooks.defineLocale('jv', {
    months : 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember'.split('_'),
    monthsShort : 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des'.split('_'),
    weekdays : 'Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu'.split('_'),
    weekdaysShort : 'Min_Sen_Sel_Reb_Kem_Jem_Sep'.split('_'),
    weekdaysMin : 'Mg_Sn_Sl_Rb_Km_Jm_Sp'.split('_'),
    longDateFormat : {
        LT : 'HH.mm',
        LTS : 'HH.mm.ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY [pukul] HH.mm',
        LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
    },
    meridiemParse: /enjing|siyang|sonten|ndalu/,
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === 'enjing') {
            return hour;
        } else if (meridiem === 'siyang') {
            return hour >= 11 ? hour : hour + 12;
        } else if (meridiem === 'sonten' || meridiem === 'ndalu') {
            return hour + 12;
        }
    },
    meridiem : function (hours, minutes, isLower) {
        if (hours < 11) {
            return 'enjing';
        } else if (hours < 15) {
            return 'siyang';
        } else if (hours < 19) {
            return 'sonten';
        } else {
            return 'ndalu';
        }
    },
    calendar : {
        sameDay : '[Dinten puniko pukul] LT',
        nextDay : '[Mbenjang pukul] LT',
        nextWeek : 'dddd [pukul] LT',
        lastDay : '[Kala wingi pukul] LT',
        lastWeek : 'dddd [kepengker pukul] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'wonten ing %s',
        past : '%s ingkang kepengker',
        s : 'sawetawis detik',
        m : 'setunggal menit',
        mm : '%d menit',
        h : 'setunggal jam',
        hh : '%d jam',
        d : 'sedinten',
        dd : '%d dinten',
        M : 'sewulan',
        MM : '%d wulan',
        y : 'setaun',
        yy : '%d taun'
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Georgian [ka]
//! author : Irakli Janiashvili : https://github.com/irakli-janiashvili

hooks.defineLocale('ka', {
    months : {
        standalone: 'áááááá á_ááááá áááá_ááá á¢á_ááá ááá_áááá¡á_ááááá¡á_ááááá¡á_ááááá¡á¢á_á¡áá¥á¢ááááá á_áá¥á¢ááááá á_ááááááá á_áááááááá á'.split('_'),
        format: 'áááááá á¡_ááááá áááá¡_ááá á¢á¡_ááá áááá¡_áááá¡á¡_ááááá¡á¡_ááááá¡á¡_ááááá¡á¢á¡_á¡áá¥á¢ááááá á¡_áá¥á¢ááááá á¡_ááááááá á¡_áááááááá á¡'.split('_')
    },
    monthsShort : 'ááá_ááá_ááá _ááá _ááá_ááá_ááá_ááá_á¡áá¥_áá¥á¢_ááá_ááá'.split('_'),
    weekdays : {
        standalone: 'áááá á_áá á¨ááááá_á¡ááá¨ááááá_ááá®á¨ááááá_á®á£áá¨ááááá_ááá áá¡áááá_á¨ááááá'.split('_'),
        format: 'áááá áá¡_áá á¨ááááá¡_á¡ááá¨ááááá¡_ááá®á¨ááááá¡_á®á£áá¨ááááá¡_ááá áá¡áááá¡_á¨ááááá¡'.split('_'),
        isFormat: /(á¬ááá|á¨ááááá)/
    },
    weekdaysShort : 'ááá_áá á¨_á¡áá_ááá®_á®á£á_ááá _á¨áá'.split('_'),
    weekdaysMin : 'áá_áá _á¡á_áá_á®á£_áá_á¨á'.split('_'),
    longDateFormat : {
        LT : 'h:mm A',
        LTS : 'h:mm:ss A',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY h:mm A',
        LLLL : 'dddd, D MMMM YYYY h:mm A'
    },
    calendar : {
        sameDay : '[áá¦áá¡] LT[-áá]',
        nextDay : '[á®ááá] LT[-áá]',
        lastDay : '[áá£á¨áá] LT[-áá]',
        nextWeek : '[á¨ááááá] dddd LT[-áá]',
        lastWeek : '[á¬ááá] dddd LT-áá',
        sameElse : 'L'
    },
    relativeTime : {
        future : function (s) {
            return (/(á¬ááá|á¬á£áá|á¡áááá|á¬ááá)/).test(s) ?
                s.replace(/á$/, 'á¨á') :
                s + 'á¨á';
        },
        past : function (s) {
            if ((/(á¬ááá|á¬á£áá|á¡áááá|áá¦á|ááá)/).test(s)) {
                return s.replace(/(á|á)$/, 'áá¡ á¬áá');
            }
            if ((/á¬ááá/).test(s)) {
                return s.replace(/á¬ááá$/, 'á¬ááá¡ á¬áá');
            }
        },
        s : 'á áááááááá á¬ááá',
        m : 'á¬á£áá',
        mm : '%d á¬á£áá',
        h : 'á¡áááá',
        hh : '%d á¡áááá',
        d : 'áá¦á',
        dd : '%d áá¦á',
        M : 'ááá',
        MM : '%d ááá',
        y : 'á¬ááá',
        yy : '%d á¬ááá'
    },
    ordinalParse: /0|1-áá|áá-\d{1,2}|\d{1,2}-á/,
    ordinal : function (number) {
        if (number === 0) {
            return number;
        }
        if (number === 1) {
            return number + '-áá';
        }
        if ((number < 20) || (number <= 100 && (number % 20 === 0)) || (number % 100 === 0)) {
            return 'áá-' + number;
        }
        return number + '-á';
    },
    week : {
        dow : 1,
        doy : 7
    }
});

//! moment.js locale configuration
//! locale : Kazakh [kk]
//! authors : Nurlan Rakhimzhanov : https://github.com/nurlan

var suffixes$1 = {
    0: '-ÑÑ',
    1: '-ÑÑ',
    2: '-ÑÑ',
    3: '-ÑÑ',
    4: '-ÑÑ',
    5: '-ÑÑ',
    6: '-ÑÑ',
    7: '-ÑÑ',
    8: '-ÑÑ',
    9: '-ÑÑ',
    10: '-ÑÑ',
    20: '-ÑÑ',
    30: '-ÑÑ',
    40: '-ÑÑ',
    50: '-ÑÑ',
    60: '-ÑÑ',
    70: '-ÑÑ',
    80: '-ÑÑ',
    90: '-ÑÑ',
    100: '-ÑÑ'
};

hooks.defineLocale('kk', {
    months : 'ÒÐ°Ò£ÑÐ°Ñ_Ð°ÒÐ¿Ð°Ð½_Ð½Ð°ÑÑÑÐ·_ÑÓÑÑÑ_Ð¼Ð°Ð¼ÑÑ_Ð¼Ð°ÑÑÑÐ¼_ÑÑÐ»Ð´Ðµ_ÑÐ°Ð¼ÑÐ·_ÒÑÑÐºÒ¯Ð¹ÐµÐº_ÒÐ°Ð·Ð°Ð½_ÒÐ°ÑÐ°ÑÐ°_Ð¶ÐµÐ»ÑÐ¾ÒÑÐ°Ð½'.split('_'),
    monthsShort : 'ÒÐ°Ò£_Ð°ÒÐ¿_Ð½Ð°Ñ_ÑÓÑ_Ð¼Ð°Ð¼_Ð¼Ð°Ñ_ÑÑÐ»_ÑÐ°Ð¼_ÒÑÑ_ÒÐ°Ð·_ÒÐ°Ñ_Ð¶ÐµÐ»'.split('_'),
    weekdays : 'Ð¶ÐµÐºÑÐµÐ½Ð±Ñ_Ð´Ò¯Ð¹ÑÐµÐ½Ð±Ñ_ÑÐµÐ¹ÑÐµÐ½Ð±Ñ_ÑÓÑÑÐµÐ½Ð±Ñ_Ð±ÐµÐ¹ÑÐµÐ½Ð±Ñ_Ð¶Ò±Ð¼Ð°_ÑÐµÐ½Ð±Ñ'.split('_'),
    weekdaysShort : 'Ð¶ÐµÐº_Ð´Ò¯Ð¹_ÑÐµÐ¹_ÑÓÑ_Ð±ÐµÐ¹_Ð¶Ò±Ð¼_ÑÐµÐ½'.split('_'),
    weekdaysMin : 'Ð¶Ðº_Ð´Ð¹_ÑÐ¹_ÑÑ_Ð±Ð¹_Ð¶Ð¼_ÑÐ½'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[ÐÒ¯Ð³ÑÐ½ ÑÐ°ÒÐ°Ñ] LT',
        nextDay : '[ÐÑÑÐµÒ£ ÑÐ°ÒÐ°Ñ] LT',
        nextWeek : 'dddd [ÑÐ°ÒÐ°Ñ] LT',
        lastDay : '[ÐÐµÑÐµ ÑÐ°ÒÐ°Ñ] LT',
        lastWeek : '[Ó¨ÑÐºÐµÐ½ Ð°Ð¿ÑÐ°Ð½ÑÒ£] dddd [ÑÐ°ÒÐ°Ñ] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s ÑÑÑÐ½Ð´Ðµ',
        past : '%s Ð±Ò±ÑÑÐ½',
        s : 'Ð±ÑÑÐ½ÐµÑÐµ ÑÐµÐºÑÐ½Ð´',
        m : 'Ð±ÑÑ Ð¼Ð¸Ð½ÑÑ',
        mm : '%d Ð¼Ð¸Ð½ÑÑ',
        h : 'Ð±ÑÑ ÑÐ°ÒÐ°Ñ',
        hh : '%d ÑÐ°ÒÐ°Ñ',
        d : 'Ð±ÑÑ ÐºÒ¯Ð½',
        dd : '%d ÐºÒ¯Ð½',
        M : 'Ð±ÑÑ Ð°Ð¹',
        MM : '%d Ð°Ð¹',
        y : 'Ð±ÑÑ Ð¶ÑÐ»',
        yy : '%d Ð¶ÑÐ»'
    },
    ordinalParse: /\d{1,2}-(ÑÑ|ÑÑ)/,
    ordinal : function (number) {
        var a = number % 10,
            b = number >= 100 ? 100 : null;
        return number + (suffixes$1[number] || suffixes$1[a] || suffixes$1[b]);
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Cambodian [km]
//! author : Kruy Vanna : https://github.com/kruyvanna

hooks.defineLocale('km', {
    months: 'áááá¶_áá»áááá_áá¸áá¶_áááá¶_á§ááá¶_áá·áá»áá¶_áááááá¶_áá¸á á¶_ááááá¶_áá»áá¶_áá·áááá·áá¶_áááá¼'.split('_'),
    monthsShort: 'áááá¶_áá»áááá_áá¸áá¶_áááá¶_á§ááá¶_áá·áá»áá¶_áááááá¶_áá¸á á¶_ááááá¶_áá»áá¶_áá·áááá·áá¶_áááá¼'.split('_'),
    weekdays: 'á¢á¶áá·ááá_ááááá_á¢áááá¶á_áá»á_áááá ááááá·á_áá»ááá_áááá'.split('_'),
    weekdaysShort: 'á¢á¶áá·ááá_ááááá_á¢áááá¶á_áá»á_áááá ááááá·á_áá»ááá_áááá'.split('_'),
    weekdaysMin: 'á¢á¶áá·ááá_ááááá_á¢áááá¶á_áá»á_áááá ááááá·á_áá»ááá_áááá'.split('_'),
    longDateFormat: {
        LT: 'HH:mm',
        LTS : 'HH:mm:ss',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY HH:mm',
        LLLL: 'dddd, D MMMM YYYY HH:mm'
    },
    calendar: {
        sameDay: '[ááááááá áááá] LT',
        nextDay: '[ááá¢áá áááá] LT',
        nextWeek: 'dddd [áááá] LT',
        lastDay: '[áááá·ááá·á áááá] LT',
        lastWeek: 'dddd [ááááá¶á ááá»á] [áááá] LT',
        sameElse: 'L'
    },
    relativeTime: {
        future: '%sááá',
        past: '%sáá»á',
        s: 'ááá»áááá¶ááá·áá¶áá¸',
        m: 'áá½ááá¶áá¸',
        mm: '%d áá¶áá¸',
        h: 'áá½ááááá',
        hh: '%d áááá',
        d: 'áá½ááááá',
        dd: '%d áááá',
        M: 'áá½ááá',
        MM: '%d áá',
        y: 'áá½ááááá¶á',
        yy: '%d áááá¶á'
    },
    week: {
        dow: 1, // Monday is the first day of the week.
        doy: 4 // The week that contains Jan 4th is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Korean [ko]
//! author : Kyungwook, Park : https://github.com/kyungw00k
//! author : Jeeeyul Lee <jeeeyul@gmail.com>

hooks.defineLocale('ko', {
    months : '1ì_2ì_3ì_4ì_5ì_6ì_7ì_8ì_9ì_10ì_11ì_12ì'.split('_'),
    monthsShort : '1ì_2ì_3ì_4ì_5ì_6ì_7ì_8ì_9ì_10ì_11ì_12ì'.split('_'),
    weekdays : 'ì¼ìì¼_ììì¼_íìì¼_ììì¼_ëª©ìì¼_ê¸ìì¼_í ìì¼'.split('_'),
    weekdaysShort : 'ì¼_ì_í_ì_ëª©_ê¸_í '.split('_'),
    weekdaysMin : 'ì¼_ì_í_ì_ëª©_ê¸_í '.split('_'),
    longDateFormat : {
        LT : 'A hì më¶',
        LTS : 'A hì më¶ sì´',
        L : 'YYYY.MM.DD',
        LL : 'YYYYë MMMM Dì¼',
        LLL : 'YYYYë MMMM Dì¼ A hì më¶',
        LLLL : 'YYYYë MMMM Dì¼ dddd A hì më¶'
    },
    calendar : {
        sameDay : 'ì¤ë LT',
        nextDay : 'ë´ì¼ LT',
        nextWeek : 'dddd LT',
        lastDay : 'ì´ì  LT',
        lastWeek : 'ì§ëì£¼ dddd LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s í',
        past : '%s ì ',
        s : 'ëª ì´',
        ss : '%dì´',
        m : 'ì¼ë¶',
        mm : '%dë¶',
        h : 'í ìê°',
        hh : '%dìê°',
        d : 'íë£¨',
        dd : '%dì¼',
        M : 'í ë¬',
        MM : '%dë¬',
        y : 'ì¼ ë',
        yy : '%dë'
    },
    ordinalParse : /\d{1,2}ì¼/,
    ordinal : '%dì¼',
    meridiemParse : /ì¤ì |ì¤í/,
    isPM : function (token) {
        return token === 'ì¤í';
    },
    meridiem : function (hour, minute, isUpper) {
        return hour < 12 ? 'ì¤ì ' : 'ì¤í';
    }
});

//! moment.js locale configuration
//! locale : Kyrgyz [ky]
//! author : Chyngyz Arystan uulu : https://github.com/chyngyz


var suffixes$2 = {
    0: '-ÑÒ¯',
    1: '-ÑÐ¸',
    2: '-ÑÐ¸',
    3: '-ÑÒ¯',
    4: '-ÑÒ¯',
    5: '-ÑÐ¸',
    6: '-ÑÑ',
    7: '-ÑÐ¸',
    8: '-ÑÐ¸',
    9: '-ÑÑ',
    10: '-ÑÑ',
    20: '-ÑÑ',
    30: '-ÑÑ',
    40: '-ÑÑ',
    50: '-ÑÒ¯',
    60: '-ÑÑ',
    70: '-ÑÐ¸',
    80: '-ÑÐ¸',
    90: '-ÑÑ',
    100: '-ÑÒ¯'
};

hooks.defineLocale('ky', {
    months : 'ÑÐ½Ð²Ð°ÑÑ_ÑÐµÐ²ÑÐ°Ð»Ñ_Ð¼Ð°ÑÑ_Ð°Ð¿ÑÐµÐ»Ñ_Ð¼Ð°Ð¹_Ð¸ÑÐ½Ñ_Ð¸ÑÐ»Ñ_Ð°Ð²Ð³ÑÑÑ_ÑÐµÐ½ÑÑÐ±ÑÑ_Ð¾ÐºÑÑÐ±ÑÑ_Ð½Ð¾ÑÐ±ÑÑ_Ð´ÐµÐºÐ°Ð±ÑÑ'.split('_'),
    monthsShort : 'ÑÐ½Ð²_ÑÐµÐ²_Ð¼Ð°ÑÑ_Ð°Ð¿Ñ_Ð¼Ð°Ð¹_Ð¸ÑÐ½Ñ_Ð¸ÑÐ»Ñ_Ð°Ð²Ð³_ÑÐµÐ½_Ð¾ÐºÑ_Ð½Ð¾Ñ_Ð´ÐµÐº'.split('_'),
    weekdays : 'ÐÐµÐºÑÐµÐ¼Ð±Ð¸_ÐÒ¯Ð¹ÑÓ©Ð¼Ð±Ò¯_Ð¨ÐµÐ¹ÑÐµÐ¼Ð±Ð¸_Ð¨Ð°ÑÑÐµÐ¼Ð±Ð¸_ÐÐµÐ¹ÑÐµÐ¼Ð±Ð¸_ÐÑÐ¼Ð°_ÐÑÐµÐ¼Ð±Ð¸'.split('_'),
    weekdaysShort : 'ÐÐµÐº_ÐÒ¯Ð¹_Ð¨ÐµÐ¹_Ð¨Ð°Ñ_ÐÐµÐ¹_ÐÑÐ¼_ÐÑÐµ'.split('_'),
    weekdaysMin : 'ÐÐº_ÐÐ¹_Ð¨Ð¹_Ð¨Ñ_ÐÐ¹_ÐÐ¼_ÐÑ'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[ÐÒ¯Ð³Ò¯Ð½ ÑÐ°Ð°Ñ] LT',
        nextDay : '[Ð­ÑÑÐµÒ£ ÑÐ°Ð°Ñ] LT',
        nextWeek : 'dddd [ÑÐ°Ð°Ñ] LT',
        lastDay : '[ÐÐµÑÐµ ÑÐ°Ð°Ñ] LT',
        lastWeek : '[Ó¨ÑÐºÐµÐ½ Ð°Ð¿ÑÐ°Ð½ÑÐ½] dddd [ÐºÒ¯Ð½Ò¯] [ÑÐ°Ð°Ñ] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s Ð¸ÑÐ¸Ð½Ð´Ðµ',
        past : '%s Ð¼ÑÑÑÐ½',
        s : 'Ð±Ð¸ÑÐ½ÐµÑÐµ ÑÐµÐºÑÐ½Ð´',
        m : 'Ð±Ð¸Ñ Ð¼Ò¯Ð½Ó©Ñ',
        mm : '%d Ð¼Ò¯Ð½Ó©Ñ',
        h : 'Ð±Ð¸Ñ ÑÐ°Ð°Ñ',
        hh : '%d ÑÐ°Ð°Ñ',
        d : 'Ð±Ð¸Ñ ÐºÒ¯Ð½',
        dd : '%d ÐºÒ¯Ð½',
        M : 'Ð±Ð¸Ñ Ð°Ð¹',
        MM : '%d Ð°Ð¹',
        y : 'Ð±Ð¸Ñ Ð¶ÑÐ»',
        yy : '%d Ð¶ÑÐ»'
    },
    ordinalParse: /\d{1,2}-(ÑÐ¸|ÑÑ|ÑÒ¯|ÑÑ)/,
    ordinal : function (number) {
        var a = number % 10,
            b = number >= 100 ? 100 : null;
        return number + (suffixes$2[number] || suffixes$2[a] || suffixes$2[b]);
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Luxembourgish [lb]
//! author : mweimerskirch : https://github.com/mweimerskirch
//! author : David Raison : https://github.com/kwisatz

function processRelativeTime$3(number, withoutSuffix, key, isFuture) {
    var format = {
        'm': ['eng Minutt', 'enger Minutt'],
        'h': ['eng Stonn', 'enger Stonn'],
        'd': ['een Dag', 'engem Dag'],
        'M': ['ee Mount', 'engem Mount'],
        'y': ['ee Joer', 'engem Joer']
    };
    return withoutSuffix ? format[key][0] : format[key][1];
}
function processFutureTime(string) {
    var number = string.substr(0, string.indexOf(' '));
    if (eifelerRegelAppliesToNumber(number)) {
        return 'a ' + string;
    }
    return 'an ' + string;
}
function processPastTime(string) {
    var number = string.substr(0, string.indexOf(' '));
    if (eifelerRegelAppliesToNumber(number)) {
        return 'viru ' + string;
    }
    return 'virun ' + string;
}
/**
 * Returns true if the word before the given number loses the '-n' ending.
 * e.g. 'an 10 Deeg' but 'a 5 Deeg'
 *
 * @param number {integer}
 * @returns {boolean}
 */
function eifelerRegelAppliesToNumber(number) {
    number = parseInt(number, 10);
    if (isNaN(number)) {
        return false;
    }
    if (number < 0) {
        // Negative Number --> always true
        return true;
    } else if (number < 10) {
        // Only 1 digit
        if (4 <= number && number <= 7) {
            return true;
        }
        return false;
    } else if (number < 100) {
        // 2 digits
        var lastDigit = number % 10, firstDigit = number / 10;
        if (lastDigit === 0) {
            return eifelerRegelAppliesToNumber(firstDigit);
        }
        return eifelerRegelAppliesToNumber(lastDigit);
    } else if (number < 10000) {
        // 3 or 4 digits --> recursively check first digit
        while (number >= 10) {
            number = number / 10;
        }
        return eifelerRegelAppliesToNumber(number);
    } else {
        // Anything larger than 4 digits: recursively check first n-3 digits
        number = number / 1000;
        return eifelerRegelAppliesToNumber(number);
    }
}

hooks.defineLocale('lb', {
    months: 'Januar_Februar_MÃ¤erz_AbrÃ«ll_Mee_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
    monthsShort: 'Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
    monthsParseExact : true,
    weekdays: 'Sonndeg_MÃ©indeg_DÃ«nschdeg_MÃ«ttwoch_Donneschdeg_Freideg_Samschdeg'.split('_'),
    weekdaysShort: 'So._MÃ©._DÃ«._MÃ«._Do._Fr._Sa.'.split('_'),
    weekdaysMin: 'So_MÃ©_DÃ«_MÃ«_Do_Fr_Sa'.split('_'),
    weekdaysParseExact : true,
    longDateFormat: {
        LT: 'H:mm [Auer]',
        LTS: 'H:mm:ss [Auer]',
        L: 'DD.MM.YYYY',
        LL: 'D. MMMM YYYY',
        LLL: 'D. MMMM YYYY H:mm [Auer]',
        LLLL: 'dddd, D. MMMM YYYY H:mm [Auer]'
    },
    calendar: {
        sameDay: '[Haut um] LT',
        sameElse: 'L',
        nextDay: '[Muer um] LT',
        nextWeek: 'dddd [um] LT',
        lastDay: '[GÃ«schter um] LT',
        lastWeek: function () {
            // Different date string for 'DÃ«nschdeg' (Tuesday) and 'Donneschdeg' (Thursday) due to phonological rule
            switch (this.day()) {
                case 2:
                case 4:
                    return '[Leschten] dddd [um] LT';
                default:
                    return '[Leschte] dddd [um] LT';
            }
        }
    },
    relativeTime : {
        future : processFutureTime,
        past : processPastTime,
        s : 'e puer Sekonnen',
        m : processRelativeTime$3,
        mm : '%d Minutten',
        h : processRelativeTime$3,
        hh : '%d Stonnen',
        d : processRelativeTime$3,
        dd : '%d Deeg',
        M : processRelativeTime$3,
        MM : '%d MÃ©int',
        y : processRelativeTime$3,
        yy : '%d Joer'
    },
    ordinalParse: /\d{1,2}\./,
    ordinal: '%d.',
    week: {
        dow: 1, // Monday is the first day of the week.
        doy: 4  // The week that contains Jan 4th is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Lao [lo]
//! author : Ryan Hart : https://github.com/ryanhart2

hooks.defineLocale('lo', {
    months : 'àº¡àº±àºàºàº­àº_àºàº¸àº¡àºàº²_àº¡àºµàºàº²_à»àº¡àºªàº²_àºàº¶àºàºªàº°àºàº²_àº¡àº´àºàº¸àºàº²_àºà»àº¥àº°àºàº»àº_àºªàº´àºàº«àº²_àºàº±àºàºàº²_àºàº¸àº¥àº²_àºàº°àºàº´àº_àºàº±àºàº§àº²'.split('_'),
    monthsShort : 'àº¡àº±àºàºàº­àº_àºàº¸àº¡àºàº²_àº¡àºµàºàº²_à»àº¡àºªàº²_àºàº¶àºàºªàº°àºàº²_àº¡àº´àºàº¸àºàº²_àºà»àº¥àº°àºàº»àº_àºªàº´àºàº«àº²_àºàº±àºàºàº²_àºàº¸àº¥àº²_àºàº°àºàº´àº_àºàº±àºàº§àº²'.split('_'),
    weekdays : 'àº­àº²àºàº´àº_àºàº±àº_àº­àº±àºàºàº²àº_àºàº¸àº_àºàº°àº«àº±àº_àºªàº¸àº_à»àºªàº»àº²'.split('_'),
    weekdaysShort : 'àºàº´àº_àºàº±àº_àº­àº±àºàºàº²àº_àºàº¸àº_àºàº°àº«àº±àº_àºªàº¸àº_à»àºªàº»àº²'.split('_'),
    weekdaysMin : 'àº_àº_àº­àº_àº_àºàº«_àºªàº_àºª'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'àº§àº±àºdddd D MMMM YYYY HH:mm'
    },
    meridiemParse: /àºàº­àºà»àºàº»à»àº²|àºàº­àºà»àº¥àº/,
    isPM: function (input) {
        return input === 'àºàº­àºà»àº¥àº';
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 12) {
            return 'àºàº­àºà»àºàº»à»àº²';
        } else {
            return 'àºàº­àºà»àº¥àº';
        }
    },
    calendar : {
        sameDay : '[àº¡àº·à»àºàºµà»à»àº§àº¥àº²] LT',
        nextDay : '[àº¡àº·à»àº­àº·à»àºà»àº§àº¥àº²] LT',
        nextWeek : '[àº§àº±àº]dddd[à»à»àº²à»àº§àº¥àº²] LT',
        lastDay : '[àº¡àº·à»àº§àº²àºàºàºµà»à»àº§àº¥àº²] LT',
        lastWeek : '[àº§àº±àº]dddd[à»àº¥à»àº§àºàºµà»à»àº§àº¥àº²] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'àº­àºµàº %s',
        past : '%sàºà»àº²àºàº¡àº²',
        s : 'àºà»à»à»àºàº»à»àº²à»àºàº§àº´àºàº²àºàºµ',
        m : '1 àºàº²àºàºµ',
        mm : '%d àºàº²àºàºµ',
        h : '1 àºàº»à»àº§à»àº¡àº',
        hh : '%d àºàº»à»àº§à»àº¡àº',
        d : '1 àº¡àº·à»',
        dd : '%d àº¡àº·à»',
        M : '1 à»àºàº·àº­àº',
        MM : '%d à»àºàº·àº­àº',
        y : '1 àºàºµ',
        yy : '%d àºàºµ'
    },
    ordinalParse: /(àºàºµà»)\d{1,2}/,
    ordinal : function (number) {
        return 'àºàºµà»' + number;
    }
});

//! moment.js locale configuration
//! locale : Lithuanian [lt]
//! author : Mindaugas MozÅ«ras : https://github.com/mmozuras

var units = {
    'm' : 'minutÄ_minutÄs_minutÄ',
    'mm': 'minutÄs_minuÄiÅ³_minutes',
    'h' : 'valanda_valandos_valandÄ',
    'hh': 'valandos_valandÅ³_valandas',
    'd' : 'diena_dienos_dienÄ',
    'dd': 'dienos_dienÅ³_dienas',
    'M' : 'mÄnuo_mÄnesio_mÄnesÄ¯',
    'MM': 'mÄnesiai_mÄnesiÅ³_mÄnesius',
    'y' : 'metai_metÅ³_metus',
    'yy': 'metai_metÅ³_metus'
};
function translateSeconds(number, withoutSuffix, key, isFuture) {
    if (withoutSuffix) {
        return 'kelios sekundÄs';
    } else {
        return isFuture ? 'keliÅ³ sekundÅ¾iÅ³' : 'kelias sekundes';
    }
}
function translateSingular(number, withoutSuffix, key, isFuture) {
    return withoutSuffix ? forms(key)[0] : (isFuture ? forms(key)[1] : forms(key)[2]);
}
function special(number) {
    return number % 10 === 0 || (number > 10 && number < 20);
}
function forms(key) {
    return units[key].split('_');
}
function translate$6(number, withoutSuffix, key, isFuture) {
    var result = number + ' ';
    if (number === 1) {
        return result + translateSingular(number, withoutSuffix, key[0], isFuture);
    } else if (withoutSuffix) {
        return result + (special(number) ? forms(key)[1] : forms(key)[0]);
    } else {
        if (isFuture) {
            return result + forms(key)[1];
        } else {
            return result + (special(number) ? forms(key)[1] : forms(key)[2]);
        }
    }
}
hooks.defineLocale('lt', {
    months : {
        format: 'sausio_vasario_kovo_balandÅ¾io_geguÅ¾Äs_birÅ¾elio_liepos_rugpjÅ«Äio_rugsÄjo_spalio_lapkriÄio_gruodÅ¾io'.split('_'),
        standalone: 'sausis_vasaris_kovas_balandis_geguÅ¾Ä_birÅ¾elis_liepa_rugpjÅ«tis_rugsÄjis_spalis_lapkritis_gruodis'.split('_'),
        isFormat: /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/
    },
    monthsShort : 'sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd'.split('_'),
    weekdays : {
        format: 'sekmadienÄ¯_pirmadienÄ¯_antradienÄ¯_treÄiadienÄ¯_ketvirtadienÄ¯_penktadienÄ¯_Å¡eÅ¡tadienÄ¯'.split('_'),
        standalone: 'sekmadienis_pirmadienis_antradienis_treÄiadienis_ketvirtadienis_penktadienis_Å¡eÅ¡tadienis'.split('_'),
        isFormat: /dddd HH:mm/
    },
    weekdaysShort : 'Sek_Pir_Ant_Tre_Ket_Pen_Å eÅ¡'.split('_'),
    weekdaysMin : 'S_P_A_T_K_Pn_Å '.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'YYYY-MM-DD',
        LL : 'YYYY [m.] MMMM D [d.]',
        LLL : 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
        LLLL : 'YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]',
        l : 'YYYY-MM-DD',
        ll : 'YYYY [m.] MMMM D [d.]',
        lll : 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
        llll : 'YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]'
    },
    calendar : {
        sameDay : '[Å iandien] LT',
        nextDay : '[Rytoj] LT',
        nextWeek : 'dddd LT',
        lastDay : '[Vakar] LT',
        lastWeek : '[PraÄjusÄ¯] dddd LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'po %s',
        past : 'prieÅ¡ %s',
        s : translateSeconds,
        m : translateSingular,
        mm : translate$6,
        h : translateSingular,
        hh : translate$6,
        d : translateSingular,
        dd : translate$6,
        M : translateSingular,
        MM : translate$6,
        y : translateSingular,
        yy : translate$6
    },
    ordinalParse: /\d{1,2}-oji/,
    ordinal : function (number) {
        return number + '-oji';
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Latvian [lv]
//! author : Kristaps Karlsons : https://github.com/skakri
//! author : JÄnis Elmeris : https://github.com/JanisE

var units$1 = {
    'm': 'minÅ«tes_minÅ«tÄm_minÅ«te_minÅ«tes'.split('_'),
    'mm': 'minÅ«tes_minÅ«tÄm_minÅ«te_minÅ«tes'.split('_'),
    'h': 'stundas_stundÄm_stunda_stundas'.split('_'),
    'hh': 'stundas_stundÄm_stunda_stundas'.split('_'),
    'd': 'dienas_dienÄm_diena_dienas'.split('_'),
    'dd': 'dienas_dienÄm_diena_dienas'.split('_'),
    'M': 'mÄneÅ¡a_mÄneÅ¡iem_mÄnesis_mÄneÅ¡i'.split('_'),
    'MM': 'mÄneÅ¡a_mÄneÅ¡iem_mÄnesis_mÄneÅ¡i'.split('_'),
    'y': 'gada_gadiem_gads_gadi'.split('_'),
    'yy': 'gada_gadiem_gads_gadi'.split('_')
};
/**
 * @param withoutSuffix boolean true = a length of time; false = before/after a period of time.
 */
function format$1(forms, number, withoutSuffix) {
    if (withoutSuffix) {
        // E.g. "21 minÅ«te", "3 minÅ«tes".
        return number % 10 === 1 && number % 100 !== 11 ? forms[2] : forms[3];
    } else {
        // E.g. "21 minÅ«tes" as in "pÄc 21 minÅ«tes".
        // E.g. "3 minÅ«tÄm" as in "pÄc 3 minÅ«tÄm".
        return number % 10 === 1 && number % 100 !== 11 ? forms[0] : forms[1];
    }
}
function relativeTimeWithPlural$1(number, withoutSuffix, key) {
    return number + ' ' + format$1(units$1[key], number, withoutSuffix);
}
function relativeTimeWithSingular(number, withoutSuffix, key) {
    return format$1(units$1[key], number, withoutSuffix);
}
function relativeSeconds(number, withoutSuffix) {
    return withoutSuffix ? 'daÅ¾as sekundes' : 'daÅ¾Äm sekundÄm';
}

hooks.defineLocale('lv', {
    months : 'janvÄris_februÄris_marts_aprÄ«lis_maijs_jÅ«nijs_jÅ«lijs_augusts_septembris_oktobris_novembris_decembris'.split('_'),
    monthsShort : 'jan_feb_mar_apr_mai_jÅ«n_jÅ«l_aug_sep_okt_nov_dec'.split('_'),
    weekdays : 'svÄtdiena_pirmdiena_otrdiena_treÅ¡diena_ceturtdiena_piektdiena_sestdiena'.split('_'),
    weekdaysShort : 'Sv_P_O_T_C_Pk_S'.split('_'),
    weekdaysMin : 'Sv_P_O_T_C_Pk_S'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY.',
        LL : 'YYYY. [gada] D. MMMM',
        LLL : 'YYYY. [gada] D. MMMM, HH:mm',
        LLLL : 'YYYY. [gada] D. MMMM, dddd, HH:mm'
    },
    calendar : {
        sameDay : '[Å odien pulksten] LT',
        nextDay : '[RÄ«t pulksten] LT',
        nextWeek : 'dddd [pulksten] LT',
        lastDay : '[Vakar pulksten] LT',
        lastWeek : '[PagÄjuÅ¡Ä] dddd [pulksten] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'pÄc %s',
        past : 'pirms %s',
        s : relativeSeconds,
        m : relativeTimeWithSingular,
        mm : relativeTimeWithPlural$1,
        h : relativeTimeWithSingular,
        hh : relativeTimeWithPlural$1,
        d : relativeTimeWithSingular,
        dd : relativeTimeWithPlural$1,
        M : relativeTimeWithSingular,
        MM : relativeTimeWithPlural$1,
        y : relativeTimeWithSingular,
        yy : relativeTimeWithPlural$1
    },
    ordinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Montenegrin [me]
//! author : Miodrag NikaÄ <miodrag@restartit.me> : https://github.com/miodragnikac

var translator = {
    words: { //Different grammatical cases
        m: ['jedan minut', 'jednog minuta'],
        mm: ['minut', 'minuta', 'minuta'],
        h: ['jedan sat', 'jednog sata'],
        hh: ['sat', 'sata', 'sati'],
        dd: ['dan', 'dana', 'dana'],
        MM: ['mjesec', 'mjeseca', 'mjeseci'],
        yy: ['godina', 'godine', 'godina']
    },
    correctGrammaticalCase: function (number, wordKey) {
        return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
    },
    translate: function (number, withoutSuffix, key) {
        var wordKey = translator.words[key];
        if (key.length === 1) {
            return withoutSuffix ? wordKey[0] : wordKey[1];
        } else {
            return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
        }
    }
};

hooks.defineLocale('me', {
    months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split('_'),
    monthsShort: 'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
    monthsParseExact : true,
    weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_Äetvrtak_petak_subota'.split('_'),
    weekdaysShort: 'ned._pon._uto._sri._Äet._pet._sub.'.split('_'),
    weekdaysMin: 'ne_po_ut_sr_Äe_pe_su'.split('_'),
    weekdaysParseExact : true,
    longDateFormat: {
        LT: 'H:mm',
        LTS : 'H:mm:ss',
        L: 'DD.MM.YYYY',
        LL: 'D. MMMM YYYY',
        LLL: 'D. MMMM YYYY H:mm',
        LLLL: 'dddd, D. MMMM YYYY H:mm'
    },
    calendar: {
        sameDay: '[danas u] LT',
        nextDay: '[sjutra u] LT',

        nextWeek: function () {
            switch (this.day()) {
                case 0:
                    return '[u] [nedjelju] [u] LT';
                case 3:
                    return '[u] [srijedu] [u] LT';
                case 6:
                    return '[u] [subotu] [u] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[u] dddd [u] LT';
            }
        },
        lastDay  : '[juÄe u] LT',
        lastWeek : function () {
            var lastWeekDays = [
                '[proÅ¡le] [nedjelje] [u] LT',
                '[proÅ¡log] [ponedjeljka] [u] LT',
                '[proÅ¡log] [utorka] [u] LT',
                '[proÅ¡le] [srijede] [u] LT',
                '[proÅ¡log] [Äetvrtka] [u] LT',
                '[proÅ¡log] [petka] [u] LT',
                '[proÅ¡le] [subote] [u] LT'
            ];
            return lastWeekDays[this.day()];
        },
        sameElse : 'L'
    },
    relativeTime : {
        future : 'za %s',
        past   : 'prije %s',
        s      : 'nekoliko sekundi',
        m      : translator.translate,
        mm     : translator.translate,
        h      : translator.translate,
        hh     : translator.translate,
        d      : 'dan',
        dd     : translator.translate,
        M      : 'mjesec',
        MM     : translator.translate,
        y      : 'godinu',
        yy     : translator.translate
    },
    ordinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Maori [mi]
//! author : John Corrigan <robbiecloset@gmail.com> : https://github.com/johnideal

hooks.defineLocale('mi', {
    months: 'Kohi-tÄte_Hui-tanguru_PoutÅ«-te-rangi_Paenga-whÄwhÄ_Haratua_Pipiri_HÅngoingoi_Here-turi-kÅkÄ_Mahuru_Whiringa-Ä-nuku_Whiringa-Ä-rangi_Hakihea'.split('_'),
    monthsShort: 'Kohi_Hui_Pou_Pae_Hara_Pipi_HÅngoi_Here_Mahu_Whi-nu_Whi-ra_Haki'.split('_'),
    monthsRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
    monthsStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
    monthsShortRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
    monthsShortStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,
    weekdays: 'RÄtapu_Mane_TÅ«rei_Wenerei_TÄite_Paraire_HÄtarei'.split('_'),
    weekdaysShort: 'Ta_Ma_TÅ«_We_TÄi_Pa_HÄ'.split('_'),
    weekdaysMin: 'Ta_Ma_TÅ«_We_TÄi_Pa_HÄ'.split('_'),
    longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY [i] HH:mm',
        LLLL: 'dddd, D MMMM YYYY [i] HH:mm'
    },
    calendar: {
        sameDay: '[i teie mahana, i] LT',
        nextDay: '[apopo i] LT',
        nextWeek: 'dddd [i] LT',
        lastDay: '[inanahi i] LT',
        lastWeek: 'dddd [whakamutunga i] LT',
        sameElse: 'L'
    },
    relativeTime: {
        future: 'i roto i %s',
        past: '%s i mua',
        s: 'te hÄkona ruarua',
        m: 'he meneti',
        mm: '%d meneti',
        h: 'te haora',
        hh: '%d haora',
        d: 'he ra',
        dd: '%d ra',
        M: 'he marama',
        MM: '%d marama',
        y: 'he tau',
        yy: '%d tau'
    },
    ordinalParse: /\d{1,2}Âº/,
    ordinal: '%dÂº',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Macedonian [mk]
//! author : Borislav Mickov : https://github.com/B0k0

hooks.defineLocale('mk', {
    months : 'ÑÐ°Ð½ÑÐ°ÑÐ¸_ÑÐµÐ²ÑÑÐ°ÑÐ¸_Ð¼Ð°ÑÑ_Ð°Ð¿ÑÐ¸Ð»_Ð¼Ð°Ñ_ÑÑÐ½Ð¸_ÑÑÐ»Ð¸_Ð°Ð²Ð³ÑÑÑ_ÑÐµÐ¿ÑÐµÐ¼Ð²ÑÐ¸_Ð¾ÐºÑÐ¾Ð¼Ð²ÑÐ¸_Ð½Ð¾ÐµÐ¼Ð²ÑÐ¸_Ð´ÐµÐºÐµÐ¼Ð²ÑÐ¸'.split('_'),
    monthsShort : 'ÑÐ°Ð½_ÑÐµÐ²_Ð¼Ð°Ñ_Ð°Ð¿Ñ_Ð¼Ð°Ñ_ÑÑÐ½_ÑÑÐ»_Ð°Ð²Ð³_ÑÐµÐ¿_Ð¾ÐºÑ_Ð½Ð¾Ðµ_Ð´ÐµÐº'.split('_'),
    weekdays : 'Ð½ÐµÐ´ÐµÐ»Ð°_Ð¿Ð¾Ð½ÐµÐ´ÐµÐ»Ð½Ð¸Ðº_Ð²ÑÐ¾ÑÐ½Ð¸Ðº_ÑÑÐµÐ´Ð°_ÑÐµÑÐ²ÑÑÐ¾Ðº_Ð¿ÐµÑÐ¾Ðº_ÑÐ°Ð±Ð¾ÑÐ°'.split('_'),
    weekdaysShort : 'Ð½ÐµÐ´_Ð¿Ð¾Ð½_Ð²ÑÐ¾_ÑÑÐµ_ÑÐµÑ_Ð¿ÐµÑ_ÑÐ°Ð±'.split('_'),
    weekdaysMin : 'Ð½e_Ð¿o_Ð²Ñ_ÑÑ_ÑÐµ_Ð¿Ðµ_Ña'.split('_'),
    longDateFormat : {
        LT : 'H:mm',
        LTS : 'H:mm:ss',
        L : 'D.MM.YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY H:mm',
        LLLL : 'dddd, D MMMM YYYY H:mm'
    },
    calendar : {
        sameDay : '[ÐÐµÐ½ÐµÑ Ð²Ð¾] LT',
        nextDay : '[Ð£ÑÑÐµ Ð²Ð¾] LT',
        nextWeek : '[ÐÐ¾] dddd [Ð²Ð¾] LT',
        lastDay : '[ÐÑÐµÑÐ° Ð²Ð¾] LT',
        lastWeek : function () {
            switch (this.day()) {
                case 0:
                case 3:
                case 6:
                    return '[ÐÐ·Ð¼Ð¸Ð½Ð°ÑÐ°ÑÐ°] dddd [Ð²Ð¾] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[ÐÐ·Ð¼Ð¸Ð½Ð°ÑÐ¸Ð¾Ñ] dddd [Ð²Ð¾] LT';
            }
        },
        sameElse : 'L'
    },
    relativeTime : {
        future : 'Ð¿Ð¾ÑÐ»Ðµ %s',
        past : 'Ð¿ÑÐµÐ´ %s',
        s : 'Ð½ÐµÐºÐ¾Ð»ÐºÑ ÑÐµÐºÑÐ½Ð´Ð¸',
        m : 'Ð¼Ð¸Ð½ÑÑÐ°',
        mm : '%d Ð¼Ð¸Ð½ÑÑÐ¸',
        h : 'ÑÐ°Ñ',
        hh : '%d ÑÐ°ÑÐ°',
        d : 'Ð´ÐµÐ½',
        dd : '%d Ð´ÐµÐ½Ð°',
        M : 'Ð¼ÐµÑÐµÑ',
        MM : '%d Ð¼ÐµÑÐµÑÐ¸',
        y : 'Ð³Ð¾Ð´Ð¸Ð½Ð°',
        yy : '%d Ð³Ð¾Ð´Ð¸Ð½Ð¸'
    },
    ordinalParse: /\d{1,2}-(ÐµÐ²|ÐµÐ½|ÑÐ¸|Ð²Ð¸|ÑÐ¸|Ð¼Ð¸)/,
    ordinal : function (number) {
        var lastDigit = number % 10,
            last2Digits = number % 100;
        if (number === 0) {
            return number + '-ÐµÐ²';
        } else if (last2Digits === 0) {
            return number + '-ÐµÐ½';
        } else if (last2Digits > 10 && last2Digits < 20) {
            return number + '-ÑÐ¸';
        } else if (lastDigit === 1) {
            return number + '-Ð²Ð¸';
        } else if (lastDigit === 2) {
            return number + '-ÑÐ¸';
        } else if (lastDigit === 7 || lastDigit === 8) {
            return number + '-Ð¼Ð¸';
        } else {
            return number + '-ÑÐ¸';
        }
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Malayalam [ml]
//! author : Floyd Pink : https://github.com/floydpink

hooks.defineLocale('ml', {
    months : 'à´à´¨àµà´µà´°à´¿_à´«àµà´¬àµà´°àµà´µà´°à´¿_à´®à´¾àµ¼à´àµà´àµ_à´à´ªàµà´°à´¿àµ½_à´®àµà´¯àµ_à´àµàµº_à´àµà´²àµ_à´à´à´¸àµà´±àµà´±àµ_à´¸àµà´ªàµà´±àµà´±à´à´¬àµ¼_à´à´àµà´àµà´¬àµ¼_à´¨à´µà´à´¬àµ¼_à´¡à´¿à´¸à´à´¬àµ¼'.split('_'),
    monthsShort : 'à´à´¨àµ._à´«àµà´¬àµà´°àµ._à´®à´¾àµ¼._à´à´ªàµà´°à´¿._à´®àµà´¯àµ_à´àµàµº_à´àµà´²àµ._à´à´._à´¸àµà´ªàµà´±àµà´±._à´à´àµà´àµ._à´¨à´µà´._à´¡à´¿à´¸à´.'.split('_'),
    monthsParseExact : true,
    weekdays : 'à´à´¾à´¯à´±à´¾à´´àµà´_à´¤à´¿à´àµà´à´³à´¾à´´àµà´_à´àµà´µàµà´µà´¾à´´àµà´_à´¬àµà´§à´¨à´¾à´´àµà´_à´µàµà´¯à´¾à´´à´¾à´´àµà´_à´µàµà´³àµà´³à´¿à´¯à´¾à´´àµà´_à´¶à´¨à´¿à´¯à´¾à´´àµà´'.split('_'),
    weekdaysShort : 'à´à´¾à´¯àµ¼_à´¤à´¿à´àµà´àµ¾_à´àµà´µàµà´µ_à´¬àµà´§àµ»_à´µàµà´¯à´¾à´´à´_à´µàµà´³àµà´³à´¿_à´¶à´¨à´¿'.split('_'),
    weekdaysMin : 'à´à´¾_à´¤à´¿_à´àµ_à´¬àµ_à´µàµà´¯à´¾_à´µàµ_à´¶'.split('_'),
    longDateFormat : {
        LT : 'A h:mm -à´¨àµ',
        LTS : 'A h:mm:ss -à´¨àµ',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY, A h:mm -à´¨àµ',
        LLLL : 'dddd, D MMMM YYYY, A h:mm -à´¨àµ'
    },
    calendar : {
        sameDay : '[à´à´¨àµà´¨àµ] LT',
        nextDay : '[à´¨à´¾à´³àµ] LT',
        nextWeek : 'dddd, LT',
        lastDay : '[à´à´¨àµà´¨à´²àµ] LT',
        lastWeek : '[à´à´´à´¿à´àµà´] dddd, LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s à´à´´à´¿à´àµà´àµ',
        past : '%s à´®àµàµ»à´ªàµ',
        s : 'à´àµ½à´ª à´¨à´¿à´®à´¿à´·à´àµà´àµ¾',
        m : 'à´à´°àµ à´®à´¿à´¨à´¿à´±àµà´±àµ',
        mm : '%d à´®à´¿à´¨à´¿à´±àµà´±àµ',
        h : 'à´à´°àµ à´®à´£à´¿à´àµà´àµàµ¼',
        hh : '%d à´®à´£à´¿à´àµà´àµàµ¼',
        d : 'à´à´°àµ à´¦à´¿à´µà´¸à´',
        dd : '%d à´¦à´¿à´µà´¸à´',
        M : 'à´à´°àµ à´®à´¾à´¸à´',
        MM : '%d à´®à´¾à´¸à´',
        y : 'à´à´°àµ à´µàµ¼à´·à´',
        yy : '%d à´µàµ¼à´·à´'
    },
    meridiemParse: /à´°à´¾à´¤àµà´°à´¿|à´°à´¾à´µà´¿à´²àµ|à´à´àµà´ à´à´´à´¿à´àµà´àµ|à´µàµà´àµà´¨àµà´¨àµà´°à´|à´°à´¾à´¤àµà´°à´¿/i,
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if ((meridiem === 'à´°à´¾à´¤àµà´°à´¿' && hour >= 4) ||
                meridiem === 'à´à´àµà´ à´à´´à´¿à´àµà´àµ' ||
                meridiem === 'à´µàµà´àµà´¨àµà´¨àµà´°à´') {
            return hour + 12;
        } else {
            return hour;
        }
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 4) {
            return 'à´°à´¾à´¤àµà´°à´¿';
        } else if (hour < 12) {
            return 'à´°à´¾à´µà´¿à´²àµ';
        } else if (hour < 17) {
            return 'à´à´àµà´ à´à´´à´¿à´àµà´àµ';
        } else if (hour < 20) {
            return 'à´µàµà´àµà´¨àµà´¨àµà´°à´';
        } else {
            return 'à´°à´¾à´¤àµà´°à´¿';
        }
    }
});

//! moment.js locale configuration
//! locale : Marathi [mr]
//! author : Harshad Kale : https://github.com/kalehv
//! author : Vivek Athalye : https://github.com/vnathalye

var symbolMap$7 = {
    '1': 'à¥§',
    '2': 'à¥¨',
    '3': 'à¥©',
    '4': 'à¥ª',
    '5': 'à¥«',
    '6': 'à¥¬',
    '7': 'à¥­',
    '8': 'à¥®',
    '9': 'à¥¯',
    '0': 'à¥¦'
};
var numberMap$6 = {
    'à¥§': '1',
    'à¥¨': '2',
    'à¥©': '3',
    'à¥ª': '4',
    'à¥«': '5',
    'à¥¬': '6',
    'à¥­': '7',
    'à¥®': '8',
    'à¥¯': '9',
    'à¥¦': '0'
};

function relativeTimeMr(number, withoutSuffix, string, isFuture)
{
    var output = '';
    if (withoutSuffix) {
        switch (string) {
            case 's': output = 'à¤à¤¾à¤¹à¥ à¤¸à¥à¤à¤à¤¦'; break;
            case 'm': output = 'à¤à¤ à¤®à¤¿à¤¨à¤¿à¤'; break;
            case 'mm': output = '%d à¤®à¤¿à¤¨à¤¿à¤à¥'; break;
            case 'h': output = 'à¤à¤ à¤¤à¤¾à¤¸'; break;
            case 'hh': output = '%d à¤¤à¤¾à¤¸'; break;
            case 'd': output = 'à¤à¤ à¤¦à¤¿à¤µà¤¸'; break;
            case 'dd': output = '%d à¤¦à¤¿à¤µà¤¸'; break;
            case 'M': output = 'à¤à¤ à¤®à¤¹à¤¿à¤¨à¤¾'; break;
            case 'MM': output = '%d à¤®à¤¹à¤¿à¤¨à¥'; break;
            case 'y': output = 'à¤à¤ à¤µà¤°à¥à¤·'; break;
            case 'yy': output = '%d à¤µà¤°à¥à¤·à¥'; break;
        }
    }
    else {
        switch (string) {
            case 's': output = 'à¤à¤¾à¤¹à¥ à¤¸à¥à¤à¤à¤¦à¤¾à¤'; break;
            case 'm': output = 'à¤à¤à¤¾ à¤®à¤¿à¤¨à¤¿à¤à¤¾'; break;
            case 'mm': output = '%d à¤®à¤¿à¤¨à¤¿à¤à¤¾à¤'; break;
            case 'h': output = 'à¤à¤à¤¾ à¤¤à¤¾à¤¸à¤¾'; break;
            case 'hh': output = '%d à¤¤à¤¾à¤¸à¤¾à¤'; break;
            case 'd': output = 'à¤à¤à¤¾ à¤¦à¤¿à¤µà¤¸à¤¾'; break;
            case 'dd': output = '%d à¤¦à¤¿à¤µà¤¸à¤¾à¤'; break;
            case 'M': output = 'à¤à¤à¤¾ à¤®à¤¹à¤¿à¤¨à¥à¤¯à¤¾'; break;
            case 'MM': output = '%d à¤®à¤¹à¤¿à¤¨à¥à¤¯à¤¾à¤'; break;
            case 'y': output = 'à¤à¤à¤¾ à¤µà¤°à¥à¤·à¤¾'; break;
            case 'yy': output = '%d à¤µà¤°à¥à¤·à¤¾à¤'; break;
        }
    }
    return output.replace(/%d/i, number);
}

hooks.defineLocale('mr', {
    months : 'à¤à¤¾à¤¨à¥à¤µà¤¾à¤°à¥_à¤«à¥à¤¬à¥à¤°à¥à¤µà¤¾à¤°à¥_à¤®à¤¾à¤°à¥à¤_à¤à¤ªà¥à¤°à¤¿à¤²_à¤®à¥_à¤à¥à¤¨_à¤à¥à¤²à¥_à¤à¤à¤¸à¥à¤_à¤¸à¤ªà¥à¤à¥à¤à¤¬à¤°_à¤à¤à¥à¤à¥à¤¬à¤°_à¤¨à¥à¤µà¥à¤¹à¥à¤à¤¬à¤°_à¤¡à¤¿à¤¸à¥à¤à¤¬à¤°'.split('_'),
    monthsShort: 'à¤à¤¾à¤¨à¥._à¤«à¥à¤¬à¥à¤°à¥._à¤®à¤¾à¤°à¥à¤._à¤à¤ªà¥à¤°à¤¿._à¤®à¥._à¤à¥à¤¨._à¤à¥à¤²à¥._à¤à¤._à¤¸à¤ªà¥à¤à¥à¤._à¤à¤à¥à¤à¥._à¤¨à¥à¤µà¥à¤¹à¥à¤._à¤¡à¤¿à¤¸à¥à¤.'.split('_'),
    monthsParseExact : true,
    weekdays : 'à¤°à¤µà¤¿à¤µà¤¾à¤°_à¤¸à¥à¤®à¤µà¤¾à¤°_à¤®à¤à¤à¤³à¤µà¤¾à¤°_à¤¬à¥à¤§à¤µà¤¾à¤°_à¤à¥à¤°à¥à¤µà¤¾à¤°_à¤¶à¥à¤à¥à¤°à¤µà¤¾à¤°_à¤¶à¤¨à¤¿à¤µà¤¾à¤°'.split('_'),
    weekdaysShort : 'à¤°à¤µà¤¿_à¤¸à¥à¤®_à¤®à¤à¤à¤³_à¤¬à¥à¤§_à¤à¥à¤°à¥_à¤¶à¥à¤à¥à¤°_à¤¶à¤¨à¤¿'.split('_'),
    weekdaysMin : 'à¤°_à¤¸à¥_à¤®à¤_à¤¬à¥_à¤à¥_à¤¶à¥_à¤¶'.split('_'),
    longDateFormat : {
        LT : 'A h:mm à¤µà¤¾à¤à¤¤à¤¾',
        LTS : 'A h:mm:ss à¤µà¤¾à¤à¤¤à¤¾',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY, A h:mm à¤µà¤¾à¤à¤¤à¤¾',
        LLLL : 'dddd, D MMMM YYYY, A h:mm à¤µà¤¾à¤à¤¤à¤¾'
    },
    calendar : {
        sameDay : '[à¤à¤] LT',
        nextDay : '[à¤à¤¦à¥à¤¯à¤¾] LT',
        nextWeek : 'dddd, LT',
        lastDay : '[à¤à¤¾à¤²] LT',
        lastWeek: '[à¤®à¤¾à¤à¥à¤²] dddd, LT',
        sameElse : 'L'
    },
    relativeTime : {
        future: '%sà¤®à¤§à¥à¤¯à¥',
        past: '%sà¤ªà¥à¤°à¥à¤µà¥',
        s: relativeTimeMr,
        m: relativeTimeMr,
        mm: relativeTimeMr,
        h: relativeTimeMr,
        hh: relativeTimeMr,
        d: relativeTimeMr,
        dd: relativeTimeMr,
        M: relativeTimeMr,
        MM: relativeTimeMr,
        y: relativeTimeMr,
        yy: relativeTimeMr
    },
    preparse: function (string) {
        return string.replace(/[à¥§à¥¨à¥©à¥ªà¥«à¥¬à¥­à¥®à¥¯à¥¦]/g, function (match) {
            return numberMap$6[match];
        });
    },
    postformat: function (string) {
        return string.replace(/\d/g, function (match) {
            return symbolMap$7[match];
        });
    },
    meridiemParse: /à¤°à¤¾à¤¤à¥à¤°à¥|à¤¸à¤à¤¾à¤³à¥|à¤¦à¥à¤ªà¤¾à¤°à¥|à¤¸à¤¾à¤¯à¤à¤à¤¾à¤³à¥/,
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === 'à¤°à¤¾à¤¤à¥à¤°à¥') {
            return hour < 4 ? hour : hour + 12;
        } else if (meridiem === 'à¤¸à¤à¤¾à¤³à¥') {
            return hour;
        } else if (meridiem === 'à¤¦à¥à¤ªà¤¾à¤°à¥') {
            return hour >= 10 ? hour : hour + 12;
        } else if (meridiem === 'à¤¸à¤¾à¤¯à¤à¤à¤¾à¤³à¥') {
            return hour + 12;
        }
    },
    meridiem: function (hour, minute, isLower) {
        if (hour < 4) {
            return 'à¤°à¤¾à¤¤à¥à¤°à¥';
        } else if (hour < 10) {
            return 'à¤¸à¤à¤¾à¤³à¥';
        } else if (hour < 17) {
            return 'à¤¦à¥à¤ªà¤¾à¤°à¥';
        } else if (hour < 20) {
            return 'à¤¸à¤¾à¤¯à¤à¤à¤¾à¤³à¥';
        } else {
            return 'à¤°à¤¾à¤¤à¥à¤°à¥';
        }
    },
    week : {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 1st is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Malay [ms-my]
//! note : DEPRECATED, the correct one is [ms]
//! author : Weldan Jamili : https://github.com/weldan

hooks.defineLocale('ms-my', {
    months : 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
    monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
    weekdays : 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
    weekdaysShort : 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
    weekdaysMin : 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
    longDateFormat : {
        LT : 'HH.mm',
        LTS : 'HH.mm.ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY [pukul] HH.mm',
        LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
    },
    meridiemParse: /pagi|tengahari|petang|malam/,
    meridiemHour: function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === 'pagi') {
            return hour;
        } else if (meridiem === 'tengahari') {
            return hour >= 11 ? hour : hour + 12;
        } else if (meridiem === 'petang' || meridiem === 'malam') {
            return hour + 12;
        }
    },
    meridiem : function (hours, minutes, isLower) {
        if (hours < 11) {
            return 'pagi';
        } else if (hours < 15) {
            return 'tengahari';
        } else if (hours < 19) {
            return 'petang';
        } else {
            return 'malam';
        }
    },
    calendar : {
        sameDay : '[Hari ini pukul] LT',
        nextDay : '[Esok pukul] LT',
        nextWeek : 'dddd [pukul] LT',
        lastDay : '[Kelmarin pukul] LT',
        lastWeek : 'dddd [lepas pukul] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'dalam %s',
        past : '%s yang lepas',
        s : 'beberapa saat',
        m : 'seminit',
        mm : '%d minit',
        h : 'sejam',
        hh : '%d jam',
        d : 'sehari',
        dd : '%d hari',
        M : 'sebulan',
        MM : '%d bulan',
        y : 'setahun',
        yy : '%d tahun'
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Malay [ms]
//! author : Weldan Jamili : https://github.com/weldan

hooks.defineLocale('ms', {
    months : 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
    monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
    weekdays : 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
    weekdaysShort : 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
    weekdaysMin : 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
    longDateFormat : {
        LT : 'HH.mm',
        LTS : 'HH.mm.ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY [pukul] HH.mm',
        LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
    },
    meridiemParse: /pagi|tengahari|petang|malam/,
    meridiemHour: function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === 'pagi') {
            return hour;
        } else if (meridiem === 'tengahari') {
            return hour >= 11 ? hour : hour + 12;
        } else if (meridiem === 'petang' || meridiem === 'malam') {
            return hour + 12;
        }
    },
    meridiem : function (hours, minutes, isLower) {
        if (hours < 11) {
            return 'pagi';
        } else if (hours < 15) {
            return 'tengahari';
        } else if (hours < 19) {
            return 'petang';
        } else {
            return 'malam';
        }
    },
    calendar : {
        sameDay : '[Hari ini pukul] LT',
        nextDay : '[Esok pukul] LT',
        nextWeek : 'dddd [pukul] LT',
        lastDay : '[Kelmarin pukul] LT',
        lastWeek : 'dddd [lepas pukul] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'dalam %s',
        past : '%s yang lepas',
        s : 'beberapa saat',
        m : 'seminit',
        mm : '%d minit',
        h : 'sejam',
        hh : '%d jam',
        d : 'sehari',
        dd : '%d hari',
        M : 'sebulan',
        MM : '%d bulan',
        y : 'setahun',
        yy : '%d tahun'
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Burmese [my]
//! author : Squar team, mysquar.com
//! author : David Rossellat : https://github.com/gholadr
//! author : Tin Aung Lin : https://github.com/thanyawzinmin

var symbolMap$8 = {
    '1': 'á',
    '2': 'á',
    '3': 'á',
    '4': 'á',
    '5': 'á',
    '6': 'á',
    '7': 'á',
    '8': 'á',
    '9': 'á',
    '0': 'á'
};
var numberMap$7 = {
    'á': '1',
    'á': '2',
    'á': '3',
    'á': '4',
    'á': '5',
    'á': '6',
    'á': '7',
    'á': '8',
    'á': '9',
    'á': '0'
};

hooks.defineLocale('my', {
    months: 'áááºááá«áá®_áá±áá±á¬áºáá«áá®_áááº_á§áá¼á®_áá±_áá½ááº_áá°áá­á¯ááº_áá¼áá¯ááº_áááºáááºáá¬_á¡á±á¬ááºáá­á¯áá¬_áá­á¯áááºáá¬_áá®áááºáá¬'.split('_'),
    monthsShort: 'áááº_áá±_áááº_áá¼á®_áá±_áá½ááº_áá­á¯ááº_áá¼_áááº_á¡á±á¬ááº_áá­á¯_áá®'.split('_'),
    weekdays: 'ááááºá¹ááá½á±_ááááºá¹áá¬_á¡ááºá¹áá«_áá¯áá¹ááá°á¸_áá¼á¬áááá±á¸_áá±á¬áá¼á¬_ááá±'.split('_'),
    weekdaysShort: 'áá½á±_áá¬_áá«_áá°á¸_áá¼á¬_áá±á¬_áá±'.split('_'),
    weekdaysMin: 'áá½á±_áá¬_áá«_áá°á¸_áá¼á¬_áá±á¬_áá±'.split('_'),

    longDateFormat: {
        LT: 'HH:mm',
        LTS: 'HH:mm:ss',
        L: 'DD/MM/YYYY',
        LL: 'D MMMM YYYY',
        LLL: 'D MMMM YYYY HH:mm',
        LLLL: 'dddd D MMMM YYYY HH:mm'
    },
    calendar: {
        sameDay: '[ááá±.] LT [áá¾á¬]',
        nextDay: '[ááááºáá¼ááº] LT [áá¾á¬]',
        nextWeek: 'dddd LT [áá¾á¬]',
        lastDay: '[ááá±.á] LT [áá¾á¬]',
        lastWeek: '[áá¼á®á¸áá²á·áá±á¬] dddd LT [áá¾á¬]',
        sameElse: 'L'
    },
    relativeTime: {
        future: 'áá¬áááºá· %s áá¾á¬',
        past: 'áá½ááºáá²á·áá±á¬ %s á',
        s: 'ááá¹áááº.á¡áááºá¸áááº',
        m: 'áááºáá­áááº',
        mm: '%d áá­áááº',
        h: 'áááºáá¬áá®',
        hh: '%d áá¬áá®',
        d: 'áááºáááº',
        dd: '%d áááº',
        M: 'áááºá',
        MM: '%d á',
        y: 'áááºáá¾ááº',
        yy: '%d áá¾ááº'
    },
    preparse: function (string) {
        return string.replace(/[áááááááááá]/g, function (match) {
            return numberMap$7[match];
        });
    },
    postformat: function (string) {
        return string.replace(/\d/g, function (match) {
            return symbolMap$8[match];
        });
    },
    week: {
        dow: 1, // Monday is the first day of the week.
        doy: 4 // The week that contains Jan 1st is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Norwegian BokmÃ¥l [nb]
//! authors : Espen Hovlandsdal : https://github.com/rexxars
//!           Sigurd Gartmann : https://github.com/sigurdga

hooks.defineLocale('nb', {
    months : 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
    monthsShort : 'jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.'.split('_'),
    monthsParseExact : true,
    weekdays : 'sÃ¸ndag_mandag_tirsdag_onsdag_torsdag_fredag_lÃ¸rdag'.split('_'),
    weekdaysShort : 'sÃ¸._ma._ti._on._to._fr._lÃ¸.'.split('_'),
    weekdaysMin : 'sÃ¸_ma_ti_on_to_fr_lÃ¸'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D. MMMM YYYY',
        LLL : 'D. MMMM YYYY [kl.] HH:mm',
        LLLL : 'dddd D. MMMM YYYY [kl.] HH:mm'
    },
    calendar : {
        sameDay: '[i dag kl.] LT',
        nextDay: '[i morgen kl.] LT',
        nextWeek: 'dddd [kl.] LT',
        lastDay: '[i gÃ¥r kl.] LT',
        lastWeek: '[forrige] dddd [kl.] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'om %s',
        past : '%s siden',
        s : 'noen sekunder',
        m : 'ett minutt',
        mm : '%d minutter',
        h : 'en time',
        hh : '%d timer',
        d : 'en dag',
        dd : '%d dager',
        M : 'en mÃ¥ned',
        MM : '%d mÃ¥neder',
        y : 'ett Ã¥r',
        yy : '%d Ã¥r'
    },
    ordinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Nepalese [ne]
//! author : suvash : https://github.com/suvash

var symbolMap$9 = {
    '1': 'à¥§',
    '2': 'à¥¨',
    '3': 'à¥©',
    '4': 'à¥ª',
    '5': 'à¥«',
    '6': 'à¥¬',
    '7': 'à¥­',
    '8': 'à¥®',
    '9': 'à¥¯',
    '0': 'à¥¦'
};
var numberMap$8 = {
    'à¥§': '1',
    'à¥¨': '2',
    'à¥©': '3',
    'à¥ª': '4',
    'à¥«': '5',
    'à¥¬': '6',
    'à¥­': '7',
    'à¥®': '8',
    'à¥¯': '9',
    'à¥¦': '0'
};

hooks.defineLocale('ne', {
    months : 'à¤à¤¨à¤µà¤°à¥_à¤«à¥à¤¬à¥à¤°à¥à¤µà¤°à¥_à¤®à¤¾à¤°à¥à¤_à¤à¤ªà¥à¤°à¤¿à¤²_à¤®à¤_à¤à¥à¤¨_à¤à¥à¤²à¤¾à¤_à¤à¤à¤·à¥à¤_à¤¸à¥à¤ªà¥à¤à¥à¤®à¥à¤¬à¤°_à¤à¤à¥à¤à¥à¤¬à¤°_à¤¨à¥à¤­à¥à¤®à¥à¤¬à¤°_à¤¡à¤¿à¤¸à¥à¤®à¥à¤¬à¤°'.split('_'),
    monthsShort : 'à¤à¤¨._à¤«à¥à¤¬à¥à¤°à¥._à¤®à¤¾à¤°à¥à¤_à¤à¤ªà¥à¤°à¤¿._à¤®à¤_à¤à¥à¤¨_à¤à¥à¤²à¤¾à¤._à¤à¤._à¤¸à¥à¤ªà¥à¤._à¤à¤à¥à¤à¥._à¤¨à¥à¤­à¥._à¤¡à¤¿à¤¸à¥.'.split('_'),
    monthsParseExact : true,
    weekdays : 'à¤à¤à¤¤à¤¬à¤¾à¤°_à¤¸à¥à¤®à¤¬à¤¾à¤°_à¤®à¤à¥à¤à¤²à¤¬à¤¾à¤°_à¤¬à¥à¤§à¤¬à¤¾à¤°_à¤¬à¤¿à¤¹à¤¿à¤¬à¤¾à¤°_à¤¶à¥à¤à¥à¤°à¤¬à¤¾à¤°_à¤¶à¤¨à¤¿à¤¬à¤¾à¤°'.split('_'),
    weekdaysShort : 'à¤à¤à¤¤._à¤¸à¥à¤®._à¤®à¤à¥à¤à¤²._à¤¬à¥à¤§._à¤¬à¤¿à¤¹à¤¿._à¤¶à¥à¤à¥à¤°._à¤¶à¤¨à¤¿.'.split('_'),
    weekdaysMin : 'à¤._à¤¸à¥._à¤®à¤._à¤¬à¥._à¤¬à¤¿._à¤¶à¥._à¤¶.'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'Aà¤à¥ h:mm à¤¬à¤à¥',
        LTS : 'Aà¤à¥ h:mm:ss à¤¬à¤à¥',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY, Aà¤à¥ h:mm à¤¬à¤à¥',
        LLLL : 'dddd, D MMMM YYYY, Aà¤à¥ h:mm à¤¬à¤à¥'
    },
    preparse: function (string) {
        return string.replace(/[à¥§à¥¨à¥©à¥ªà¥«à¥¬à¥­à¥®à¥¯à¥¦]/g, function (match) {
            return numberMap$8[match];
        });
    },
    postformat: function (string) {
        return string.replace(/\d/g, function (match) {
            return symbolMap$9[match];
        });
    },
    meridiemParse: /à¤°à¤¾à¤¤à¤¿|à¤¬à¤¿à¤¹à¤¾à¤¨|à¤¦à¤¿à¤à¤à¤¸à¥|à¤¸à¤¾à¤à¤/,
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === 'à¤°à¤¾à¤¤à¤¿') {
            return hour < 4 ? hour : hour + 12;
        } else if (meridiem === 'à¤¬à¤¿à¤¹à¤¾à¤¨') {
            return hour;
        } else if (meridiem === 'à¤¦à¤¿à¤à¤à¤¸à¥') {
            return hour >= 10 ? hour : hour + 12;
        } else if (meridiem === 'à¤¸à¤¾à¤à¤') {
            return hour + 12;
        }
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 3) {
            return 'à¤°à¤¾à¤¤à¤¿';
        } else if (hour < 12) {
            return 'à¤¬à¤¿à¤¹à¤¾à¤¨';
        } else if (hour < 16) {
            return 'à¤¦à¤¿à¤à¤à¤¸à¥';
        } else if (hour < 20) {
            return 'à¤¸à¤¾à¤à¤';
        } else {
            return 'à¤°à¤¾à¤¤à¤¿';
        }
    },
    calendar : {
        sameDay : '[à¤à¤] LT',
        nextDay : '[à¤­à¥à¤²à¤¿] LT',
        nextWeek : '[à¤à¤à¤à¤¦à¥] dddd[,] LT',
        lastDay : '[à¤¹à¤¿à¤à¥] LT',
        lastWeek : '[à¤à¤à¤à¥] dddd[,] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%sà¤®à¤¾',
        past : '%s à¤à¤à¤¾à¤¡à¤¿',
        s : 'à¤à¥à¤¹à¥ à¤à¥à¤·à¤£',
        m : 'à¤à¤ à¤®à¤¿à¤¨à¥à¤',
        mm : '%d à¤®à¤¿à¤¨à¥à¤',
        h : 'à¤à¤ à¤à¤£à¥à¤à¤¾',
        hh : '%d à¤à¤£à¥à¤à¤¾',
        d : 'à¤à¤ à¤¦à¤¿à¤¨',
        dd : '%d à¤¦à¤¿à¤¨',
        M : 'à¤à¤ à¤®à¤¹à¤¿à¤¨à¤¾',
        MM : '%d à¤®à¤¹à¤¿à¤¨à¤¾',
        y : 'à¤à¤ à¤¬à¤°à¥à¤·',
        yy : '%d à¤¬à¤°à¥à¤·'
    },
    week : {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 1st is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Dutch (Belgium) [nl-be]
//! author : Joris RÃ¶ling : https://github.com/jorisroling
//! author : Jacob Middag : https://github.com/middagj

var monthsShortWithDots$1 = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_');
var monthsShortWithoutDots$1 = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_');

var monthsParse = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i];
var monthsRegex$1 = /^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;

hooks.defineLocale('nl-be', {
    months : 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),
    monthsShort : function (m, format) {
        if (/-MMM-/.test(format)) {
            return monthsShortWithoutDots$1[m.month()];
        } else {
            return monthsShortWithDots$1[m.month()];
        }
    },

    monthsRegex: monthsRegex$1,
    monthsShortRegex: monthsRegex$1,
    monthsStrictRegex: /^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,
    monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,

    monthsParse : monthsParse,
    longMonthsParse : monthsParse,
    shortMonthsParse : monthsParse,

    weekdays : 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
    weekdaysShort : 'zo._ma._di._wo._do._vr._za.'.split('_'),
    weekdaysMin : 'Zo_Ma_Di_Wo_Do_Vr_Za'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[vandaag om] LT',
        nextDay: '[morgen om] LT',
        nextWeek: 'dddd [om] LT',
        lastDay: '[gisteren om] LT',
        lastWeek: '[afgelopen] dddd [om] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'over %s',
        past : '%s geleden',
        s : 'een paar seconden',
        m : 'Ã©Ã©n minuut',
        mm : '%d minuten',
        h : 'Ã©Ã©n uur',
        hh : '%d uur',
        d : 'Ã©Ã©n dag',
        dd : '%d dagen',
        M : 'Ã©Ã©n maand',
        MM : '%d maanden',
        y : 'Ã©Ã©n jaar',
        yy : '%d jaar'
    },
    ordinalParse: /\d{1,2}(ste|de)/,
    ordinal : function (number) {
        return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Dutch [nl]
//! author : Joris RÃ¶ling : https://github.com/jorisroling
//! author : Jacob Middag : https://github.com/middagj

var monthsShortWithDots$2 = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_');
var monthsShortWithoutDots$2 = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_');

var monthsParse$1 = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i];
var monthsRegex$2 = /^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;

hooks.defineLocale('nl', {
    months : 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),
    monthsShort : function (m, format) {
        if (/-MMM-/.test(format)) {
            return monthsShortWithoutDots$2[m.month()];
        } else {
            return monthsShortWithDots$2[m.month()];
        }
    },

    monthsRegex: monthsRegex$2,
    monthsShortRegex: monthsRegex$2,
    monthsStrictRegex: /^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,
    monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,

    monthsParse : monthsParse$1,
    longMonthsParse : monthsParse$1,
    shortMonthsParse : monthsParse$1,

    weekdays : 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
    weekdaysShort : 'zo._ma._di._wo._do._vr._za.'.split('_'),
    weekdaysMin : 'Zo_Ma_Di_Wo_Do_Vr_Za'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD-MM-YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[vandaag om] LT',
        nextDay: '[morgen om] LT',
        nextWeek: 'dddd [om] LT',
        lastDay: '[gisteren om] LT',
        lastWeek: '[afgelopen] dddd [om] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'over %s',
        past : '%s geleden',
        s : 'een paar seconden',
        m : 'Ã©Ã©n minuut',
        mm : '%d minuten',
        h : 'Ã©Ã©n uur',
        hh : '%d uur',
        d : 'Ã©Ã©n dag',
        dd : '%d dagen',
        M : 'Ã©Ã©n maand',
        MM : '%d maanden',
        y : 'Ã©Ã©n jaar',
        yy : '%d jaar'
    },
    ordinalParse: /\d{1,2}(ste|de)/,
    ordinal : function (number) {
        return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Nynorsk [nn]
//! author : https://github.com/mechuwind

hooks.defineLocale('nn', {
    months : 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
    monthsShort : 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
    weekdays : 'sundag_mÃ¥ndag_tysdag_onsdag_torsdag_fredag_laurdag'.split('_'),
    weekdaysShort : 'sun_mÃ¥n_tys_ons_tor_fre_lau'.split('_'),
    weekdaysMin : 'su_mÃ¥_ty_on_to_fr_lÃ¸'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D. MMMM YYYY',
        LLL : 'D. MMMM YYYY [kl.] H:mm',
        LLLL : 'dddd D. MMMM YYYY [kl.] HH:mm'
    },
    calendar : {
        sameDay: '[I dag klokka] LT',
        nextDay: '[I morgon klokka] LT',
        nextWeek: 'dddd [klokka] LT',
        lastDay: '[I gÃ¥r klokka] LT',
        lastWeek: '[FÃ¸regÃ¥ande] dddd [klokka] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'om %s',
        past : '%s sidan',
        s : 'nokre sekund',
        m : 'eit minutt',
        mm : '%d minutt',
        h : 'ein time',
        hh : '%d timar',
        d : 'ein dag',
        dd : '%d dagar',
        M : 'ein mÃ¥nad',
        MM : '%d mÃ¥nader',
        y : 'eit Ã¥r',
        yy : '%d Ã¥r'
    },
    ordinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Punjabi (India) [pa-in]
//! author : Harpreet Singh : https://github.com/harpreetkhalsagtbit

var symbolMap$10 = {
    '1': 'à©§',
    '2': 'à©¨',
    '3': 'à©©',
    '4': 'à©ª',
    '5': 'à©«',
    '6': 'à©¬',
    '7': 'à©­',
    '8': 'à©®',
    '9': 'à©¯',
    '0': 'à©¦'
};
var numberMap$9 = {
    'à©§': '1',
    'à©¨': '2',
    'à©©': '3',
    'à©ª': '4',
    'à©«': '5',
    'à©¬': '6',
    'à©­': '7',
    'à©®': '8',
    'à©¯': '9',
    'à©¦': '0'
};

hooks.defineLocale('pa-in', {
    // There are months name as per Nanakshahi Calender but they are not used as rigidly in modern Punjabi.
    months : 'à¨à¨¨à¨µà¨°à©_à¨«à¨¼à¨°à¨µà¨°à©_à¨®à¨¾à¨°à¨_à¨à¨ªà©à¨°à©à¨²_à¨®à¨_à¨à©à¨¨_à¨à©à¨²à¨¾à¨_à¨à¨à¨¸à¨¤_à¨¸à¨¤à©°à¨¬à¨°_à¨à¨à¨¤à©à¨¬à¨°_à¨¨à¨µà©°à¨¬à¨°_à¨¦à¨¸à©°à¨¬à¨°'.split('_'),
    monthsShort : 'à¨à¨¨à¨µà¨°à©_à¨«à¨¼à¨°à¨µà¨°à©_à¨®à¨¾à¨°à¨_à¨à¨ªà©à¨°à©à¨²_à¨®à¨_à¨à©à¨¨_à¨à©à¨²à¨¾à¨_à¨à¨à¨¸à¨¤_à¨¸à¨¤à©°à¨¬à¨°_à¨à¨à¨¤à©à¨¬à¨°_à¨¨à¨µà©°à¨¬à¨°_à¨¦à¨¸à©°à¨¬à¨°'.split('_'),
    weekdays : 'à¨à¨¤à¨µà¨¾à¨°_à¨¸à©à¨®à¨µà¨¾à¨°_à¨®à©°à¨à¨²à¨µà¨¾à¨°_à¨¬à©à¨§à¨µà¨¾à¨°_à¨µà©à¨°à¨µà¨¾à¨°_à¨¸à¨¼à©à©±à¨à¨°à¨µà¨¾à¨°_à¨¸à¨¼à¨¨à©à¨à¨°à¨µà¨¾à¨°'.split('_'),
    weekdaysShort : 'à¨à¨¤_à¨¸à©à¨®_à¨®à©°à¨à¨²_à¨¬à©à¨§_à¨µà©à¨°_à¨¸à¨¼à©à¨à¨°_à¨¸à¨¼à¨¨à©'.split('_'),
    weekdaysMin : 'à¨à¨¤_à¨¸à©à¨®_à¨®à©°à¨à¨²_à¨¬à©à¨§_à¨µà©à¨°_à¨¸à¨¼à©à¨à¨°_à¨¸à¨¼à¨¨à©'.split('_'),
    longDateFormat : {
        LT : 'A h:mm à¨µà¨à©',
        LTS : 'A h:mm:ss à¨µà¨à©',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY, A h:mm à¨µà¨à©',
        LLLL : 'dddd, D MMMM YYYY, A h:mm à¨µà¨à©'
    },
    calendar : {
        sameDay : '[à¨à¨] LT',
        nextDay : '[à¨à¨²] LT',
        nextWeek : 'dddd, LT',
        lastDay : '[à¨à¨²] LT',
        lastWeek : '[à¨ªà¨¿à¨à¨²à©] dddd, LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s à¨µà¨¿à©±à¨',
        past : '%s à¨ªà¨¿à¨à¨²à©',
        s : 'à¨à©à¨ à¨¸à¨à¨¿à©°à¨',
        m : 'à¨à¨ à¨®à¨¿à©°à¨',
        mm : '%d à¨®à¨¿à©°à¨',
        h : 'à¨à©±à¨ à¨à©°à¨à¨¾',
        hh : '%d à¨à©°à¨à©',
        d : 'à¨à©±à¨ à¨¦à¨¿à¨¨',
        dd : '%d à¨¦à¨¿à¨¨',
        M : 'à¨à©±à¨ à¨®à¨¹à©à¨¨à¨¾',
        MM : '%d à¨®à¨¹à©à¨¨à©',
        y : 'à¨à©±à¨ à¨¸à¨¾à¨²',
        yy : '%d à¨¸à¨¾à¨²'
    },
    preparse: function (string) {
        return string.replace(/[à©§à©¨à©©à©ªà©«à©¬à©­à©®à©¯à©¦]/g, function (match) {
            return numberMap$9[match];
        });
    },
    postformat: function (string) {
        return string.replace(/\d/g, function (match) {
            return symbolMap$10[match];
        });
    },
    // Punjabi notation for meridiems are quite fuzzy in practice. While there exists
    // a rigid notion of a 'Pahar' it is not used as rigidly in modern Punjabi.
    meridiemParse: /à¨°à¨¾à¨¤|à¨¸à¨µà©à¨°|à¨¦à©à¨ªà¨¹à¨¿à¨°|à¨¸à¨¼à¨¾à¨®/,
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === 'à¨°à¨¾à¨¤') {
            return hour < 4 ? hour : hour + 12;
        } else if (meridiem === 'à¨¸à¨µà©à¨°') {
            return hour;
        } else if (meridiem === 'à¨¦à©à¨ªà¨¹à¨¿à¨°') {
            return hour >= 10 ? hour : hour + 12;
        } else if (meridiem === 'à¨¸à¨¼à¨¾à¨®') {
            return hour + 12;
        }
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 4) {
            return 'à¨°à¨¾à¨¤';
        } else if (hour < 10) {
            return 'à¨¸à¨µà©à¨°';
        } else if (hour < 17) {
            return 'à¨¦à©à¨ªà¨¹à¨¿à¨°';
        } else if (hour < 20) {
            return 'à¨¸à¨¼à¨¾à¨®';
        } else {
            return 'à¨°à¨¾à¨¤';
        }
    },
    week : {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 1st is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Polish [pl]
//! author : Rafal Hirsz : https://github.com/evoL

var monthsNominative = 'styczeÅ_luty_marzec_kwiecieÅ_maj_czerwiec_lipiec_sierpieÅ_wrzesieÅ_paÅºdziernik_listopad_grudzieÅ'.split('_');
var monthsSubjective = 'stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_wrzeÅnia_paÅºdziernika_listopada_grudnia'.split('_');
function plural$3(n) {
    return (n % 10 < 5) && (n % 10 > 1) && ((~~(n / 10) % 10) !== 1);
}
function translate$7(number, withoutSuffix, key) {
    var result = number + ' ';
    switch (key) {
        case 'm':
            return withoutSuffix ? 'minuta' : 'minutÄ';
        case 'mm':
            return result + (plural$3(number) ? 'minuty' : 'minut');
        case 'h':
            return withoutSuffix  ? 'godzina'  : 'godzinÄ';
        case 'hh':
            return result + (plural$3(number) ? 'godziny' : 'godzin');
        case 'MM':
            return result + (plural$3(number) ? 'miesiÄce' : 'miesiÄcy');
        case 'yy':
            return result + (plural$3(number) ? 'lata' : 'lat');
    }
}

hooks.defineLocale('pl', {
    months : function (momentToFormat, format) {
        if (format === '') {
            // Hack: if format empty we know this is used to generate
            // RegExp by moment. Give then back both valid forms of months
            // in RegExp ready format.
            return '(' + monthsSubjective[momentToFormat.month()] + '|' + monthsNominative[momentToFormat.month()] + ')';
        } else if (/D MMMM/.test(format)) {
            return monthsSubjective[momentToFormat.month()];
        } else {
            return monthsNominative[momentToFormat.month()];
        }
    },
    monthsShort : 'sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paÅº_lis_gru'.split('_'),
    weekdays : 'niedziela_poniedziaÅek_wtorek_Åroda_czwartek_piÄtek_sobota'.split('_'),
    weekdaysShort : 'ndz_pon_wt_År_czw_pt_sob'.split('_'),
    weekdaysMin : 'Nd_Pn_Wt_År_Cz_Pt_So'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[DziÅ o] LT',
        nextDay: '[Jutro o] LT',
        nextWeek: '[W] dddd [o] LT',
        lastDay: '[Wczoraj o] LT',
        lastWeek: function () {
            switch (this.day()) {
                case 0:
                    return '[W zeszÅÄ niedzielÄ o] LT';
                case 3:
                    return '[W zeszÅÄ ÅrodÄ o] LT';
                case 6:
                    return '[W zeszÅÄ sobotÄ o] LT';
                default:
                    return '[W zeszÅy] dddd [o] LT';
            }
        },
        sameElse: 'L'
    },
    relativeTime : {
        future : 'za %s',
        past : '%s temu',
        s : 'kilka sekund',
        m : translate$7,
        mm : translate$7,
        h : translate$7,
        hh : translate$7,
        d : '1 dzieÅ',
        dd : '%d dni',
        M : 'miesiÄc',
        MM : translate$7,
        y : 'rok',
        yy : translate$7
    },
    ordinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Portuguese (Brazil) [pt-br]
//! author : Caio Ribeiro Pereira : https://github.com/caio-ribeiro-pereira

hooks.defineLocale('pt-br', {
    months : 'Janeiro_Fevereiro_MarÃ§o_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro'.split('_'),
    monthsShort : 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),
    weekdays : 'Domingo_Segunda-feira_TerÃ§a-feira_Quarta-feira_Quinta-feira_Sexta-feira_SÃ¡bado'.split('_'),
    weekdaysShort : 'Dom_Seg_Ter_Qua_Qui_Sex_SÃ¡b'.split('_'),
    weekdaysMin : 'Dom_2Âª_3Âª_4Âª_5Âª_6Âª_SÃ¡b'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D [de] MMMM [de] YYYY',
        LLL : 'D [de] MMMM [de] YYYY [Ã s] HH:mm',
        LLLL : 'dddd, D [de] MMMM [de] YYYY [Ã s] HH:mm'
    },
    calendar : {
        sameDay: '[Hoje Ã s] LT',
        nextDay: '[AmanhÃ£ Ã s] LT',
        nextWeek: 'dddd [Ã s] LT',
        lastDay: '[Ontem Ã s] LT',
        lastWeek: function () {
            return (this.day() === 0 || this.day() === 6) ?
                '[Ãltimo] dddd [Ã s] LT' : // Saturday + Sunday
                '[Ãltima] dddd [Ã s] LT'; // Monday - Friday
        },
        sameElse: 'L'
    },
    relativeTime : {
        future : 'em %s',
        past : '%s atrÃ¡s',
        s : 'poucos segundos',
        m : 'um minuto',
        mm : '%d minutos',
        h : 'uma hora',
        hh : '%d horas',
        d : 'um dia',
        dd : '%d dias',
        M : 'um mÃªs',
        MM : '%d meses',
        y : 'um ano',
        yy : '%d anos'
    },
    ordinalParse: /\d{1,2}Âº/,
    ordinal : '%dÂº'
});

//! moment.js locale configuration
//! locale : Portuguese [pt]
//! author : Jefferson : https://github.com/jalex79

hooks.defineLocale('pt', {
    months : 'Janeiro_Fevereiro_MarÃ§o_Abril_Maio_Junho_Julho_Agosto_Setembro_Outubro_Novembro_Dezembro'.split('_'),
    monthsShort : 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),
    weekdays : 'Domingo_Segunda-Feira_TerÃ§a-Feira_Quarta-Feira_Quinta-Feira_Sexta-Feira_SÃ¡bado'.split('_'),
    weekdaysShort : 'Dom_Seg_Ter_Qua_Qui_Sex_SÃ¡b'.split('_'),
    weekdaysMin : 'Dom_2Âª_3Âª_4Âª_5Âª_6Âª_SÃ¡b'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D [de] MMMM [de] YYYY',
        LLL : 'D [de] MMMM [de] YYYY HH:mm',
        LLLL : 'dddd, D [de] MMMM [de] YYYY HH:mm'
    },
    calendar : {
        sameDay: '[Hoje Ã s] LT',
        nextDay: '[AmanhÃ£ Ã s] LT',
        nextWeek: 'dddd [Ã s] LT',
        lastDay: '[Ontem Ã s] LT',
        lastWeek: function () {
            return (this.day() === 0 || this.day() === 6) ?
                '[Ãltimo] dddd [Ã s] LT' : // Saturday + Sunday
                '[Ãltima] dddd [Ã s] LT'; // Monday - Friday
        },
        sameElse: 'L'
    },
    relativeTime : {
        future : 'em %s',
        past : 'hÃ¡ %s',
        s : 'segundos',
        m : 'um minuto',
        mm : '%d minutos',
        h : 'uma hora',
        hh : '%d horas',
        d : 'um dia',
        dd : '%d dias',
        M : 'um mÃªs',
        MM : '%d meses',
        y : 'um ano',
        yy : '%d anos'
    },
    ordinalParse: /\d{1,2}Âº/,
    ordinal : '%dÂº',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Romanian [ro]
//! author : Vlad Gurdiga : https://github.com/gurdiga
//! author : Valentin Agachi : https://github.com/avaly

function relativeTimeWithPlural$2(number, withoutSuffix, key) {
    var format = {
            'mm': 'minute',
            'hh': 'ore',
            'dd': 'zile',
            'MM': 'luni',
            'yy': 'ani'
        },
        separator = ' ';
    if (number % 100 >= 20 || (number >= 100 && number % 100 === 0)) {
        separator = ' de ';
    }
    return number + separator + format[key];
}

hooks.defineLocale('ro', {
    months : 'ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie'.split('_'),
    monthsShort : 'ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.'.split('_'),
    monthsParseExact: true,
    weekdays : 'duminicÄ_luni_marÈi_miercuri_joi_vineri_sÃ¢mbÄtÄ'.split('_'),
    weekdaysShort : 'Dum_Lun_Mar_Mie_Joi_Vin_SÃ¢m'.split('_'),
    weekdaysMin : 'Du_Lu_Ma_Mi_Jo_Vi_SÃ¢'.split('_'),
    longDateFormat : {
        LT : 'H:mm',
        LTS : 'H:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY H:mm',
        LLLL : 'dddd, D MMMM YYYY H:mm'
    },
    calendar : {
        sameDay: '[azi la] LT',
        nextDay: '[mÃ¢ine la] LT',
        nextWeek: 'dddd [la] LT',
        lastDay: '[ieri la] LT',
        lastWeek: '[fosta] dddd [la] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'peste %s',
        past : '%s Ã®n urmÄ',
        s : 'cÃ¢teva secunde',
        m : 'un minut',
        mm : relativeTimeWithPlural$2,
        h : 'o orÄ',
        hh : relativeTimeWithPlural$2,
        d : 'o zi',
        dd : relativeTimeWithPlural$2,
        M : 'o lunÄ',
        MM : relativeTimeWithPlural$2,
        y : 'un an',
        yy : relativeTimeWithPlural$2
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Russian [ru]
//! author : Viktorminator : https://github.com/Viktorminator
//! Author : Menelion ElensÃºle : https://github.com/Oire
//! author : ÐÐ¾ÑÐµÐ½Ð±ÐµÑÐ³ ÐÐ°ÑÐº : https://github.com/socketpair

function plural$4(word, num) {
    var forms = word.split('_');
    return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
}
function relativeTimeWithPlural$3(number, withoutSuffix, key) {
    var format = {
        'mm': withoutSuffix ? 'Ð¼Ð¸Ð½ÑÑÐ°_Ð¼Ð¸Ð½ÑÑÑ_Ð¼Ð¸Ð½ÑÑ' : 'Ð¼Ð¸Ð½ÑÑÑ_Ð¼Ð¸Ð½ÑÑÑ_Ð¼Ð¸Ð½ÑÑ',
        'hh': 'ÑÐ°Ñ_ÑÐ°ÑÐ°_ÑÐ°ÑÐ¾Ð²',
        'dd': 'Ð´ÐµÐ½Ñ_Ð´Ð½Ñ_Ð´Ð½ÐµÐ¹',
        'MM': 'Ð¼ÐµÑÑÑ_Ð¼ÐµÑÑÑÐ°_Ð¼ÐµÑÑÑÐµÐ²',
        'yy': 'Ð³Ð¾Ð´_Ð³Ð¾Ð´Ð°_Ð»ÐµÑ'
    };
    if (key === 'm') {
        return withoutSuffix ? 'Ð¼Ð¸Ð½ÑÑÐ°' : 'Ð¼Ð¸Ð½ÑÑÑ';
    }
    else {
        return number + ' ' + plural$4(format[key], +number);
    }
}
var monthsParse$2 = [/^ÑÐ½Ð²/i, /^ÑÐµÐ²/i, /^Ð¼Ð°Ñ/i, /^Ð°Ð¿Ñ/i, /^Ð¼Ð°[Ð¹Ñ]/i, /^Ð¸ÑÐ½/i, /^Ð¸ÑÐ»/i, /^Ð°Ð²Ð³/i, /^ÑÐµÐ½/i, /^Ð¾ÐºÑ/i, /^Ð½Ð¾Ñ/i, /^Ð´ÐµÐº/i];

// http://new.gramota.ru/spravka/rules/139-prop : Â§ 103
// Ð¡Ð¾ÐºÑÐ°ÑÐµÐ½Ð¸Ñ Ð¼ÐµÑÑÑÐµÐ²: http://new.gramota.ru/spravka/buro/search-answer?s=242637
// CLDR data:          http://www.unicode.org/cldr/charts/28/summary/ru.html#1753
hooks.defineLocale('ru', {
    months : {
        format: 'ÑÐ½Ð²Ð°ÑÑ_ÑÐµÐ²ÑÐ°Ð»Ñ_Ð¼Ð°ÑÑÐ°_Ð°Ð¿ÑÐµÐ»Ñ_Ð¼Ð°Ñ_Ð¸ÑÐ½Ñ_Ð¸ÑÐ»Ñ_Ð°Ð²Ð³ÑÑÑÐ°_ÑÐµÐ½ÑÑÐ±ÑÑ_Ð¾ÐºÑÑÐ±ÑÑ_Ð½Ð¾ÑÐ±ÑÑ_Ð´ÐµÐºÐ°Ð±ÑÑ'.split('_'),
        standalone: 'ÑÐ½Ð²Ð°ÑÑ_ÑÐµÐ²ÑÐ°Ð»Ñ_Ð¼Ð°ÑÑ_Ð°Ð¿ÑÐµÐ»Ñ_Ð¼Ð°Ð¹_Ð¸ÑÐ½Ñ_Ð¸ÑÐ»Ñ_Ð°Ð²Ð³ÑÑÑ_ÑÐµÐ½ÑÑÐ±ÑÑ_Ð¾ÐºÑÑÐ±ÑÑ_Ð½Ð¾ÑÐ±ÑÑ_Ð´ÐµÐºÐ°Ð±ÑÑ'.split('_')
    },
    monthsShort : {
        // Ð¿Ð¾ CLDR Ð¸Ð¼ÐµÐ½Ð½Ð¾ "Ð¸ÑÐ»." Ð¸ "Ð¸ÑÐ½.", Ð½Ð¾ ÐºÐ°ÐºÐ¾Ð¹ ÑÐ¼ÑÑÐ» Ð¼ÐµÐ½ÑÑÑ Ð±ÑÐºÐ²Ñ Ð½Ð° ÑÐ¾ÑÐºÑ ?
        format: 'ÑÐ½Ð²._ÑÐµÐ²Ñ._Ð¼Ð°Ñ._Ð°Ð¿Ñ._Ð¼Ð°Ñ_Ð¸ÑÐ½Ñ_Ð¸ÑÐ»Ñ_Ð°Ð²Ð³._ÑÐµÐ½Ñ._Ð¾ÐºÑ._Ð½Ð¾ÑÐ±._Ð´ÐµÐº.'.split('_'),
        standalone: 'ÑÐ½Ð²._ÑÐµÐ²Ñ._Ð¼Ð°ÑÑ_Ð°Ð¿Ñ._Ð¼Ð°Ð¹_Ð¸ÑÐ½Ñ_Ð¸ÑÐ»Ñ_Ð°Ð²Ð³._ÑÐµÐ½Ñ._Ð¾ÐºÑ._Ð½Ð¾ÑÐ±._Ð´ÐµÐº.'.split('_')
    },
    weekdays : {
        standalone: 'Ð²Ð¾ÑÐºÑÐµÑÐµÐ½ÑÐµ_Ð¿Ð¾Ð½ÐµÐ´ÐµÐ»ÑÐ½Ð¸Ðº_Ð²ÑÐ¾ÑÐ½Ð¸Ðº_ÑÑÐµÐ´Ð°_ÑÐµÑÐ²ÐµÑÐ³_Ð¿ÑÑÐ½Ð¸ÑÐ°_ÑÑÐ±Ð±Ð¾ÑÐ°'.split('_'),
        format: 'Ð²Ð¾ÑÐºÑÐµÑÐµÐ½ÑÐµ_Ð¿Ð¾Ð½ÐµÐ´ÐµÐ»ÑÐ½Ð¸Ðº_Ð²ÑÐ¾ÑÐ½Ð¸Ðº_ÑÑÐµÐ´Ñ_ÑÐµÑÐ²ÐµÑÐ³_Ð¿ÑÑÐ½Ð¸ÑÑ_ÑÑÐ±Ð±Ð¾ÑÑ'.split('_'),
        isFormat: /\[ ?[ÐÐ²] ?(?:Ð¿ÑÐ¾ÑÐ»ÑÑ|ÑÐ»ÐµÐ´ÑÑÑÑÑ|ÑÑÑ)? ?\] ?dddd/
    },
    weekdaysShort : 'Ð²Ñ_Ð¿Ð½_Ð²Ñ_ÑÑ_ÑÑ_Ð¿Ñ_ÑÐ±'.split('_'),
    weekdaysMin : 'Ð²Ñ_Ð¿Ð½_Ð²Ñ_ÑÑ_ÑÑ_Ð¿Ñ_ÑÐ±'.split('_'),
    monthsParse : monthsParse$2,
    longMonthsParse : monthsParse$2,
    shortMonthsParse : monthsParse$2,

    // Ð¿Ð¾Ð»Ð½ÑÐµ Ð½Ð°Ð·Ð²Ð°Ð½Ð¸Ñ Ñ Ð¿Ð°Ð´ÐµÐ¶Ð°Ð¼Ð¸, Ð¿Ð¾ ÑÑÐ¸ Ð±ÑÐºÐ²Ñ, Ð´Ð»Ñ Ð½ÐµÐºÐ¾ÑÐ¾ÑÑÑ, Ð¿Ð¾ 4 Ð±ÑÐºÐ²Ñ, ÑÐ¾ÐºÑÐ°ÑÐµÐ½Ð¸Ñ Ñ ÑÐ¾ÑÐºÐ¾Ð¹ Ð¸ Ð±ÐµÐ· ÑÐ¾ÑÐºÐ¸
    monthsRegex: /^(ÑÐ½Ð²Ð°Ñ[ÑÑ]|ÑÐ½Ð²\.?|ÑÐµÐ²ÑÐ°Ð»[ÑÑ]|ÑÐµÐ²Ñ?\.?|Ð¼Ð°ÑÑÐ°?|Ð¼Ð°Ñ\.?|Ð°Ð¿ÑÐµÐ»[ÑÑ]|Ð°Ð¿Ñ\.?|Ð¼Ð°[Ð¹Ñ]|Ð¸ÑÐ½[ÑÑ]|Ð¸ÑÐ½\.?|Ð¸ÑÐ»[ÑÑ]|Ð¸ÑÐ»\.?|Ð°Ð²Ð³ÑÑÑÐ°?|Ð°Ð²Ð³\.?|ÑÐµÐ½ÑÑÐ±Ñ[ÑÑ]|ÑÐµÐ½Ñ?\.?|Ð¾ÐºÑÑÐ±Ñ[ÑÑ]|Ð¾ÐºÑ\.?|Ð½Ð¾ÑÐ±Ñ[ÑÑ]|Ð½Ð¾ÑÐ±?\.?|Ð´ÐµÐºÐ°Ð±Ñ[ÑÑ]|Ð´ÐµÐº\.?)/i,

    // ÐºÐ¾Ð¿Ð¸Ñ Ð¿ÑÐµÐ´ÑÐ´ÑÑÐµÐ³Ð¾
    monthsShortRegex: /^(ÑÐ½Ð²Ð°Ñ[ÑÑ]|ÑÐ½Ð²\.?|ÑÐµÐ²ÑÐ°Ð»[ÑÑ]|ÑÐµÐ²Ñ?\.?|Ð¼Ð°ÑÑÐ°?|Ð¼Ð°Ñ\.?|Ð°Ð¿ÑÐµÐ»[ÑÑ]|Ð°Ð¿Ñ\.?|Ð¼Ð°[Ð¹Ñ]|Ð¸ÑÐ½[ÑÑ]|Ð¸ÑÐ½\.?|Ð¸ÑÐ»[ÑÑ]|Ð¸ÑÐ»\.?|Ð°Ð²Ð³ÑÑÑÐ°?|Ð°Ð²Ð³\.?|ÑÐµÐ½ÑÑÐ±Ñ[ÑÑ]|ÑÐµÐ½Ñ?\.?|Ð¾ÐºÑÑÐ±Ñ[ÑÑ]|Ð¾ÐºÑ\.?|Ð½Ð¾ÑÐ±Ñ[ÑÑ]|Ð½Ð¾ÑÐ±?\.?|Ð´ÐµÐºÐ°Ð±Ñ[ÑÑ]|Ð´ÐµÐº\.?)/i,

    // Ð¿Ð¾Ð»Ð½ÑÐµ Ð½Ð°Ð·Ð²Ð°Ð½Ð¸Ñ Ñ Ð¿Ð°Ð´ÐµÐ¶Ð°Ð¼Ð¸
    monthsStrictRegex: /^(ÑÐ½Ð²Ð°Ñ[ÑÑ]|ÑÐµÐ²ÑÐ°Ð»[ÑÑ]|Ð¼Ð°ÑÑÐ°?|Ð°Ð¿ÑÐµÐ»[ÑÑ]|Ð¼Ð°[ÑÐ¹]|Ð¸ÑÐ½[ÑÑ]|Ð¸ÑÐ»[ÑÑ]|Ð°Ð²Ð³ÑÑÑÐ°?|ÑÐµÐ½ÑÑÐ±Ñ[ÑÑ]|Ð¾ÐºÑÑÐ±Ñ[ÑÑ]|Ð½Ð¾ÑÐ±Ñ[ÑÑ]|Ð´ÐµÐºÐ°Ð±Ñ[ÑÑ])/i,

    // ÐÑÑÐ°Ð¶ÐµÐ½Ð¸Ðµ, ÐºÐ¾ÑÐ¾ÑÐ¾Ðµ ÑÐ¾Ð¾ÑÐ²ÐµÑÑÐ²ÑÐµÑ ÑÐ¾Ð»ÑÐºÐ¾ ÑÐ¾ÐºÑÐ°ÑÑÐ½Ð½ÑÐ¼ ÑÐ¾ÑÐ¼Ð°Ð¼
    monthsShortStrictRegex: /^(ÑÐ½Ð²\.|ÑÐµÐ²Ñ?\.|Ð¼Ð°Ñ[Ñ.]|Ð°Ð¿Ñ\.|Ð¼Ð°[ÑÐ¹]|Ð¸ÑÐ½[ÑÑ.]|Ð¸ÑÐ»[ÑÑ.]|Ð°Ð²Ð³\.|ÑÐµÐ½Ñ?\.|Ð¾ÐºÑ\.|Ð½Ð¾ÑÐ±?\.|Ð´ÐµÐº\.)/i,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D MMMM YYYY Ð³.',
        LLL : 'D MMMM YYYY Ð³., HH:mm',
        LLLL : 'dddd, D MMMM YYYY Ð³., HH:mm'
    },
    calendar : {
        sameDay: '[Ð¡ÐµÐ³Ð¾Ð´Ð½Ñ Ð²] LT',
        nextDay: '[ÐÐ°Ð²ÑÑÐ° Ð²] LT',
        lastDay: '[ÐÑÐµÑÐ° Ð²] LT',
        nextWeek: function (now) {
            if (now.week() !== this.week()) {
                switch (this.day()) {
                    case 0:
                        return '[Ð ÑÐ»ÐµÐ´ÑÑÑÐµÐµ] dddd [Ð²] LT';
                    case 1:
                    case 2:
                    case 4:
                        return '[Ð ÑÐ»ÐµÐ´ÑÑÑÐ¸Ð¹] dddd [Ð²] LT';
                    case 3:
                    case 5:
                    case 6:
                        return '[Ð ÑÐ»ÐµÐ´ÑÑÑÑÑ] dddd [Ð²] LT';
                }
            } else {
                if (this.day() === 2) {
                    return '[ÐÐ¾] dddd [Ð²] LT';
                } else {
                    return '[Ð] dddd [Ð²] LT';
                }
            }
        },
        lastWeek: function (now) {
            if (now.week() !== this.week()) {
                switch (this.day()) {
                    case 0:
                        return '[Ð Ð¿ÑÐ¾ÑÐ»Ð¾Ðµ] dddd [Ð²] LT';
                    case 1:
                    case 2:
                    case 4:
                        return '[Ð Ð¿ÑÐ¾ÑÐ»ÑÐ¹] dddd [Ð²] LT';
                    case 3:
                    case 5:
                    case 6:
                        return '[Ð Ð¿ÑÐ¾ÑÐ»ÑÑ] dddd [Ð²] LT';
                }
            } else {
                if (this.day() === 2) {
                    return '[ÐÐ¾] dddd [Ð²] LT';
                } else {
                    return '[Ð] dddd [Ð²] LT';
                }
            }
        },
        sameElse: 'L'
    },
    relativeTime : {
        future : 'ÑÐµÑÐµÐ· %s',
        past : '%s Ð½Ð°Ð·Ð°Ð´',
        s : 'Ð½ÐµÑÐºÐ¾Ð»ÑÐºÐ¾ ÑÐµÐºÑÐ½Ð´',
        m : relativeTimeWithPlural$3,
        mm : relativeTimeWithPlural$3,
        h : 'ÑÐ°Ñ',
        hh : relativeTimeWithPlural$3,
        d : 'Ð´ÐµÐ½Ñ',
        dd : relativeTimeWithPlural$3,
        M : 'Ð¼ÐµÑÑÑ',
        MM : relativeTimeWithPlural$3,
        y : 'Ð³Ð¾Ð´',
        yy : relativeTimeWithPlural$3
    },
    meridiemParse: /Ð½Ð¾ÑÐ¸|ÑÑÑÐ°|Ð´Ð½Ñ|Ð²ÐµÑÐµÑÐ°/i,
    isPM : function (input) {
        return /^(Ð´Ð½Ñ|Ð²ÐµÑÐµÑÐ°)$/.test(input);
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 4) {
            return 'Ð½Ð¾ÑÐ¸';
        } else if (hour < 12) {
            return 'ÑÑÑÐ°';
        } else if (hour < 17) {
            return 'Ð´Ð½Ñ';
        } else {
            return 'Ð²ÐµÑÐµÑÐ°';
        }
    },
    ordinalParse: /\d{1,2}-(Ð¹|Ð³Ð¾|Ñ)/,
    ordinal: function (number, period) {
        switch (period) {
            case 'M':
            case 'd':
            case 'DDD':
                return number + '-Ð¹';
            case 'D':
                return number + '-Ð³Ð¾';
            case 'w':
            case 'W':
                return number + '-Ñ';
            default:
                return number;
        }
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Northern Sami [se]
//! authors : BÃ¥rd Rolstad Henriksen : https://github.com/karamell


hooks.defineLocale('se', {
    months : 'oÄÄajagemÃ¡nnu_guovvamÃ¡nnu_njukÄamÃ¡nnu_cuoÅomÃ¡nnu_miessemÃ¡nnu_geassemÃ¡nnu_suoidnemÃ¡nnu_borgemÃ¡nnu_ÄakÄamÃ¡nnu_golggotmÃ¡nnu_skÃ¡bmamÃ¡nnu_juovlamÃ¡nnu'.split('_'),
    monthsShort : 'oÄÄj_guov_njuk_cuo_mies_geas_suoi_borg_ÄakÄ_golg_skÃ¡b_juov'.split('_'),
    weekdays : 'sotnabeaivi_vuossÃ¡rga_maÅÅebÃ¡rga_gaskavahkku_duorastat_bearjadat_lÃ¡vvardat'.split('_'),
    weekdaysShort : 'sotn_vuos_maÅ_gask_duor_bear_lÃ¡v'.split('_'),
    weekdaysMin : 's_v_m_g_d_b_L'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'MMMM D. [b.] YYYY',
        LLL : 'MMMM D. [b.] YYYY [ti.] HH:mm',
        LLLL : 'dddd, MMMM D. [b.] YYYY [ti.] HH:mm'
    },
    calendar : {
        sameDay: '[otne ti] LT',
        nextDay: '[ihttin ti] LT',
        nextWeek: 'dddd [ti] LT',
        lastDay: '[ikte ti] LT',
        lastWeek: '[ovddit] dddd [ti] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : '%s geaÅ¾es',
        past : 'maÅit %s',
        s : 'moadde sekunddat',
        m : 'okta minuhta',
        mm : '%d minuhtat',
        h : 'okta diimmu',
        hh : '%d diimmut',
        d : 'okta beaivi',
        dd : '%d beaivvit',
        M : 'okta mÃ¡nnu',
        MM : '%d mÃ¡nut',
        y : 'okta jahki',
        yy : '%d jagit'
    },
    ordinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Sinhalese [si]
//! author : Sampath Sitinamaluwa : https://github.com/sampathsris

/*jshint -W100*/
hooks.defineLocale('si', {
    months : 'à¶¢à¶±à·à·à¶»à·_à¶´à·à¶¶à¶»à·à·à¶»à·_à¶¸à·à¶»à·à¶­à·_à¶à¶´à·âà¶»à·à¶½à·_à¶¸à·à¶ºà·_à¶¢à·à¶±à·_à¶¢à·à¶½à·_à¶à¶à·à·à·à¶­à·_à·à·à¶´à·à¶­à·à¶¸à·à¶¶à¶»à·_à¶à¶à·à¶­à·à¶¶à¶»à·_à¶±à·à·à·à¶¸à·à¶¶à¶»à·_à¶¯à·à·à·à¶¸à·à¶¶à¶»à·'.split('_'),
    monthsShort : 'à¶¢à¶±_à¶´à·à¶¶_à¶¸à·à¶»à·_à¶à¶´à·_à¶¸à·à¶ºà·_à¶¢à·à¶±à·_à¶¢à·à¶½à·_à¶à¶à·_à·à·à¶´à·_à¶à¶à·_à¶±à·à·à·_à¶¯à·à·à·'.split('_'),
    weekdays : 'à¶à¶»à·à¶¯à·_à·à¶³à·à¶¯à·_à¶à¶à·à¶»à·à·à·à¶¯à·_à¶¶à¶¯à·à¶¯à·_à¶¶à·âà¶»à·à·à·à¶´à¶­à·à¶±à·à¶¯à·_à·à·à¶à·à¶»à·à¶¯à·_à·à·à¶±à·à·à¶»à·à¶¯à·'.split('_'),
    weekdaysShort : 'à¶à¶»à·_à·à¶³à·_à¶à¶_à¶¶à¶¯à·_à¶¶à·âà¶»à·_à·à·à¶à·_à·à·à¶±'.split('_'),
    weekdaysMin : 'à¶_à·_à¶_à¶¶_à¶¶à·âà¶»_à·à·_à·à·'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'a h:mm',
        LTS : 'a h:mm:ss',
        L : 'YYYY/MM/DD',
        LL : 'YYYY MMMM D',
        LLL : 'YYYY MMMM D, a h:mm',
        LLLL : 'YYYY MMMM D [à·à·à¶±à·] dddd, a h:mm:ss'
    },
    calendar : {
        sameDay : '[à¶à¶¯] LT[à¶§]',
        nextDay : '[à·à·à¶§] LT[à¶§]',
        nextWeek : 'dddd LT[à¶§]',
        lastDay : '[à¶à¶ºà·] LT[à¶§]',
        lastWeek : '[à¶´à·à·à¶à·à¶º] dddd LT[à¶§]',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%sà¶à·à¶±à·',
        past : '%sà¶à¶§ à¶´à·à¶»',
        s : 'à¶­à¶­à·à¶´à¶» à¶à·à·à·à¶´à¶º',
        m : 'à¶¸à·à¶±à·à¶­à·à¶­à·à·',
        mm : 'à¶¸à·à¶±à·à¶­à·à¶­à· %d',
        h : 'à¶´à·à¶º',
        hh : 'à¶´à·à¶º %d',
        d : 'à¶¯à·à¶±à¶º',
        dd : 'à¶¯à·à¶± %d',
        M : 'à¶¸à·à·à¶º',
        MM : 'à¶¸à·à· %d',
        y : 'à·à·à¶»',
        yy : 'à·à·à¶» %d'
    },
    ordinalParse: /\d{1,2} à·à·à¶±à·/,
    ordinal : function (number) {
        return number + ' à·à·à¶±à·';
    },
    meridiemParse : /à¶´à·à¶» à·à¶»à·|à¶´à·à· à·à¶»à·|à¶´à·.à·|à¶´.à·./,
    isPM : function (input) {
        return input === 'à¶´.à·.' || input === 'à¶´à·à· à·à¶»à·';
    },
    meridiem : function (hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'à¶´.à·.' : 'à¶´à·à· à·à¶»à·';
        } else {
            return isLower ? 'à¶´à·.à·.' : 'à¶´à·à¶» à·à¶»à·';
        }
    }
});

//! moment.js locale configuration
//! locale : Slovak [sk]
//! author : Martin Minka : https://github.com/k2s
//! based on work of petrbela : https://github.com/petrbela

var months$6 = 'januÃ¡r_februÃ¡r_marec_aprÃ­l_mÃ¡j_jÃºn_jÃºl_august_september_oktÃ³ber_november_december'.split('_');
var monthsShort$4 = 'jan_feb_mar_apr_mÃ¡j_jÃºn_jÃºl_aug_sep_okt_nov_dec'.split('_');
function plural$5(n) {
    return (n > 1) && (n < 5);
}
function translate$8(number, withoutSuffix, key, isFuture) {
    var result = number + ' ';
    switch (key) {
        case 's':  // a few seconds / in a few seconds / a few seconds ago
            return (withoutSuffix || isFuture) ? 'pÃ¡r sekÃºnd' : 'pÃ¡r sekundami';
        case 'm':  // a minute / in a minute / a minute ago
            return withoutSuffix ? 'minÃºta' : (isFuture ? 'minÃºtu' : 'minÃºtou');
        case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
            if (withoutSuffix || isFuture) {
                return result + (plural$5(number) ? 'minÃºty' : 'minÃºt');
            } else {
                return result + 'minÃºtami';
            }
            break;
        case 'h':  // an hour / in an hour / an hour ago
            return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');
        case 'hh': // 9 hours / in 9 hours / 9 hours ago
            if (withoutSuffix || isFuture) {
                return result + (plural$5(number) ? 'hodiny' : 'hodÃ­n');
            } else {
                return result + 'hodinami';
            }
            break;
        case 'd':  // a day / in a day / a day ago
            return (withoutSuffix || isFuture) ? 'deÅ' : 'dÅom';
        case 'dd': // 9 days / in 9 days / 9 days ago
            if (withoutSuffix || isFuture) {
                return result + (plural$5(number) ? 'dni' : 'dnÃ­');
            } else {
                return result + 'dÅami';
            }
            break;
        case 'M':  // a month / in a month / a month ago
            return (withoutSuffix || isFuture) ? 'mesiac' : 'mesiacom';
        case 'MM': // 9 months / in 9 months / 9 months ago
            if (withoutSuffix || isFuture) {
                return result + (plural$5(number) ? 'mesiace' : 'mesiacov');
            } else {
                return result + 'mesiacmi';
            }
            break;
        case 'y':  // a year / in a year / a year ago
            return (withoutSuffix || isFuture) ? 'rok' : 'rokom';
        case 'yy': // 9 years / in 9 years / 9 years ago
            if (withoutSuffix || isFuture) {
                return result + (plural$5(number) ? 'roky' : 'rokov');
            } else {
                return result + 'rokmi';
            }
            break;
    }
}

hooks.defineLocale('sk', {
    months : months$6,
    monthsShort : monthsShort$4,
    weekdays : 'nedeÄ¾a_pondelok_utorok_streda_Å¡tvrtok_piatok_sobota'.split('_'),
    weekdaysShort : 'ne_po_ut_st_Å¡t_pi_so'.split('_'),
    weekdaysMin : 'ne_po_ut_st_Å¡t_pi_so'.split('_'),
    longDateFormat : {
        LT: 'H:mm',
        LTS : 'H:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D. MMMM YYYY',
        LLL : 'D. MMMM YYYY H:mm',
        LLLL : 'dddd D. MMMM YYYY H:mm'
    },
    calendar : {
        sameDay: '[dnes o] LT',
        nextDay: '[zajtra o] LT',
        nextWeek: function () {
            switch (this.day()) {
                case 0:
                    return '[v nedeÄ¾u o] LT';
                case 1:
                case 2:
                    return '[v] dddd [o] LT';
                case 3:
                    return '[v stredu o] LT';
                case 4:
                    return '[vo Å¡tvrtok o] LT';
                case 5:
                    return '[v piatok o] LT';
                case 6:
                    return '[v sobotu o] LT';
            }
        },
        lastDay: '[vÄera o] LT',
        lastWeek: function () {
            switch (this.day()) {
                case 0:
                    return '[minulÃº nedeÄ¾u o] LT';
                case 1:
                case 2:
                    return '[minulÃ½] dddd [o] LT';
                case 3:
                    return '[minulÃº stredu o] LT';
                case 4:
                case 5:
                    return '[minulÃ½] dddd [o] LT';
                case 6:
                    return '[minulÃº sobotu o] LT';
            }
        },
        sameElse: 'L'
    },
    relativeTime : {
        future : 'za %s',
        past : 'pred %s',
        s : translate$8,
        m : translate$8,
        mm : translate$8,
        h : translate$8,
        hh : translate$8,
        d : translate$8,
        dd : translate$8,
        M : translate$8,
        MM : translate$8,
        y : translate$8,
        yy : translate$8
    },
    ordinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Slovenian [sl]
//! author : Robert SedovÅ¡ek : https://github.com/sedovsek

function processRelativeTime$4(number, withoutSuffix, key, isFuture) {
    var result = number + ' ';
    switch (key) {
        case 's':
            return withoutSuffix || isFuture ? 'nekaj sekund' : 'nekaj sekundami';
        case 'm':
            return withoutSuffix ? 'ena minuta' : 'eno minuto';
        case 'mm':
            if (number === 1) {
                result += withoutSuffix ? 'minuta' : 'minuto';
            } else if (number === 2) {
                result += withoutSuffix || isFuture ? 'minuti' : 'minutama';
            } else if (number < 5) {
                result += withoutSuffix || isFuture ? 'minute' : 'minutami';
            } else {
                result += withoutSuffix || isFuture ? 'minut' : 'minutami';
            }
            return result;
        case 'h':
            return withoutSuffix ? 'ena ura' : 'eno uro';
        case 'hh':
            if (number === 1) {
                result += withoutSuffix ? 'ura' : 'uro';
            } else if (number === 2) {
                result += withoutSuffix || isFuture ? 'uri' : 'urama';
            } else if (number < 5) {
                result += withoutSuffix || isFuture ? 'ure' : 'urami';
            } else {
                result += withoutSuffix || isFuture ? 'ur' : 'urami';
            }
            return result;
        case 'd':
            return withoutSuffix || isFuture ? 'en dan' : 'enim dnem';
        case 'dd':
            if (number === 1) {
                result += withoutSuffix || isFuture ? 'dan' : 'dnem';
            } else if (number === 2) {
                result += withoutSuffix || isFuture ? 'dni' : 'dnevoma';
            } else {
                result += withoutSuffix || isFuture ? 'dni' : 'dnevi';
            }
            return result;
        case 'M':
            return withoutSuffix || isFuture ? 'en mesec' : 'enim mesecem';
        case 'MM':
            if (number === 1) {
                result += withoutSuffix || isFuture ? 'mesec' : 'mesecem';
            } else if (number === 2) {
                result += withoutSuffix || isFuture ? 'meseca' : 'mesecema';
            } else if (number < 5) {
                result += withoutSuffix || isFuture ? 'mesece' : 'meseci';
            } else {
                result += withoutSuffix || isFuture ? 'mesecev' : 'meseci';
            }
            return result;
        case 'y':
            return withoutSuffix || isFuture ? 'eno leto' : 'enim letom';
        case 'yy':
            if (number === 1) {
                result += withoutSuffix || isFuture ? 'leto' : 'letom';
            } else if (number === 2) {
                result += withoutSuffix || isFuture ? 'leti' : 'letoma';
            } else if (number < 5) {
                result += withoutSuffix || isFuture ? 'leta' : 'leti';
            } else {
                result += withoutSuffix || isFuture ? 'let' : 'leti';
            }
            return result;
    }
}

hooks.defineLocale('sl', {
    months : 'januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december'.split('_'),
    monthsShort : 'jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.'.split('_'),
    monthsParseExact: true,
    weekdays : 'nedelja_ponedeljek_torek_sreda_Äetrtek_petek_sobota'.split('_'),
    weekdaysShort : 'ned._pon._tor._sre._Äet._pet._sob.'.split('_'),
    weekdaysMin : 'ne_po_to_sr_Äe_pe_so'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'H:mm',
        LTS : 'H:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D. MMMM YYYY',
        LLL : 'D. MMMM YYYY H:mm',
        LLLL : 'dddd, D. MMMM YYYY H:mm'
    },
    calendar : {
        sameDay  : '[danes ob] LT',
        nextDay  : '[jutri ob] LT',

        nextWeek : function () {
            switch (this.day()) {
                case 0:
                    return '[v] [nedeljo] [ob] LT';
                case 3:
                    return '[v] [sredo] [ob] LT';
                case 6:
                    return '[v] [soboto] [ob] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[v] dddd [ob] LT';
            }
        },
        lastDay  : '[vÄeraj ob] LT',
        lastWeek : function () {
            switch (this.day()) {
                case 0:
                    return '[prejÅ¡njo] [nedeljo] [ob] LT';
                case 3:
                    return '[prejÅ¡njo] [sredo] [ob] LT';
                case 6:
                    return '[prejÅ¡njo] [soboto] [ob] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[prejÅ¡nji] dddd [ob] LT';
            }
        },
        sameElse : 'L'
    },
    relativeTime : {
        future : 'Äez %s',
        past   : 'pred %s',
        s      : processRelativeTime$4,
        m      : processRelativeTime$4,
        mm     : processRelativeTime$4,
        h      : processRelativeTime$4,
        hh     : processRelativeTime$4,
        d      : processRelativeTime$4,
        dd     : processRelativeTime$4,
        M      : processRelativeTime$4,
        MM     : processRelativeTime$4,
        y      : processRelativeTime$4,
        yy     : processRelativeTime$4
    },
    ordinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Albanian [sq]
//! author : FlakÃ«rim Ismani : https://github.com/flakerimi
//! author : Menelion ElensÃºle : https://github.com/Oire
//! author : Oerd Cukalla : https://github.com/oerd

hooks.defineLocale('sq', {
    months : 'Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_NÃ«ntor_Dhjetor'.split('_'),
    monthsShort : 'Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_NÃ«n_Dhj'.split('_'),
    weekdays : 'E Diel_E HÃ«nÃ«_E MartÃ«_E MÃ«rkurÃ«_E Enjte_E Premte_E ShtunÃ«'.split('_'),
    weekdaysShort : 'Die_HÃ«n_Mar_MÃ«r_Enj_Pre_Sht'.split('_'),
    weekdaysMin : 'D_H_Ma_MÃ«_E_P_Sh'.split('_'),
    weekdaysParseExact : true,
    meridiemParse: /PD|MD/,
    isPM: function (input) {
        return input.charAt(0) === 'M';
    },
    meridiem : function (hours, minutes, isLower) {
        return hours < 12 ? 'PD' : 'MD';
    },
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[Sot nÃ«] LT',
        nextDay : '[NesÃ«r nÃ«] LT',
        nextWeek : 'dddd [nÃ«] LT',
        lastDay : '[Dje nÃ«] LT',
        lastWeek : 'dddd [e kaluar nÃ«] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'nÃ« %s',
        past : '%s mÃ« parÃ«',
        s : 'disa sekonda',
        m : 'njÃ« minutÃ«',
        mm : '%d minuta',
        h : 'njÃ« orÃ«',
        hh : '%d orÃ«',
        d : 'njÃ« ditÃ«',
        dd : '%d ditÃ«',
        M : 'njÃ« muaj',
        MM : '%d muaj',
        y : 'njÃ« vit',
        yy : '%d vite'
    },
    ordinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Serbian Cyrillic [sr-cyrl]
//! author : Milan JanaÄkoviÄ<milanjanackovic@gmail.com> : https://github.com/milan-j

var translator$1 = {
    words: { //Different grammatical cases
        m: ['ÑÐµÐ´Ð°Ð½ Ð¼Ð¸Ð½ÑÑ', 'ÑÐµÐ´Ð½Ðµ Ð¼Ð¸Ð½ÑÑÐµ'],
        mm: ['Ð¼Ð¸Ð½ÑÑ', 'Ð¼Ð¸Ð½ÑÑÐµ', 'Ð¼Ð¸Ð½ÑÑÐ°'],
        h: ['ÑÐµÐ´Ð°Ð½ ÑÐ°Ñ', 'ÑÐµÐ´Ð½Ð¾Ð³ ÑÐ°ÑÐ°'],
        hh: ['ÑÐ°Ñ', 'ÑÐ°ÑÐ°', 'ÑÐ°ÑÐ¸'],
        dd: ['Ð´Ð°Ð½', 'Ð´Ð°Ð½Ð°', 'Ð´Ð°Ð½Ð°'],
        MM: ['Ð¼ÐµÑÐµÑ', 'Ð¼ÐµÑÐµÑÐ°', 'Ð¼ÐµÑÐµÑÐ¸'],
        yy: ['Ð³Ð¾Ð´Ð¸Ð½Ð°', 'Ð³Ð¾Ð´Ð¸Ð½Ðµ', 'Ð³Ð¾Ð´Ð¸Ð½Ð°']
    },
    correctGrammaticalCase: function (number, wordKey) {
        return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
    },
    translate: function (number, withoutSuffix, key) {
        var wordKey = translator$1.words[key];
        if (key.length === 1) {
            return withoutSuffix ? wordKey[0] : wordKey[1];
        } else {
            return number + ' ' + translator$1.correctGrammaticalCase(number, wordKey);
        }
    }
};

hooks.defineLocale('sr-cyrl', {
    months: 'ÑÐ°Ð½ÑÐ°Ñ_ÑÐµÐ±ÑÑÐ°Ñ_Ð¼Ð°ÑÑ_Ð°Ð¿ÑÐ¸Ð»_Ð¼Ð°Ñ_ÑÑÐ½_ÑÑÐ»_Ð°Ð²Ð³ÑÑÑ_ÑÐµÐ¿ÑÐµÐ¼Ð±Ð°Ñ_Ð¾ÐºÑÐ¾Ð±Ð°Ñ_Ð½Ð¾Ð²ÐµÐ¼Ð±Ð°Ñ_Ð´ÐµÑÐµÐ¼Ð±Ð°Ñ'.split('_'),
    monthsShort: 'ÑÐ°Ð½._ÑÐµÐ±._Ð¼Ð°Ñ._Ð°Ð¿Ñ._Ð¼Ð°Ñ_ÑÑÐ½_ÑÑÐ»_Ð°Ð²Ð³._ÑÐµÐ¿._Ð¾ÐºÑ._Ð½Ð¾Ð²._Ð´ÐµÑ.'.split('_'),
    monthsParseExact: true,
    weekdays: 'Ð½ÐµÐ´ÐµÑÐ°_Ð¿Ð¾Ð½ÐµÐ´ÐµÑÐ°Ðº_ÑÑÐ¾ÑÐ°Ðº_ÑÑÐµÐ´Ð°_ÑÐµÑÐ²ÑÑÐ°Ðº_Ð¿ÐµÑÐ°Ðº_ÑÑÐ±Ð¾ÑÐ°'.split('_'),
    weekdaysShort: 'Ð½ÐµÐ´._Ð¿Ð¾Ð½._ÑÑÐ¾._ÑÑÐµ._ÑÐµÑ._Ð¿ÐµÑ._ÑÑÐ±.'.split('_'),
    weekdaysMin: 'Ð½Ðµ_Ð¿Ð¾_ÑÑ_ÑÑ_ÑÐµ_Ð¿Ðµ_ÑÑ'.split('_'),
    weekdaysParseExact : true,
    longDateFormat: {
        LT: 'H:mm',
        LTS : 'H:mm:ss',
        L: 'DD.MM.YYYY',
        LL: 'D. MMMM YYYY',
        LLL: 'D. MMMM YYYY H:mm',
        LLLL: 'dddd, D. MMMM YYYY H:mm'
    },
    calendar: {
        sameDay: '[Ð´Ð°Ð½Ð°Ñ Ñ] LT',
        nextDay: '[ÑÑÑÑÐ° Ñ] LT',
        nextWeek: function () {
            switch (this.day()) {
                case 0:
                    return '[Ñ] [Ð½ÐµÐ´ÐµÑÑ] [Ñ] LT';
                case 3:
                    return '[Ñ] [ÑÑÐµÐ´Ñ] [Ñ] LT';
                case 6:
                    return '[Ñ] [ÑÑÐ±Ð¾ÑÑ] [Ñ] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[Ñ] dddd [Ñ] LT';
            }
        },
        lastDay  : '[ÑÑÑÐµ Ñ] LT',
        lastWeek : function () {
            var lastWeekDays = [
                '[Ð¿ÑÐ¾ÑÐ»Ðµ] [Ð½ÐµÐ´ÐµÑÐµ] [Ñ] LT',
                '[Ð¿ÑÐ¾ÑÐ»Ð¾Ð³] [Ð¿Ð¾Ð½ÐµÐ´ÐµÑÐºÐ°] [Ñ] LT',
                '[Ð¿ÑÐ¾ÑÐ»Ð¾Ð³] [ÑÑÐ¾ÑÐºÐ°] [Ñ] LT',
                '[Ð¿ÑÐ¾ÑÐ»Ðµ] [ÑÑÐµÐ´Ðµ] [Ñ] LT',
                '[Ð¿ÑÐ¾ÑÐ»Ð¾Ð³] [ÑÐµÑÐ²ÑÑÐºÐ°] [Ñ] LT',
                '[Ð¿ÑÐ¾ÑÐ»Ð¾Ð³] [Ð¿ÐµÑÐºÐ°] [Ñ] LT',
                '[Ð¿ÑÐ¾ÑÐ»Ðµ] [ÑÑÐ±Ð¾ÑÐµ] [Ñ] LT'
            ];
            return lastWeekDays[this.day()];
        },
        sameElse : 'L'
    },
    relativeTime : {
        future : 'Ð·Ð° %s',
        past   : 'Ð¿ÑÐµ %s',
        s      : 'Ð½ÐµÐºÐ¾Ð»Ð¸ÐºÐ¾ ÑÐµÐºÑÐ½Ð´Ð¸',
        m      : translator$1.translate,
        mm     : translator$1.translate,
        h      : translator$1.translate,
        hh     : translator$1.translate,
        d      : 'Ð´Ð°Ð½',
        dd     : translator$1.translate,
        M      : 'Ð¼ÐµÑÐµÑ',
        MM     : translator$1.translate,
        y      : 'Ð³Ð¾Ð´Ð¸Ð½Ñ',
        yy     : translator$1.translate
    },
    ordinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Serbian [sr]
//! author : Milan JanaÄkoviÄ<milanjanackovic@gmail.com> : https://github.com/milan-j

var translator$2 = {
    words: { //Different grammatical cases
        m: ['jedan minut', 'jedne minute'],
        mm: ['minut', 'minute', 'minuta'],
        h: ['jedan sat', 'jednog sata'],
        hh: ['sat', 'sata', 'sati'],
        dd: ['dan', 'dana', 'dana'],
        MM: ['mesec', 'meseca', 'meseci'],
        yy: ['godina', 'godine', 'godina']
    },
    correctGrammaticalCase: function (number, wordKey) {
        return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
    },
    translate: function (number, withoutSuffix, key) {
        var wordKey = translator$2.words[key];
        if (key.length === 1) {
            return withoutSuffix ? wordKey[0] : wordKey[1];
        } else {
            return number + ' ' + translator$2.correctGrammaticalCase(number, wordKey);
        }
    }
};

hooks.defineLocale('sr', {
    months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split('_'),
    monthsShort: 'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
    monthsParseExact: true,
    weekdays: 'nedelja_ponedeljak_utorak_sreda_Äetvrtak_petak_subota'.split('_'),
    weekdaysShort: 'ned._pon._uto._sre._Äet._pet._sub.'.split('_'),
    weekdaysMin: 'ne_po_ut_sr_Äe_pe_su'.split('_'),
    weekdaysParseExact : true,
    longDateFormat: {
        LT: 'H:mm',
        LTS : 'H:mm:ss',
        L: 'DD.MM.YYYY',
        LL: 'D. MMMM YYYY',
        LLL: 'D. MMMM YYYY H:mm',
        LLLL: 'dddd, D. MMMM YYYY H:mm'
    },
    calendar: {
        sameDay: '[danas u] LT',
        nextDay: '[sutra u] LT',
        nextWeek: function () {
            switch (this.day()) {
                case 0:
                    return '[u] [nedelju] [u] LT';
                case 3:
                    return '[u] [sredu] [u] LT';
                case 6:
                    return '[u] [subotu] [u] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[u] dddd [u] LT';
            }
        },
        lastDay  : '[juÄe u] LT',
        lastWeek : function () {
            var lastWeekDays = [
                '[proÅ¡le] [nedelje] [u] LT',
                '[proÅ¡log] [ponedeljka] [u] LT',
                '[proÅ¡log] [utorka] [u] LT',
                '[proÅ¡le] [srede] [u] LT',
                '[proÅ¡log] [Äetvrtka] [u] LT',
                '[proÅ¡log] [petka] [u] LT',
                '[proÅ¡le] [subote] [u] LT'
            ];
            return lastWeekDays[this.day()];
        },
        sameElse : 'L'
    },
    relativeTime : {
        future : 'za %s',
        past   : 'pre %s',
        s      : 'nekoliko sekundi',
        m      : translator$2.translate,
        mm     : translator$2.translate,
        h      : translator$2.translate,
        hh     : translator$2.translate,
        d      : 'dan',
        dd     : translator$2.translate,
        M      : 'mesec',
        MM     : translator$2.translate,
        y      : 'godinu',
        yy     : translator$2.translate
    },
    ordinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : siSwati [ss]
//! author : Nicolai Davies<mail@nicolai.io> : https://github.com/nicolaidavies


hooks.defineLocale('ss', {
    months : "Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split('_'),
    monthsShort : 'Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo'.split('_'),
    weekdays : 'Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo'.split('_'),
    weekdaysShort : 'Lis_Umb_Lsb_Les_Lsi_Lsh_Umg'.split('_'),
    weekdaysMin : 'Li_Us_Lb_Lt_Ls_Lh_Ug'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'h:mm A',
        LTS : 'h:mm:ss A',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY h:mm A',
        LLLL : 'dddd, D MMMM YYYY h:mm A'
    },
    calendar : {
        sameDay : '[Namuhla nga] LT',
        nextDay : '[Kusasa nga] LT',
        nextWeek : 'dddd [nga] LT',
        lastDay : '[Itolo nga] LT',
        lastWeek : 'dddd [leliphelile] [nga] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'nga %s',
        past : 'wenteka nga %s',
        s : 'emizuzwana lomcane',
        m : 'umzuzu',
        mm : '%d emizuzu',
        h : 'lihora',
        hh : '%d emahora',
        d : 'lilanga',
        dd : '%d emalanga',
        M : 'inyanga',
        MM : '%d tinyanga',
        y : 'umnyaka',
        yy : '%d iminyaka'
    },
    meridiemParse: /ekuseni|emini|entsambama|ebusuku/,
    meridiem : function (hours, minutes, isLower) {
        if (hours < 11) {
            return 'ekuseni';
        } else if (hours < 15) {
            return 'emini';
        } else if (hours < 19) {
            return 'entsambama';
        } else {
            return 'ebusuku';
        }
    },
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === 'ekuseni') {
            return hour;
        } else if (meridiem === 'emini') {
            return hour >= 11 ? hour : hour + 12;
        } else if (meridiem === 'entsambama' || meridiem === 'ebusuku') {
            if (hour === 0) {
                return 0;
            }
            return hour + 12;
        }
    },
    ordinalParse: /\d{1,2}/,
    ordinal : '%d',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Swedish [sv]
//! author : Jens Alm : https://github.com/ulmus

hooks.defineLocale('sv', {
    months : 'januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december'.split('_'),
    monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
    weekdays : 'sÃ¶ndag_mÃ¥ndag_tisdag_onsdag_torsdag_fredag_lÃ¶rdag'.split('_'),
    weekdaysShort : 'sÃ¶n_mÃ¥n_tis_ons_tor_fre_lÃ¶r'.split('_'),
    weekdaysMin : 'sÃ¶_mÃ¥_ti_on_to_fr_lÃ¶'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'YYYY-MM-DD',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY [kl.] HH:mm',
        LLLL : 'dddd D MMMM YYYY [kl.] HH:mm',
        lll : 'D MMM YYYY HH:mm',
        llll : 'ddd D MMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[Idag] LT',
        nextDay: '[Imorgon] LT',
        lastDay: '[IgÃ¥r] LT',
        nextWeek: '[PÃ¥] dddd LT',
        lastWeek: '[I] dddd[s] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'om %s',
        past : 'fÃ¶r %s sedan',
        s : 'nÃ¥gra sekunder',
        m : 'en minut',
        mm : '%d minuter',
        h : 'en timme',
        hh : '%d timmar',
        d : 'en dag',
        dd : '%d dagar',
        M : 'en mÃ¥nad',
        MM : '%d mÃ¥nader',
        y : 'ett Ã¥r',
        yy : '%d Ã¥r'
    },
    ordinalParse: /\d{1,2}(e|a)/,
    ordinal : function (number) {
        var b = number % 10,
            output = (~~(number % 100 / 10) === 1) ? 'e' :
            (b === 1) ? 'a' :
            (b === 2) ? 'a' :
            (b === 3) ? 'e' : 'e';
        return number + output;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Swahili [sw]
//! author : Fahad Kassim : https://github.com/fadsel

hooks.defineLocale('sw', {
    months : 'Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba'.split('_'),
    monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des'.split('_'),
    weekdays : 'Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi'.split('_'),
    weekdaysShort : 'Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos'.split('_'),
    weekdaysMin : 'J2_J3_J4_J5_Al_Ij_J1'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[leo saa] LT',
        nextDay : '[kesho saa] LT',
        nextWeek : '[wiki ijayo] dddd [saat] LT',
        lastDay : '[jana] LT',
        lastWeek : '[wiki iliyopita] dddd [saat] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s baadaye',
        past : 'tokea %s',
        s : 'hivi punde',
        m : 'dakika moja',
        mm : 'dakika %d',
        h : 'saa limoja',
        hh : 'masaa %d',
        d : 'siku moja',
        dd : 'masiku %d',
        M : 'mwezi mmoja',
        MM : 'miezi %d',
        y : 'mwaka mmoja',
        yy : 'miaka %d'
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Tamil [ta]
//! author : Arjunkumar Krishnamoorthy : https://github.com/tk120404

var symbolMap$11 = {
    '1': 'à¯§',
    '2': 'à¯¨',
    '3': 'à¯©',
    '4': 'à¯ª',
    '5': 'à¯«',
    '6': 'à¯¬',
    '7': 'à¯­',
    '8': 'à¯®',
    '9': 'à¯¯',
    '0': 'à¯¦'
};
var numberMap$10 = {
    'à¯§': '1',
    'à¯¨': '2',
    'à¯©': '3',
    'à¯ª': '4',
    'à¯«': '5',
    'à¯¬': '6',
    'à¯­': '7',
    'à¯®': '8',
    'à¯¯': '9',
    'à¯¦': '0'
};

hooks.defineLocale('ta', {
    months : 'à®à®©à®µà®°à®¿_à®ªà®¿à®ªà¯à®°à®µà®°à®¿_à®®à®¾à®°à¯à®à¯_à®à®ªà¯à®°à®²à¯_à®®à¯_à®à¯à®©à¯_à®à¯à®²à¯_à®à®à®¸à¯à®à¯_à®à¯à®ªà¯à®à¯à®®à¯à®ªà®°à¯_à®à®à¯à®à¯à®¾à®ªà®°à¯_à®¨à®µà®®à¯à®ªà®°à¯_à®à®¿à®à®®à¯à®ªà®°à¯'.split('_'),
    monthsShort : 'à®à®©à®µà®°à®¿_à®ªà®¿à®ªà¯à®°à®µà®°à®¿_à®®à®¾à®°à¯à®à¯_à®à®ªà¯à®°à®²à¯_à®®à¯_à®à¯à®©à¯_à®à¯à®²à¯_à®à®à®¸à¯à®à¯_à®à¯à®ªà¯à®à¯à®®à¯à®ªà®°à¯_à®à®à¯à®à¯à®¾à®ªà®°à¯_à®¨à®µà®®à¯à®ªà®°à¯_à®à®¿à®à®®à¯à®ªà®°à¯'.split('_'),
    weekdays : 'à®à®¾à®¯à®¿à®±à¯à®±à¯à®à¯à®à®¿à®´à®®à¯_à®¤à®¿à®à¯à®à®à¯à®à®¿à®´à®®à¯_à®à¯à®µà¯à®µà®¾à®¯à¯à®à®¿à®´à®®à¯_à®ªà¯à®¤à®©à¯à®à®¿à®´à®®à¯_à®µà®¿à®¯à®¾à®´à®à¯à®à®¿à®´à®®à¯_à®µà¯à®³à¯à®³à®¿à®à¯à®à®¿à®´à®®à¯_à®à®©à®¿à®à¯à®à®¿à®´à®®à¯'.split('_'),
    weekdaysShort : 'à®à®¾à®¯à®¿à®±à¯_à®¤à®¿à®à¯à®à®³à¯_à®à¯à®µà¯à®µà®¾à®¯à¯_à®ªà¯à®¤à®©à¯_à®µà®¿à®¯à®¾à®´à®©à¯_à®µà¯à®³à¯à®³à®¿_à®à®©à®¿'.split('_'),
    weekdaysMin : 'à®à®¾_à®¤à®¿_à®à¯_à®ªà¯_à®µà®¿_à®µà¯_à®'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY, HH:mm',
        LLLL : 'dddd, D MMMM YYYY, HH:mm'
    },
    calendar : {
        sameDay : '[à®à®©à¯à®±à¯] LT',
        nextDay : '[à®¨à®¾à®³à¯] LT',
        nextWeek : 'dddd, LT',
        lastDay : '[à®¨à¯à®±à¯à®±à¯] LT',
        lastWeek : '[à®à®à®¨à¯à®¤ à®µà®¾à®°à®®à¯] dddd, LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s à®à®²à¯',
        past : '%s à®®à¯à®©à¯',
        s : 'à®à®°à¯ à®à®¿à®² à®µà®¿à®¨à®¾à®à®¿à®à®³à¯',
        m : 'à®à®°à¯ à®¨à®¿à®®à®¿à®à®®à¯',
        mm : '%d à®¨à®¿à®®à®¿à®à®à¯à®à®³à¯',
        h : 'à®à®°à¯ à®®à®£à®¿ à®¨à¯à®°à®®à¯',
        hh : '%d à®®à®£à®¿ à®¨à¯à®°à®®à¯',
        d : 'à®à®°à¯ à®¨à®¾à®³à¯',
        dd : '%d à®¨à®¾à®à¯à®à®³à¯',
        M : 'à®à®°à¯ à®®à®¾à®¤à®®à¯',
        MM : '%d à®®à®¾à®¤à®à¯à®à®³à¯',
        y : 'à®à®°à¯ à®µà®°à¯à®à®®à¯',
        yy : '%d à®à®£à¯à®à¯à®à®³à¯'
    },
    ordinalParse: /\d{1,2}à®µà®¤à¯/,
    ordinal : function (number) {
        return number + 'à®µà®¤à¯';
    },
    preparse: function (string) {
        return string.replace(/[à¯§à¯¨à¯©à¯ªà¯«à¯¬à¯­à¯®à¯¯à¯¦]/g, function (match) {
            return numberMap$10[match];
        });
    },
    postformat: function (string) {
        return string.replace(/\d/g, function (match) {
            return symbolMap$11[match];
        });
    },
    // refer http://ta.wikipedia.org/s/1er1
    meridiemParse: /à®¯à®¾à®®à®®à¯|à®µà¯à®à®±à¯|à®à®¾à®²à¯|à®¨à®£à¯à®ªà®à®²à¯|à®à®±à¯à®ªà®¾à®à¯|à®®à®¾à®²à¯/,
    meridiem : function (hour, minute, isLower) {
        if (hour < 2) {
            return ' à®¯à®¾à®®à®®à¯';
        } else if (hour < 6) {
            return ' à®µà¯à®à®±à¯';  // à®µà¯à®à®±à¯
        } else if (hour < 10) {
            return ' à®à®¾à®²à¯'; // à®à®¾à®²à¯
        } else if (hour < 14) {
            return ' à®¨à®£à¯à®ªà®à®²à¯'; // à®¨à®£à¯à®ªà®à®²à¯
        } else if (hour < 18) {
            return ' à®à®±à¯à®ªà®¾à®à¯'; // à®à®±à¯à®ªà®¾à®à¯
        } else if (hour < 22) {
            return ' à®®à®¾à®²à¯'; // à®®à®¾à®²à¯
        } else {
            return ' à®¯à®¾à®®à®®à¯';
        }
    },
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === 'à®¯à®¾à®®à®®à¯') {
            return hour < 2 ? hour : hour + 12;
        } else if (meridiem === 'à®µà¯à®à®±à¯' || meridiem === 'à®à®¾à®²à¯') {
            return hour;
        } else if (meridiem === 'à®¨à®£à¯à®ªà®à®²à¯') {
            return hour >= 10 ? hour : hour + 12;
        } else {
            return hour + 12;
        }
    },
    week : {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 1st is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Telugu [te]
//! author : Krishna Chaitanya Thota : https://github.com/kcthota

hooks.defineLocale('te', {
    months : 'à°à°¨à°µà°°à°¿_à°«à°¿à°¬à±à°°à°µà°°à°¿_à°®à°¾à°°à±à°à°¿_à°à°ªà±à°°à°¿à°²à±_à°®à±_à°à±à°¨à±_à°à±à°²à±à±_à°à°à°¸à±à°à±_à°¸à±à°ªà±à°à±à°à°¬à°°à±_à°à°à±à°à±à°¬à°°à±_à°¨à°µà°à°¬à°°à±_à°¡à°¿à°¸à±à°à°¬à°°à±'.split('_'),
    monthsShort : 'à°à°¨._à°«à°¿à°¬à±à°°._à°®à°¾à°°à±à°à°¿_à°à°ªà±à°°à°¿._à°®à±_à°à±à°¨à±_à°à±à°²à±à±_à°à°._à°¸à±à°ªà±._à°à°à±à°à±._à°¨à°µ._à°¡à°¿à°¸à±.'.split('_'),
    monthsParseExact : true,
    weekdays : 'à°à°¦à°¿à°µà°¾à°°à°_à°¸à±à°®à°µà°¾à°°à°_à°®à°à°à°³à°µà°¾à°°à°_à°¬à±à°§à°µà°¾à°°à°_à°à±à°°à±à°µà°¾à°°à°_à°¶à±à°à±à°°à°µà°¾à°°à°_à°¶à°¨à°¿à°µà°¾à°°à°'.split('_'),
    weekdaysShort : 'à°à°¦à°¿_à°¸à±à°®_à°®à°à°à°³_à°¬à±à°§_à°à±à°°à±_à°¶à±à°à±à°°_à°¶à°¨à°¿'.split('_'),
    weekdaysMin : 'à°_à°¸à±_à°®à°_à°¬à±_à°à±_à°¶à±_à°¶'.split('_'),
    longDateFormat : {
        LT : 'A h:mm',
        LTS : 'A h:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY, A h:mm',
        LLLL : 'dddd, D MMMM YYYY, A h:mm'
    },
    calendar : {
        sameDay : '[à°¨à±à°¡à±] LT',
        nextDay : '[à°°à±à°ªà±] LT',
        nextWeek : 'dddd, LT',
        lastDay : '[à°¨à°¿à°¨à±à°¨] LT',
        lastWeek : '[à°à°¤] dddd, LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s à°²à±',
        past : '%s à°à±à°°à°¿à°¤à°',
        s : 'à°à±à°¨à±à°¨à°¿ à°à±à°·à°£à°¾à°²à±',
        m : 'à°à° à°¨à°¿à°®à°¿à°·à°',
        mm : '%d à°¨à°¿à°®à°¿à°·à°¾à°²à±',
        h : 'à°à° à°à°à°',
        hh : '%d à°à°à°à°²à±',
        d : 'à°à° à°°à±à°à±',
        dd : '%d à°°à±à°à±à°²à±',
        M : 'à°à° à°¨à±à°²',
        MM : '%d à°¨à±à°²à°²à±',
        y : 'à°à° à°¸à°à°µà°¤à±à°¸à°°à°',
        yy : '%d à°¸à°à°µà°¤à±à°¸à°°à°¾à°²à±'
    },
    ordinalParse : /\d{1,2}à°µ/,
    ordinal : '%dà°µ',
    meridiemParse: /à°°à°¾à°¤à±à°°à°¿|à°à°¦à°¯à°|à°®à°§à±à°¯à°¾à°¹à±à°¨à°|à°¸à°¾à°¯à°à°¤à±à°°à°/,
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === 'à°°à°¾à°¤à±à°°à°¿') {
            return hour < 4 ? hour : hour + 12;
        } else if (meridiem === 'à°à°¦à°¯à°') {
            return hour;
        } else if (meridiem === 'à°®à°§à±à°¯à°¾à°¹à±à°¨à°') {
            return hour >= 10 ? hour : hour + 12;
        } else if (meridiem === 'à°¸à°¾à°¯à°à°¤à±à°°à°') {
            return hour + 12;
        }
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 4) {
            return 'à°°à°¾à°¤à±à°°à°¿';
        } else if (hour < 10) {
            return 'à°à°¦à°¯à°';
        } else if (hour < 17) {
            return 'à°®à°§à±à°¯à°¾à°¹à±à°¨à°';
        } else if (hour < 20) {
            return 'à°¸à°¾à°¯à°à°¤à±à°°à°';
        } else {
            return 'à°°à°¾à°¤à±à°°à°¿';
        }
    },
    week : {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 1st is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Tetun Dili (East Timor) [tet]
//! author : Joshua Brooks : https://github.com/joshbrooks
//! author : Onorio De J. Afonso : https://github.com/marobo

hooks.defineLocale('tet', {
    months : 'Janeiru_Fevereiru_Marsu_Abril_Maiu_Juniu_Juliu_Augustu_Setembru_Outubru_Novembru_Dezembru'.split('_'),
    monthsShort : 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Aug_Set_Out_Nov_Dez'.split('_'),
    weekdays : 'Domingu_Segunda_Tersa_Kuarta_Kinta_Sexta_Sabadu'.split('_'),
    weekdaysShort : 'Dom_Seg_Ters_Kua_Kint_Sext_Sab'.split('_'),
    weekdaysMin : 'Do_Seg_Te_Ku_Ki_Sex_Sa'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[Ohin iha] LT',
        nextDay: '[Aban iha] LT',
        nextWeek: 'dddd [iha] LT',
        lastDay: '[Horiseik iha] LT',
        lastWeek: 'dddd [semana kotuk] [iha] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'iha %s',
        past : '%s liuba',
        s : 'minutu balun',
        m : 'minutu ida',
        mm : 'minutus %d',
        h : 'horas ida',
        hh : 'horas %d',
        d : 'loron ida',
        dd : 'loron %d',
        M : 'fulan ida',
        MM : 'fulan %d',
        y : 'tinan ida',
        yy : 'tinan %d'
    },
    ordinalParse: /\d{1,2}(st|nd|rd|th)/,
    ordinal : function (number) {
        var b = number % 10,
            output = (~~(number % 100 / 10) === 1) ? 'th' :
            (b === 1) ? 'st' :
            (b === 2) ? 'nd' :
            (b === 3) ? 'rd' : 'th';
        return number + output;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Thai [th]
//! author : Kridsada Thanabulpong : https://github.com/sirn

hooks.defineLocale('th', {
    months : 'à¸¡à¸à¸£à¸²à¸à¸¡_à¸à¸¸à¸¡à¸ à¸²à¸à¸±à¸à¸à¹_à¸¡à¸µà¸à¸²à¸à¸¡_à¹à¸¡à¸©à¸²à¸¢à¸_à¸à¸¤à¸©à¸ à¸²à¸à¸¡_à¸¡à¸´à¸à¸¸à¸à¸²à¸¢à¸_à¸à¸£à¸à¸à¸²à¸à¸¡_à¸ªà¸´à¸à¸«à¸²à¸à¸¡_à¸à¸±à¸à¸¢à¸²à¸¢à¸_à¸à¸¸à¸¥à¸²à¸à¸¡_à¸à¸¤à¸¨à¸à¸´à¸à¸²à¸¢à¸_à¸à¸±à¸à¸§à¸²à¸à¸¡'.split('_'),
    monthsShort : 'à¸¡.à¸._à¸.à¸._à¸¡à¸µ.à¸._à¹à¸¡.à¸¢._à¸.à¸._à¸¡à¸´.à¸¢._à¸.à¸._à¸ª.à¸._à¸.à¸¢._à¸.à¸._à¸.à¸¢._à¸.à¸.'.split('_'),
    monthsParseExact: true,
    weekdays : 'à¸­à¸²à¸à¸´à¸à¸¢à¹_à¸à¸±à¸à¸à¸£à¹_à¸­à¸±à¸à¸à¸²à¸£_à¸à¸¸à¸_à¸à¸¤à¸«à¸±à¸ªà¸à¸à¸µ_à¸¨à¸¸à¸à¸£à¹_à¹à¸ªà¸²à¸£à¹'.split('_'),
    weekdaysShort : 'à¸­à¸²à¸à¸´à¸à¸¢à¹_à¸à¸±à¸à¸à¸£à¹_à¸­à¸±à¸à¸à¸²à¸£_à¸à¸¸à¸_à¸à¸¤à¸«à¸±à¸ª_à¸¨à¸¸à¸à¸£à¹_à¹à¸ªà¸²à¸£à¹'.split('_'), // yes, three characters difference
    weekdaysMin : 'à¸­à¸²._à¸._à¸­._à¸._à¸à¸¤._à¸¨._à¸ª.'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'H:mm',
        LTS : 'H:mm:ss',
        L : 'YYYY/MM/DD',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY à¹à¸§à¸¥à¸² H:mm',
        LLLL : 'à¸§à¸±à¸ddddà¸à¸µà¹ D MMMM YYYY à¹à¸§à¸¥à¸² H:mm'
    },
    meridiemParse: /à¸à¹à¸­à¸à¹à¸à¸µà¹à¸¢à¸|à¸«à¸¥à¸±à¸à¹à¸à¸µà¹à¸¢à¸/,
    isPM: function (input) {
        return input === 'à¸«à¸¥à¸±à¸à¹à¸à¸µà¹à¸¢à¸';
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 12) {
            return 'à¸à¹à¸­à¸à¹à¸à¸µà¹à¸¢à¸';
        } else {
            return 'à¸«à¸¥à¸±à¸à¹à¸à¸µà¹à¸¢à¸';
        }
    },
    calendar : {
        sameDay : '[à¸§à¸±à¸à¸à¸µà¹ à¹à¸§à¸¥à¸²] LT',
        nextDay : '[à¸à¸£à¸¸à¹à¸à¸à¸µà¹ à¹à¸§à¸¥à¸²] LT',
        nextWeek : 'dddd[à¸«à¸à¹à¸² à¹à¸§à¸¥à¸²] LT',
        lastDay : '[à¹à¸¡à¸·à¹à¸­à¸§à¸²à¸à¸à¸µà¹ à¹à¸§à¸¥à¸²] LT',
        lastWeek : '[à¸§à¸±à¸]dddd[à¸à¸µà¹à¹à¸¥à¹à¸§ à¹à¸§à¸¥à¸²] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'à¸­à¸µà¸ %s',
        past : '%sà¸à¸µà¹à¹à¸¥à¹à¸§',
        s : 'à¹à¸¡à¹à¸à¸µà¹à¸§à¸´à¸à¸²à¸à¸µ',
        m : '1 à¸à¸²à¸à¸µ',
        mm : '%d à¸à¸²à¸à¸µ',
        h : '1 à¸à¸±à¹à¸§à¹à¸¡à¸',
        hh : '%d à¸à¸±à¹à¸§à¹à¸¡à¸',
        d : '1 à¸§à¸±à¸',
        dd : '%d à¸§à¸±à¸',
        M : '1 à¹à¸à¸·à¸­à¸',
        MM : '%d à¹à¸à¸·à¸­à¸',
        y : '1 à¸à¸µ',
        yy : '%d à¸à¸µ'
    }
});

//! moment.js locale configuration
//! locale : Tagalog (Philippines) [tl-ph]
//! author : Dan Hagman : https://github.com/hagmandan

hooks.defineLocale('tl-ph', {
    months : 'Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre'.split('_'),
    monthsShort : 'Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis'.split('_'),
    weekdays : 'Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado'.split('_'),
    weekdaysShort : 'Lin_Lun_Mar_Miy_Huw_Biy_Sab'.split('_'),
    weekdaysMin : 'Li_Lu_Ma_Mi_Hu_Bi_Sab'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'MM/D/YYYY',
        LL : 'MMMM D, YYYY',
        LLL : 'MMMM D, YYYY HH:mm',
        LLLL : 'dddd, MMMM DD, YYYY HH:mm'
    },
    calendar : {
        sameDay: 'LT [ngayong araw]',
        nextDay: '[Bukas ng] LT',
        nextWeek: 'LT [sa susunod na] dddd',
        lastDay: 'LT [kahapon]',
        lastWeek: 'LT [noong nakaraang] dddd',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'sa loob ng %s',
        past : '%s ang nakalipas',
        s : 'ilang segundo',
        m : 'isang minuto',
        mm : '%d minuto',
        h : 'isang oras',
        hh : '%d oras',
        d : 'isang araw',
        dd : '%d araw',
        M : 'isang buwan',
        MM : '%d buwan',
        y : 'isang taon',
        yy : '%d taon'
    },
    ordinalParse: /\d{1,2}/,
    ordinal : function (number) {
        return number;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Klingon [tlh]
//! author : Dominika Kruk : https://github.com/amaranthrose

var numbersNouns = 'pagh_waâ_chaâ_wej_loS_vagh_jav_Soch_chorgh_Hut'.split('_');

function translateFuture(output) {
    var time = output;
    time = (output.indexOf('jaj') !== -1) ?
    time.slice(0, -3) + 'leS' :
    (output.indexOf('jar') !== -1) ?
    time.slice(0, -3) + 'waQ' :
    (output.indexOf('DIS') !== -1) ?
    time.slice(0, -3) + 'nem' :
    time + ' pIq';
    return time;
}

function translatePast(output) {
    var time = output;
    time = (output.indexOf('jaj') !== -1) ?
    time.slice(0, -3) + 'Huâ' :
    (output.indexOf('jar') !== -1) ?
    time.slice(0, -3) + 'wen' :
    (output.indexOf('DIS') !== -1) ?
    time.slice(0, -3) + 'ben' :
    time + ' ret';
    return time;
}

function translate$9(number, withoutSuffix, string, isFuture) {
    var numberNoun = numberAsNoun(number);
    switch (string) {
        case 'mm':
            return numberNoun + ' tup';
        case 'hh':
            return numberNoun + ' rep';
        case 'dd':
            return numberNoun + ' jaj';
        case 'MM':
            return numberNoun + ' jar';
        case 'yy':
            return numberNoun + ' DIS';
    }
}

function numberAsNoun(number) {
    var hundred = Math.floor((number % 1000) / 100),
    ten = Math.floor((number % 100) / 10),
    one = number % 10,
    word = '';
    if (hundred > 0) {
        word += numbersNouns[hundred] + 'vatlh';
    }
    if (ten > 0) {
        word += ((word !== '') ? ' ' : '') + numbersNouns[ten] + 'maH';
    }
    if (one > 0) {
        word += ((word !== '') ? ' ' : '') + numbersNouns[one];
    }
    return (word === '') ? 'pagh' : word;
}

hooks.defineLocale('tlh', {
    months : 'teraâ jar waâ_teraâ jar chaâ_teraâ jar wej_teraâ jar loS_teraâ jar vagh_teraâ jar jav_teraâ jar Soch_teraâ jar chorgh_teraâ jar Hut_teraâ jar waâmaH_teraâ jar waâmaH waâ_teraâ jar waâmaH chaâ'.split('_'),
    monthsShort : 'jar waâ_jar chaâ_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar waâmaH_jar waâmaH waâ_jar waâmaH chaâ'.split('_'),
    monthsParseExact : true,
    weekdays : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
    weekdaysShort : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
    weekdaysMin : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[DaHjaj] LT',
        nextDay: '[waâleS] LT',
        nextWeek: 'LLL',
        lastDay: '[waâHuâ] LT',
        lastWeek: 'LLL',
        sameElse: 'L'
    },
    relativeTime : {
        future : translateFuture,
        past : translatePast,
        s : 'puS lup',
        m : 'waâ tup',
        mm : translate$9,
        h : 'waâ rep',
        hh : translate$9,
        d : 'waâ jaj',
        dd : translate$9,
        M : 'waâ jar',
        MM : translate$9,
        y : 'waâ DIS',
        yy : translate$9
    },
    ordinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Turkish [tr]
//! authors : Erhan Gundogan : https://github.com/erhangundogan,
//!           Burak YiÄit Kaya: https://github.com/BYK

var suffixes$3 = {
    1: '\'inci',
    5: '\'inci',
    8: '\'inci',
    70: '\'inci',
    80: '\'inci',
    2: '\'nci',
    7: '\'nci',
    20: '\'nci',
    50: '\'nci',
    3: '\'Ã¼ncÃ¼',
    4: '\'Ã¼ncÃ¼',
    100: '\'Ã¼ncÃ¼',
    6: '\'ncÄ±',
    9: '\'uncu',
    10: '\'uncu',
    30: '\'uncu',
    60: '\'Ä±ncÄ±',
    90: '\'Ä±ncÄ±'
};

hooks.defineLocale('tr', {
    months : 'Ocak_Åubat_Mart_Nisan_MayÄ±s_Haziran_Temmuz_AÄustos_EylÃ¼l_Ekim_KasÄ±m_AralÄ±k'.split('_'),
    monthsShort : 'Oca_Åub_Mar_Nis_May_Haz_Tem_AÄu_Eyl_Eki_Kas_Ara'.split('_'),
    weekdays : 'Pazar_Pazartesi_SalÄ±_ÃarÅamba_PerÅembe_Cuma_Cumartesi'.split('_'),
    weekdaysShort : 'Paz_Pts_Sal_Ãar_Per_Cum_Cts'.split('_'),
    weekdaysMin : 'Pz_Pt_Sa_Ãa_Pe_Cu_Ct'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[bugÃ¼n saat] LT',
        nextDay : '[yarÄ±n saat] LT',
        nextWeek : '[haftaya] dddd [saat] LT',
        lastDay : '[dÃ¼n] LT',
        lastWeek : '[geÃ§en hafta] dddd [saat] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : '%s sonra',
        past : '%s Ã¶nce',
        s : 'birkaÃ§ saniye',
        m : 'bir dakika',
        mm : '%d dakika',
        h : 'bir saat',
        hh : '%d saat',
        d : 'bir gÃ¼n',
        dd : '%d gÃ¼n',
        M : 'bir ay',
        MM : '%d ay',
        y : 'bir yÄ±l',
        yy : '%d yÄ±l'
    },
    ordinalParse: /\d{1,2}'(inci|nci|Ã¼ncÃ¼|ncÄ±|uncu|Ä±ncÄ±)/,
    ordinal : function (number) {
        if (number === 0) {  // special case for zero
            return number + '\'Ä±ncÄ±';
        }
        var a = number % 10,
            b = number % 100 - a,
            c = number >= 100 ? 100 : null;
        return number + (suffixes$3[a] || suffixes$3[b] || suffixes$3[c]);
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Talossan [tzl]
//! author : Robin van der Vliet : https://github.com/robin0van0der0v
//! author : IustÃ¬ Canun

// After the year there should be a slash and the amount of years since December 26, 1979 in Roman numerals.
// This is currently too difficult (maybe even impossible) to add.
hooks.defineLocale('tzl', {
    months : 'Januar_Fevraglh_MarÃ§_AvrÃ¯u_Mai_GÃ¼n_Julia_Guscht_Setemvar_ListopÃ¤ts_Noemvar_Zecemvar'.split('_'),
    monthsShort : 'Jan_Fev_Mar_Avr_Mai_GÃ¼n_Jul_Gus_Set_Lis_Noe_Zec'.split('_'),
    weekdays : 'SÃºladi_LÃºneÃ§i_Maitzi_MÃ¡rcuri_XhÃºadi_ViÃ©nerÃ§i_SÃ¡turi'.split('_'),
    weekdaysShort : 'SÃºl_LÃºn_Mai_MÃ¡r_XhÃº_ViÃ©_SÃ¡t'.split('_'),
    weekdaysMin : 'SÃº_LÃº_Ma_MÃ¡_Xh_Vi_SÃ¡'.split('_'),
    longDateFormat : {
        LT : 'HH.mm',
        LTS : 'HH.mm.ss',
        L : 'DD.MM.YYYY',
        LL : 'D. MMMM [dallas] YYYY',
        LLL : 'D. MMMM [dallas] YYYY HH.mm',
        LLLL : 'dddd, [li] D. MMMM [dallas] YYYY HH.mm'
    },
    meridiemParse: /d\'o|d\'a/i,
    isPM : function (input) {
        return 'd\'o' === input.toLowerCase();
    },
    meridiem : function (hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'd\'o' : 'D\'O';
        } else {
            return isLower ? 'd\'a' : 'D\'A';
        }
    },
    calendar : {
        sameDay : '[oxhi Ã ] LT',
        nextDay : '[demÃ  Ã ] LT',
        nextWeek : 'dddd [Ã ] LT',
        lastDay : '[ieiri Ã ] LT',
        lastWeek : '[sÃ¼r el] dddd [lasteu Ã ] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'osprei %s',
        past : 'ja%s',
        s : processRelativeTime$5,
        m : processRelativeTime$5,
        mm : processRelativeTime$5,
        h : processRelativeTime$5,
        hh : processRelativeTime$5,
        d : processRelativeTime$5,
        dd : processRelativeTime$5,
        M : processRelativeTime$5,
        MM : processRelativeTime$5,
        y : processRelativeTime$5,
        yy : processRelativeTime$5
    },
    ordinalParse: /\d{1,2}\./,
    ordinal : '%d.',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

function processRelativeTime$5(number, withoutSuffix, key, isFuture) {
    var format = {
        's': ['viensas secunds', '\'iensas secunds'],
        'm': ['\'n mÃ­ut', '\'iens mÃ­ut'],
        'mm': [number + ' mÃ­uts', '' + number + ' mÃ­uts'],
        'h': ['\'n Ã¾ora', '\'iensa Ã¾ora'],
        'hh': [number + ' Ã¾oras', '' + number + ' Ã¾oras'],
        'd': ['\'n ziua', '\'iensa ziua'],
        'dd': [number + ' ziuas', '' + number + ' ziuas'],
        'M': ['\'n mes', '\'iens mes'],
        'MM': [number + ' mesen', '' + number + ' mesen'],
        'y': ['\'n ar', '\'iens ar'],
        'yy': [number + ' ars', '' + number + ' ars']
    };
    return isFuture ? format[key][0] : (withoutSuffix ? format[key][0] : format[key][1]);
}

//! moment.js locale configuration
//! locale : Central Atlas Tamazight Latin [tzm-latn]
//! author : Abdel Said : https://github.com/abdelsaid

hooks.defineLocale('tzm-latn', {
    months : 'innayr_brË¤ayrË¤_marË¤sË¤_ibrir_mayyw_ywnyw_ywlywz_É£wÅ¡t_Å¡wtanbir_ktË¤wbrË¤_nwwanbir_dwjnbir'.split('_'),
    monthsShort : 'innayr_brË¤ayrË¤_marË¤sË¤_ibrir_mayyw_ywnyw_ywlywz_É£wÅ¡t_Å¡wtanbir_ktË¤wbrË¤_nwwanbir_dwjnbir'.split('_'),
    weekdays : 'asamas_aynas_asinas_akras_akwas_asimwas_asiá¸yas'.split('_'),
    weekdaysShort : 'asamas_aynas_asinas_akras_akwas_asimwas_asiá¸yas'.split('_'),
    weekdaysMin : 'asamas_aynas_asinas_akras_akwas_asimwas_asiá¸yas'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[asdkh g] LT',
        nextDay: '[aska g] LT',
        nextWeek: 'dddd [g] LT',
        lastDay: '[assant g] LT',
        lastWeek: 'dddd [g] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'dadkh s yan %s',
        past : 'yan %s',
        s : 'imik',
        m : 'minuá¸',
        mm : '%d minuá¸',
        h : 'saÉa',
        hh : '%d tassaÉin',
        d : 'ass',
        dd : '%d ossan',
        M : 'ayowr',
        MM : '%d iyyirn',
        y : 'asgas',
        yy : '%d isgasn'
    },
    week : {
        dow : 6, // Saturday is the first day of the week.
        doy : 12  // The week that contains Jan 1st is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Central Atlas Tamazight [tzm]
//! author : Abdel Said : https://github.com/abdelsaid

hooks.defineLocale('tzm', {
    months : 'âµâµâµâ´°âµ¢âµ_â´±âµâ´°âµ¢âµ_âµâ´°âµâµ_âµâ´±âµâµâµ_âµâ´°âµ¢âµ¢âµ_âµ¢âµâµâµ¢âµ_âµ¢âµâµâµ¢âµâµ£_âµâµâµâµ_âµâµâµâ´°âµâ´±âµâµ_â´½âµâµâ´±âµ_âµâµâµ¡â´°âµâ´±âµâµ_â´·âµâµâµâ´±âµâµ'.split('_'),
    monthsShort : 'âµâµâµâ´°âµ¢âµ_â´±âµâ´°âµ¢âµ_âµâ´°âµâµ_âµâ´±âµâµâµ_âµâ´°âµ¢âµ¢âµ_âµ¢âµâµâµ¢âµ_âµ¢âµâµâµ¢âµâµ£_âµâµâµâµ_âµâµâµâ´°âµâ´±âµâµ_â´½âµâµâ´±âµ_âµâµâµ¡â´°âµâ´±âµâµ_â´·âµâµâµâ´±âµâµ'.split('_'),
    weekdays : 'â´°âµâ´°âµâ´°âµ_â´°âµ¢âµâ´°âµ_â´°âµâµâµâ´°âµ_â´°â´½âµâ´°âµ_â´°â´½âµ¡â´°âµ_â´°âµâµâµâµ¡â´°âµ_â´°âµâµâ´¹âµ¢â´°âµ'.split('_'),
    weekdaysShort : 'â´°âµâ´°âµâ´°âµ_â´°âµ¢âµâ´°âµ_â´°âµâµâµâ´°âµ_â´°â´½âµâ´°âµ_â´°â´½âµ¡â´°âµ_â´°âµâµâµâµ¡â´°âµ_â´°âµâµâ´¹âµ¢â´°âµ'.split('_'),
    weekdaysMin : 'â´°âµâ´°âµâ´°âµ_â´°âµ¢âµâ´°âµ_â´°âµâµâµâ´°âµ_â´°â´½âµâ´°âµ_â´°â´½âµ¡â´°âµ_â´°âµâµâµâµ¡â´°âµ_â´°âµâµâ´¹âµ¢â´°âµ'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS: 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[â´°âµâ´·âµ â´´] LT',
        nextDay: '[â´°âµâ´½â´° â´´] LT',
        nextWeek: 'dddd [â´´] LT',
        lastDay: '[â´°âµâ´°âµâµ â´´] LT',
        lastWeek: 'dddd [â´´] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : 'â´·â´°â´·âµ âµ âµ¢â´°âµ %s',
        past : 'âµ¢â´°âµ %s',
        s : 'âµâµâµâ´½',
        m : 'âµâµâµâµâ´º',
        mm : '%d âµâµâµâµâ´º',
        h : 'âµâ´°âµâ´°',
        hh : '%d âµâ´°âµâµâ´°âµâµâµ',
        d : 'â´°âµâµ',
        dd : '%d oâµâµâ´°âµ',
        M : 'â´°âµ¢oâµâµ',
        MM : '%d âµâµ¢âµ¢âµâµâµ',
        y : 'â´°âµâ´³â´°âµ',
        yy : '%d âµâµâ´³â´°âµâµ'
    },
    week : {
        dow : 6, // Saturday is the first day of the week.
        doy : 12  // The week that contains Jan 1st is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Ukrainian [uk]
//! author : zemlanin : https://github.com/zemlanin
//! Author : Menelion ElensÃºle : https://github.com/Oire

function plural$6(word, num) {
    var forms = word.split('_');
    return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
}
function relativeTimeWithPlural$4(number, withoutSuffix, key) {
    var format = {
        'mm': withoutSuffix ? 'ÑÐ²Ð¸Ð»Ð¸Ð½Ð°_ÑÐ²Ð¸Ð»Ð¸Ð½Ð¸_ÑÐ²Ð¸Ð»Ð¸Ð½' : 'ÑÐ²Ð¸Ð»Ð¸Ð½Ñ_ÑÐ²Ð¸Ð»Ð¸Ð½Ð¸_ÑÐ²Ð¸Ð»Ð¸Ð½',
        'hh': withoutSuffix ? 'Ð³Ð¾Ð´Ð¸Ð½Ð°_Ð³Ð¾Ð´Ð¸Ð½Ð¸_Ð³Ð¾Ð´Ð¸Ð½' : 'Ð³Ð¾Ð´Ð¸Ð½Ñ_Ð³Ð¾Ð´Ð¸Ð½Ð¸_Ð³Ð¾Ð´Ð¸Ð½',
        'dd': 'Ð´ÐµÐ½Ñ_Ð´Ð½Ñ_Ð´Ð½ÑÐ²',
        'MM': 'Ð¼ÑÑÑÑÑ_Ð¼ÑÑÑÑÑ_Ð¼ÑÑÑÑÑÐ²',
        'yy': 'ÑÑÐº_ÑÐ¾ÐºÐ¸_ÑÐ¾ÐºÑÐ²'
    };
    if (key === 'm') {
        return withoutSuffix ? 'ÑÐ²Ð¸Ð»Ð¸Ð½Ð°' : 'ÑÐ²Ð¸Ð»Ð¸Ð½Ñ';
    }
    else if (key === 'h') {
        return withoutSuffix ? 'Ð³Ð¾Ð´Ð¸Ð½Ð°' : 'Ð³Ð¾Ð´Ð¸Ð½Ñ';
    }
    else {
        return number + ' ' + plural$6(format[key], +number);
    }
}
function weekdaysCaseReplace(m, format) {
    var weekdays = {
        'nominative': 'Ð½ÐµÐ´ÑÐ»Ñ_Ð¿Ð¾Ð½ÐµÐ´ÑÐ»Ð¾Ðº_Ð²ÑÐ²ÑÐ¾ÑÐ¾Ðº_ÑÐµÑÐµÐ´Ð°_ÑÐµÑÐ²ÐµÑ_Ð¿âÑÑÐ½Ð¸ÑÑ_ÑÑÐ±Ð¾ÑÐ°'.split('_'),
        'accusative': 'Ð½ÐµÐ´ÑÐ»Ñ_Ð¿Ð¾Ð½ÐµÐ´ÑÐ»Ð¾Ðº_Ð²ÑÐ²ÑÐ¾ÑÐ¾Ðº_ÑÐµÑÐµÐ´Ñ_ÑÐµÑÐ²ÐµÑ_Ð¿âÑÑÐ½Ð¸ÑÑ_ÑÑÐ±Ð¾ÑÑ'.split('_'),
        'genitive': 'Ð½ÐµÐ´ÑÐ»Ñ_Ð¿Ð¾Ð½ÐµÐ´ÑÐ»ÐºÐ°_Ð²ÑÐ²ÑÐ¾ÑÐºÐ°_ÑÐµÑÐµÐ´Ð¸_ÑÐµÑÐ²ÐµÑÐ³Ð°_Ð¿âÑÑÐ½Ð¸ÑÑ_ÑÑÐ±Ð¾ÑÐ¸'.split('_')
    },
    nounCase = (/(\[[ÐÐ²Ð£Ñ]\]) ?dddd/).test(format) ?
        'accusative' :
        ((/\[?(?:Ð¼Ð¸Ð½ÑÐ»Ð¾Ñ|Ð½Ð°ÑÑÑÐ¿Ð½Ð¾Ñ)? ?\] ?dddd/).test(format) ?
            'genitive' :
            'nominative');
    return weekdays[nounCase][m.day()];
}
function processHoursFunction(str) {
    return function () {
        return str + 'Ð¾' + (this.hours() === 11 ? 'Ð±' : '') + '] LT';
    };
}

hooks.defineLocale('uk', {
    months : {
        'format': 'ÑÑÑÐ½Ñ_Ð»ÑÑÐ¾Ð³Ð¾_Ð±ÐµÑÐµÐ·Ð½Ñ_ÐºÐ²ÑÑÐ½Ñ_ÑÑÐ°Ð²Ð½Ñ_ÑÐµÑÐ²Ð½Ñ_Ð»Ð¸Ð¿Ð½Ñ_ÑÐµÑÐ¿Ð½Ñ_Ð²ÐµÑÐµÑÐ½Ñ_Ð¶Ð¾Ð²ÑÐ½Ñ_Ð»Ð¸ÑÑÐ¾Ð¿Ð°Ð´Ð°_Ð³ÑÑÐ´Ð½Ñ'.split('_'),
        'standalone': 'ÑÑÑÐµÐ½Ñ_Ð»ÑÑÐ¸Ð¹_Ð±ÐµÑÐµÐ·ÐµÐ½Ñ_ÐºÐ²ÑÑÐµÐ½Ñ_ÑÑÐ°Ð²ÐµÐ½Ñ_ÑÐµÑÐ²ÐµÐ½Ñ_Ð»Ð¸Ð¿ÐµÐ½Ñ_ÑÐµÑÐ¿ÐµÐ½Ñ_Ð²ÐµÑÐµÑÐµÐ½Ñ_Ð¶Ð¾Ð²ÑÐµÐ½Ñ_Ð»Ð¸ÑÑÐ¾Ð¿Ð°Ð´_Ð³ÑÑÐ´ÐµÐ½Ñ'.split('_')
    },
    monthsShort : 'ÑÑÑ_Ð»ÑÑ_Ð±ÐµÑ_ÐºÐ²ÑÑ_ÑÑÐ°Ð²_ÑÐµÑÐ²_Ð»Ð¸Ð¿_ÑÐµÑÐ¿_Ð²ÐµÑ_Ð¶Ð¾Ð²Ñ_Ð»Ð¸ÑÑ_Ð³ÑÑÐ´'.split('_'),
    weekdays : weekdaysCaseReplace,
    weekdaysShort : 'Ð½Ð´_Ð¿Ð½_Ð²Ñ_ÑÑ_ÑÑ_Ð¿Ñ_ÑÐ±'.split('_'),
    weekdaysMin : 'Ð½Ð´_Ð¿Ð½_Ð²Ñ_ÑÑ_ÑÑ_Ð¿Ñ_ÑÐ±'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD.MM.YYYY',
        LL : 'D MMMM YYYY Ñ.',
        LLL : 'D MMMM YYYY Ñ., HH:mm',
        LLLL : 'dddd, D MMMM YYYY Ñ., HH:mm'
    },
    calendar : {
        sameDay: processHoursFunction('[Ð¡ÑÐ¾Ð³Ð¾Ð´Ð½Ñ '),
        nextDay: processHoursFunction('[ÐÐ°Ð²ÑÑÐ° '),
        lastDay: processHoursFunction('[ÐÑÐ¾ÑÐ° '),
        nextWeek: processHoursFunction('[Ð£] dddd ['),
        lastWeek: function () {
            switch (this.day()) {
                case 0:
                case 3:
                case 5:
                case 6:
                    return processHoursFunction('[ÐÐ¸Ð½ÑÐ»Ð¾Ñ] dddd [').call(this);
                case 1:
                case 2:
                case 4:
                    return processHoursFunction('[ÐÐ¸Ð½ÑÐ»Ð¾Ð³Ð¾] dddd [').call(this);
            }
        },
        sameElse: 'L'
    },
    relativeTime : {
        future : 'Ð·Ð° %s',
        past : '%s ÑÐ¾Ð¼Ñ',
        s : 'Ð´ÐµÐºÑÐ»ÑÐºÐ° ÑÐµÐºÑÐ½Ð´',
        m : relativeTimeWithPlural$4,
        mm : relativeTimeWithPlural$4,
        h : 'Ð³Ð¾Ð´Ð¸Ð½Ñ',
        hh : relativeTimeWithPlural$4,
        d : 'Ð´ÐµÐ½Ñ',
        dd : relativeTimeWithPlural$4,
        M : 'Ð¼ÑÑÑÑÑ',
        MM : relativeTimeWithPlural$4,
        y : 'ÑÑÐº',
        yy : relativeTimeWithPlural$4
    },
    // M. E.: those two are virtually unused but a user might want to implement them for his/her website for some reason
    meridiemParse: /Ð½Ð¾ÑÑ|ÑÐ°Ð½ÐºÑ|Ð´Ð½Ñ|Ð²ÐµÑÐ¾ÑÐ°/,
    isPM: function (input) {
        return /^(Ð´Ð½Ñ|Ð²ÐµÑÐ¾ÑÐ°)$/.test(input);
    },
    meridiem : function (hour, minute, isLower) {
        if (hour < 4) {
            return 'Ð½Ð¾ÑÑ';
        } else if (hour < 12) {
            return 'ÑÐ°Ð½ÐºÑ';
        } else if (hour < 17) {
            return 'Ð´Ð½Ñ';
        } else {
            return 'Ð²ÐµÑÐ¾ÑÐ°';
        }
    },
    ordinalParse: /\d{1,2}-(Ð¹|Ð³Ð¾)/,
    ordinal: function (number, period) {
        switch (period) {
            case 'M':
            case 'd':
            case 'DDD':
            case 'w':
            case 'W':
                return number + '-Ð¹';
            case 'D':
                return number + '-Ð³Ð¾';
            default:
                return number;
        }
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 1st is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Uzbek [uz]
//! author : Sardor Muminov : https://github.com/muminoff

hooks.defineLocale('uz', {
    months : 'ÑÐ½Ð²Ð°Ñ_ÑÐµÐ²ÑÐ°Ð»_Ð¼Ð°ÑÑ_Ð°Ð¿ÑÐµÐ»_Ð¼Ð°Ð¹_Ð¸ÑÐ½_Ð¸ÑÐ»_Ð°Ð²Ð³ÑÑÑ_ÑÐµÐ½ÑÑÐ±Ñ_Ð¾ÐºÑÑÐ±Ñ_Ð½Ð¾ÑÐ±Ñ_Ð´ÐµÐºÐ°Ð±Ñ'.split('_'),
    monthsShort : 'ÑÐ½Ð²_ÑÐµÐ²_Ð¼Ð°Ñ_Ð°Ð¿Ñ_Ð¼Ð°Ð¹_Ð¸ÑÐ½_Ð¸ÑÐ»_Ð°Ð²Ð³_ÑÐµÐ½_Ð¾ÐºÑ_Ð½Ð¾Ñ_Ð´ÐµÐº'.split('_'),
    weekdays : 'Ð¯ÐºÑÐ°Ð½Ð±Ð°_ÐÑÑÐ°Ð½Ð±Ð°_Ð¡ÐµÑÐ°Ð½Ð±Ð°_Ð§Ð¾ÑÑÐ°Ð½Ð±Ð°_ÐÐ°Ð¹ÑÐ°Ð½Ð±Ð°_ÐÑÐ¼Ð°_Ð¨Ð°Ð½Ð±Ð°'.split('_'),
    weekdaysShort : 'Ð¯ÐºÑ_ÐÑÑ_Ð¡ÐµÑ_Ð§Ð¾Ñ_ÐÐ°Ð¹_ÐÑÐ¼_Ð¨Ð°Ð½'.split('_'),
    weekdaysMin : 'Ð¯Ðº_ÐÑ_Ð¡Ðµ_Ð§Ð¾_ÐÐ°_ÐÑ_Ð¨Ð°'.split('_'),
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'D MMMM YYYY, dddd HH:mm'
    },
    calendar : {
        sameDay : '[ÐÑÐ³ÑÐ½ ÑÐ¾Ð°Ñ] LT [Ð´Ð°]',
        nextDay : '[Ð­ÑÑÐ°Ð³Ð°] LT [Ð´Ð°]',
        nextWeek : 'dddd [ÐºÑÐ½Ð¸ ÑÐ¾Ð°Ñ] LT [Ð´Ð°]',
        lastDay : '[ÐÐµÑÐ° ÑÐ¾Ð°Ñ] LT [Ð´Ð°]',
        lastWeek : '[Ð£ÑÐ³Ð°Ð½] dddd [ÐºÑÐ½Ð¸ ÑÐ¾Ð°Ñ] LT [Ð´Ð°]',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'Ð¯ÐºÐ¸Ð½ %s Ð¸ÑÐ¸Ð´Ð°',
        past : 'ÐÐ¸Ñ Ð½ÐµÑÐ° %s Ð¾Ð»Ð´Ð¸Ð½',
        s : 'ÑÑÑÑÐ°Ñ',
        m : 'Ð±Ð¸Ñ Ð´Ð°ÐºÐ¸ÐºÐ°',
        mm : '%d Ð´Ð°ÐºÐ¸ÐºÐ°',
        h : 'Ð±Ð¸Ñ ÑÐ¾Ð°Ñ',
        hh : '%d ÑÐ¾Ð°Ñ',
        d : 'Ð±Ð¸Ñ ÐºÑÐ½',
        dd : '%d ÐºÑÐ½',
        M : 'Ð±Ð¸Ñ Ð¾Ð¹',
        MM : '%d Ð¾Ð¹',
        y : 'Ð±Ð¸Ñ Ð¹Ð¸Ð»',
        yy : '%d Ð¹Ð¸Ð»'
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 7  // The week that contains Jan 4th is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Vietnamese [vi]
//! author : Bang Nguyen : https://github.com/bangnk

hooks.defineLocale('vi', {
    months : 'thÃ¡ng 1_thÃ¡ng 2_thÃ¡ng 3_thÃ¡ng 4_thÃ¡ng 5_thÃ¡ng 6_thÃ¡ng 7_thÃ¡ng 8_thÃ¡ng 9_thÃ¡ng 10_thÃ¡ng 11_thÃ¡ng 12'.split('_'),
    monthsShort : 'Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12'.split('_'),
    monthsParseExact : true,
    weekdays : 'chá»§ nháº­t_thá»© hai_thá»© ba_thá»© tÆ°_thá»© nÄm_thá»© sÃ¡u_thá»© báº£y'.split('_'),
    weekdaysShort : 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
    weekdaysMin : 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
    weekdaysParseExact : true,
    meridiemParse: /sa|ch/i,
    isPM : function (input) {
        return /^ch$/i.test(input);
    },
    meridiem : function (hours, minutes, isLower) {
        if (hours < 12) {
            return isLower ? 'sa' : 'SA';
        } else {
            return isLower ? 'ch' : 'CH';
        }
    },
    longDateFormat : {
        LT : 'HH:mm',
        LTS : 'HH:mm:ss',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM [nÄm] YYYY',
        LLL : 'D MMMM [nÄm] YYYY HH:mm',
        LLLL : 'dddd, D MMMM [nÄm] YYYY HH:mm',
        l : 'DD/M/YYYY',
        ll : 'D MMM YYYY',
        lll : 'D MMM YYYY HH:mm',
        llll : 'ddd, D MMM YYYY HH:mm'
    },
    calendar : {
        sameDay: '[HÃ´m nay lÃºc] LT',
        nextDay: '[NgÃ y mai lÃºc] LT',
        nextWeek: 'dddd [tuáº§n tá»i lÃºc] LT',
        lastDay: '[HÃ´m qua lÃºc] LT',
        lastWeek: 'dddd [tuáº§n rá»i lÃºc] LT',
        sameElse: 'L'
    },
    relativeTime : {
        future : '%s tá»i',
        past : '%s trÆ°á»c',
        s : 'vÃ i giÃ¢y',
        m : 'má»t phÃºt',
        mm : '%d phÃºt',
        h : 'má»t giá»',
        hh : '%d giá»',
        d : 'má»t ngÃ y',
        dd : '%d ngÃ y',
        M : 'má»t thÃ¡ng',
        MM : '%d thÃ¡ng',
        y : 'má»t nÄm',
        yy : '%d nÄm'
    },
    ordinalParse: /\d{1,2}/,
    ordinal : function (number) {
        return number;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Pseudo [x-pseudo]
//! author : Andrew Hood : https://github.com/andrewhood125

hooks.defineLocale('x-pseudo', {
    months : 'J~Ã¡Ã±ÃºÃ¡~rÃ½_F~Ã©brÃº~Ã¡rÃ½_~MÃ¡rc~h_Ãp~rÃ­l_~MÃ¡Ã½_~JÃºÃ±Ã©~_JÃºl~Ã½_ÃÃº~gÃºst~_SÃ©p~tÃ©mb~Ã©r_Ã~ctÃ³b~Ã©r_Ã~Ã³vÃ©m~bÃ©r_~DÃ©cÃ©~mbÃ©r'.split('_'),
    monthsShort : 'J~Ã¡Ã±_~FÃ©b_~MÃ¡r_~Ãpr_~MÃ¡Ã½_~JÃºÃ±_~JÃºl_~ÃÃºg_~SÃ©p_~Ãct_~ÃÃ³v_~DÃ©c'.split('_'),
    monthsParseExact : true,
    weekdays : 'S~ÃºÃ±dÃ¡~Ã½_MÃ³~Ã±dÃ¡Ã½~_TÃºÃ©~sdÃ¡Ã½~_WÃ©d~Ã±Ã©sd~Ã¡Ã½_T~hÃºrs~dÃ¡Ã½_~FrÃ­d~Ã¡Ã½_S~Ã¡tÃºr~dÃ¡Ã½'.split('_'),
    weekdaysShort : 'S~ÃºÃ±_~MÃ³Ã±_~TÃºÃ©_~WÃ©d_~ThÃº_~FrÃ­_~SÃ¡t'.split('_'),
    weekdaysMin : 'S~Ãº_MÃ³~_TÃº_~WÃ©_T~h_Fr~_SÃ¡'.split('_'),
    weekdaysParseExact : true,
    longDateFormat : {
        LT : 'HH:mm',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY HH:mm',
        LLLL : 'dddd, D MMMM YYYY HH:mm'
    },
    calendar : {
        sameDay : '[T~Ã³dÃ¡~Ã½ Ã¡t] LT',
        nextDay : '[T~Ã³mÃ³~rrÃ³~w Ã¡t] LT',
        nextWeek : 'dddd [Ã¡t] LT',
        lastDay : '[Ã~Ã©st~Ã©rdÃ¡~Ã½ Ã¡t] LT',
        lastWeek : '[L~Ã¡st] dddd [Ã¡t] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'Ã­~Ã± %s',
        past : '%s Ã¡~gÃ³',
        s : 'Ã¡ ~fÃ©w ~sÃ©cÃ³~Ã±ds',
        m : 'Ã¡ ~mÃ­Ã±~ÃºtÃ©',
        mm : '%d m~Ã­Ã±Ãº~tÃ©s',
        h : 'Ã¡~Ã± hÃ³~Ãºr',
        hh : '%d h~Ã³Ãºrs',
        d : 'Ã¡ ~dÃ¡Ã½',
        dd : '%d d~Ã¡Ã½s',
        M : 'Ã¡ ~mÃ³Ã±~th',
        MM : '%d m~Ã³Ã±t~hs',
        y : 'Ã¡ ~Ã½Ã©Ã¡r',
        yy : '%d Ã½~Ã©Ã¡rs'
    },
    ordinalParse: /\d{1,2}(th|st|nd|rd)/,
    ordinal : function (number) {
        var b = number % 10,
            output = (~~(number % 100 / 10) === 1) ? 'th' :
            (b === 1) ? 'st' :
            (b === 2) ? 'nd' :
            (b === 3) ? 'rd' : 'th';
        return number + output;
    },
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Yoruba Nigeria [yo]
//! author : Atolagbe Abisoye : https://github.com/andela-batolagbe

hooks.defineLocale('yo', {
    months : 'Sáº¹Ìráº¹Ì_EÌreÌleÌ_áº¸ráº¹ÌnaÌ_IÌgbeÌ_EÌbibi_OÌkuÌdu_Agáº¹mo_OÌguÌn_Owewe_á»ÌwaÌraÌ_BeÌluÌ_á»Ìpáº¹ÌÌ'.split('_'),
    monthsShort : 'Sáº¹Ìr_EÌrl_áº¸rn_IÌgb_EÌbi_OÌkuÌ_Agáº¹_OÌguÌ_Owe_á»ÌwaÌ_BeÌl_á»Ìpáº¹ÌÌ'.split('_'),
    weekdays : 'AÌiÌkuÌ_AjeÌ_IÌsáº¹Ìgun_á»já»ÌruÌ_á»já»Ìbá»_áº¸tiÌ_AÌbaÌmáº¹Ìta'.split('_'),
    weekdaysShort : 'AÌiÌk_AjeÌ_IÌsáº¹Ì_á»jr_á»jb_áº¸tiÌ_AÌbaÌ'.split('_'),
    weekdaysMin : 'AÌiÌ_Aj_IÌs_á»r_á»b_áº¸t_AÌb'.split('_'),
    longDateFormat : {
        LT : 'h:mm A',
        LTS : 'h:mm:ss A',
        L : 'DD/MM/YYYY',
        LL : 'D MMMM YYYY',
        LLL : 'D MMMM YYYY h:mm A',
        LLLL : 'dddd, D MMMM YYYY h:mm A'
    },
    calendar : {
        sameDay : '[OÌniÌ ni] LT',
        nextDay : '[á»Ìla ni] LT',
        nextWeek : 'dddd [á»sáº¹Ì toÌn\'bá»] [ni] LT',
        lastDay : '[AÌna ni] LT',
        lastWeek : 'dddd [á»sáº¹Ì toÌlá»Ì] [ni] LT',
        sameElse : 'L'
    },
    relativeTime : {
        future : 'niÌ %s',
        past : '%s ká»jaÌ',
        s : 'iÌsáº¹juÌ aayaÌ die',
        m : 'iÌsáº¹juÌ kan',
        mm : 'iÌsáº¹juÌ %d',
        h : 'waÌkati kan',
        hh : 'waÌkati %d',
        d : 'á»já»Ì kan',
        dd : 'á»já»Ì %d',
        M : 'osuÌ kan',
        MM : 'osuÌ %d',
        y : 'á»duÌn kan',
        yy : 'á»duÌn %d'
    },
    ordinalParse : /á»já»Ì\s\d{1,2}/,
    ordinal : 'á»já»Ì %d',
    week : {
        dow : 1, // Monday is the first day of the week.
        doy : 4 // The week that contains Jan 4th is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Chinese (China) [zh-cn]
//! author : suupic : https://github.com/suupic
//! author : Zeno Zeng : https://github.com/zenozeng

hooks.defineLocale('zh-cn', {
    months : 'ä¸æ_äºæ_ä¸æ_åæ_äºæ_å­æ_ä¸æ_å«æ_ä¹æ_åæ_åä¸æ_åäºæ'.split('_'),
    monthsShort : '1æ_2æ_3æ_4æ_5æ_6æ_7æ_8æ_9æ_10æ_11æ_12æ'.split('_'),
    weekdays : 'æææ¥_ææä¸_ææäº_ææä¸_ææå_ææäº_ææå­'.split('_'),
    weekdaysShort : 'å¨æ¥_å¨ä¸_å¨äº_å¨ä¸_å¨å_å¨äº_å¨å­'.split('_'),
    weekdaysMin : 'æ¥_ä¸_äº_ä¸_å_äº_å­'.split('_'),
    longDateFormat : {
        LT : 'Ahç¹mmå',
        LTS : 'Ahç¹måsç§',
        L : 'YYYY-MM-DD',
        LL : 'YYYYå¹´MMMDæ¥',
        LLL : 'YYYYå¹´MMMDæ¥Ahç¹mmå',
        LLLL : 'YYYYå¹´MMMDæ¥ddddAhç¹mmå',
        l : 'YYYY-MM-DD',
        ll : 'YYYYå¹´MMMDæ¥',
        lll : 'YYYYå¹´MMMDæ¥Ahç¹mmå',
        llll : 'YYYYå¹´MMMDæ¥ddddAhç¹mmå'
    },
    meridiemParse: /åæ¨|æ©ä¸|ä¸å|ä¸­å|ä¸å|æä¸/,
    meridiemHour: function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === 'åæ¨' || meridiem === 'æ©ä¸' ||
                meridiem === 'ä¸å') {
            return hour;
        } else if (meridiem === 'ä¸å' || meridiem === 'æä¸') {
            return hour + 12;
        } else {
            // 'ä¸­å'
            return hour >= 11 ? hour : hour + 12;
        }
    },
    meridiem : function (hour, minute, isLower) {
        var hm = hour * 100 + minute;
        if (hm < 600) {
            return 'åæ¨';
        } else if (hm < 900) {
            return 'æ©ä¸';
        } else if (hm < 1130) {
            return 'ä¸å';
        } else if (hm < 1230) {
            return 'ä¸­å';
        } else if (hm < 1800) {
            return 'ä¸å';
        } else {
            return 'æä¸';
        }
    },
    calendar : {
        sameDay : function () {
            return this.minutes() === 0 ? '[ä»å¤©]Ah[ç¹æ´]' : '[ä»å¤©]LT';
        },
        nextDay : function () {
            return this.minutes() === 0 ? '[æå¤©]Ah[ç¹æ´]' : '[æå¤©]LT';
        },
        lastDay : function () {
            return this.minutes() === 0 ? '[æ¨å¤©]Ah[ç¹æ´]' : '[æ¨å¤©]LT';
        },
        nextWeek : function () {
            var startOfWeek, prefix;
            startOfWeek = hooks().startOf('week');
            prefix = this.diff(startOfWeek, 'days') >= 7 ? '[ä¸]' : '[æ¬]';
            return this.minutes() === 0 ? prefix + 'dddAhç¹æ´' : prefix + 'dddAhç¹mm';
        },
        lastWeek : function () {
            var startOfWeek, prefix;
            startOfWeek = hooks().startOf('week');
            prefix = this.unix() < startOfWeek.unix()  ? '[ä¸]' : '[æ¬]';
            return this.minutes() === 0 ? prefix + 'dddAhç¹æ´' : prefix + 'dddAhç¹mm';
        },
        sameElse : 'LL'
    },
    ordinalParse: /\d{1,2}(æ¥|æ|å¨)/,
    ordinal : function (number, period) {
        switch (period) {
            case 'd':
            case 'D':
            case 'DDD':
                return number + 'æ¥';
            case 'M':
                return number + 'æ';
            case 'w':
            case 'W':
                return number + 'å¨';
            default:
                return number;
        }
    },
    relativeTime : {
        future : '%så',
        past : '%så',
        s : 'å ç§',
        m : '1 åé',
        mm : '%d åé',
        h : '1 å°æ¶',
        hh : '%d å°æ¶',
        d : '1 å¤©',
        dd : '%d å¤©',
        M : '1 ä¸ªæ',
        MM : '%d ä¸ªæ',
        y : '1 å¹´',
        yy : '%d å¹´'
    },
    week : {
        // GB/T 7408-1994ãæ°æ®ååäº¤æ¢æ ¼å¼Â·ä¿¡æ¯äº¤æ¢Â·æ¥æåæ¶é´è¡¨ç¤ºæ³ãä¸ISO 8601:1988ç­æ
        dow : 1, // Monday is the first day of the week.
        doy : 4  // The week that contains Jan 4th is the first week of the year.
    }
});

//! moment.js locale configuration
//! locale : Chinese (Hong Kong) [zh-hk]
//! author : Ben : https://github.com/ben-lin
//! author : Chris Lam : https://github.com/hehachris
//! author : Konstantin : https://github.com/skfd

hooks.defineLocale('zh-hk', {
    months : 'ä¸æ_äºæ_ä¸æ_åæ_äºæ_å­æ_ä¸æ_å«æ_ä¹æ_åæ_åä¸æ_åäºæ'.split('_'),
    monthsShort : '1æ_2æ_3æ_4æ_5æ_6æ_7æ_8æ_9æ_10æ_11æ_12æ'.split('_'),
    weekdays : 'æææ¥_ææä¸_ææäº_ææä¸_ææå_ææäº_ææå­'.split('_'),
    weekdaysShort : 'é±æ¥_é±ä¸_é±äº_é±ä¸_é±å_é±äº_é±å­'.split('_'),
    weekdaysMin : 'æ¥_ä¸_äº_ä¸_å_äº_å­'.split('_'),
    longDateFormat : {
        LT : 'Ahé»mmå',
        LTS : 'Ahé»måsç§',
        L : 'YYYYå¹´MMMDæ¥',
        LL : 'YYYYå¹´MMMDæ¥',
        LLL : 'YYYYå¹´MMMDæ¥Ahé»mmå',
        LLLL : 'YYYYå¹´MMMDæ¥ddddAhé»mmå',
        l : 'YYYYå¹´MMMDæ¥',
        ll : 'YYYYå¹´MMMDæ¥',
        lll : 'YYYYå¹´MMMDæ¥Ahé»mmå',
        llll : 'YYYYå¹´MMMDæ¥ddddAhé»mmå'
    },
    meridiemParse: /åæ¨|æ©ä¸|ä¸å|ä¸­å|ä¸å|æä¸/,
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === 'åæ¨' || meridiem === 'æ©ä¸' || meridiem === 'ä¸å') {
            return hour;
        } else if (meridiem === 'ä¸­å') {
            return hour >= 11 ? hour : hour + 12;
        } else if (meridiem === 'ä¸å' || meridiem === 'æä¸') {
            return hour + 12;
        }
    },
    meridiem : function (hour, minute, isLower) {
        var hm = hour * 100 + minute;
        if (hm < 600) {
            return 'åæ¨';
        } else if (hm < 900) {
            return 'æ©ä¸';
        } else if (hm < 1130) {
            return 'ä¸å';
        } else if (hm < 1230) {
            return 'ä¸­å';
        } else if (hm < 1800) {
            return 'ä¸å';
        } else {
            return 'æä¸';
        }
    },
    calendar : {
        sameDay : '[ä»å¤©]LT',
        nextDay : '[æå¤©]LT',
        nextWeek : '[ä¸]ddddLT',
        lastDay : '[æ¨å¤©]LT',
        lastWeek : '[ä¸]ddddLT',
        sameElse : 'L'
    },
    ordinalParse: /\d{1,2}(æ¥|æ|é±)/,
    ordinal : function (number, period) {
        switch (period) {
            case 'd' :
            case 'D' :
            case 'DDD' :
                return number + 'æ¥';
            case 'M' :
                return number + 'æ';
            case 'w' :
            case 'W' :
                return number + 'é±';
            default :
                return number;
        }
    },
    relativeTime : {
        future : '%så§',
        past : '%så',
        s : 'å¹¾ç§',
        m : '1 åé',
        mm : '%d åé',
        h : '1 å°æ',
        hh : '%d å°æ',
        d : '1 å¤©',
        dd : '%d å¤©',
        M : '1 åæ',
        MM : '%d åæ',
        y : '1 å¹´',
        yy : '%d å¹´'
    }
});

//! moment.js locale configuration
//! locale : Chinese (Taiwan) [zh-tw]
//! author : Ben : https://github.com/ben-lin
//! author : Chris Lam : https://github.com/hehachris

hooks.defineLocale('zh-tw', {
    months : 'ä¸æ_äºæ_ä¸æ_åæ_äºæ_å­æ_ä¸æ_å«æ_ä¹æ_åæ_åä¸æ_åäºæ'.split('_'),
    monthsShort : '1æ_2æ_3æ_4æ_5æ_6æ_7æ_8æ_9æ_10æ_11æ_12æ'.split('_'),
    weekdays : 'æææ¥_ææä¸_ææäº_ææä¸_ææå_ææäº_ææå­'.split('_'),
    weekdaysShort : 'é±æ¥_é±ä¸_é±äº_é±ä¸_é±å_é±äº_é±å­'.split('_'),
    weekdaysMin : 'æ¥_ä¸_äº_ä¸_å_äº_å­'.split('_'),
    longDateFormat : {
        LT : 'Ahé»mmå',
        LTS : 'Ahé»måsç§',
        L : 'YYYYå¹´MMMDæ¥',
        LL : 'YYYYå¹´MMMDæ¥',
        LLL : 'YYYYå¹´MMMDæ¥Ahé»mmå',
        LLLL : 'YYYYå¹´MMMDæ¥ddddAhé»mmå',
        l : 'YYYYå¹´MMMDæ¥',
        ll : 'YYYYå¹´MMMDæ¥',
        lll : 'YYYYå¹´MMMDæ¥Ahé»mmå',
        llll : 'YYYYå¹´MMMDæ¥ddddAhé»mmå'
    },
    meridiemParse: /åæ¨|æ©ä¸|ä¸å|ä¸­å|ä¸å|æä¸/,
    meridiemHour : function (hour, meridiem) {
        if (hour === 12) {
            hour = 0;
        }
        if (meridiem === 'åæ¨' || meridiem === 'æ©ä¸' || meridiem === 'ä¸å') {
            return hour;
        } else if (meridiem === 'ä¸­å') {
            return hour >= 11 ? hour : hour + 12;
        } else if (meridiem === 'ä¸å' || meridiem === 'æä¸') {
            return hour + 12;
        }
    },
    meridiem : function (hour, minute, isLower) {
        var hm = hour * 100 + minute;
        if (hm < 600) {
            return 'åæ¨';
        } else if (hm < 900) {
            return 'æ©ä¸';
        } else if (hm < 1130) {
            return 'ä¸å';
        } else if (hm < 1230) {
            return 'ä¸­å';
        } else if (hm < 1800) {
            return 'ä¸å';
        } else {
            return 'æä¸';
        }
    },
    calendar : {
        sameDay : '[ä»å¤©]LT',
        nextDay : '[æå¤©]LT',
        nextWeek : '[ä¸]ddddLT',
        lastDay : '[æ¨å¤©]LT',
        lastWeek : '[ä¸]ddddLT',
        sameElse : 'L'
    },
    ordinalParse: /\d{1,2}(æ¥|æ|é±)/,
    ordinal : function (number, period) {
        switch (period) {
            case 'd' :
            case 'D' :
            case 'DDD' :
                return number + 'æ¥';
            case 'M' :
                return number + 'æ';
            case 'w' :
            case 'W' :
                return number + 'é±';
            default :
                return number;
        }
    },
    relativeTime : {
        future : '%så§',
        past : '%så',
        s : 'å¹¾ç§',
        m : '1 åé',
        mm : '%d åé',
        h : '1 å°æ',
        hh : '%d å°æ',
        d : '1 å¤©',
        dd : '%d å¤©',
        M : '1 åæ',
        MM : '%d åæ',
        y : '1 å¹´',
        yy : '%d å¹´'
    }
});

hooks.locale('en');

return hooks;

})));

},{}],"npm":[function(require,module,exports){
exports.moment = require("moment");


},{"moment":"moment"}]},{},[])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
